[
    {
        "id": "9e8d0666443296bf",
        "type": "tab",
        "label": "Operation",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b1a83a41448db32",
        "type": "tab",
        "label": "LocalTunnel",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "ab630f81cda33d8a",
        "type": "tab",
        "label": "Manual",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "580bb6a3.5dc1d",
        "type": "tab",
        "label": "Heatweb",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9ad9f74f.55ef58",
        "type": "tab",
        "label": "Screen",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c376bc72122fb9a2",
        "type": "tab",
        "label": "Connectivity",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d26c3be6.b5ef58",
        "type": "tab",
        "label": "Setup",
        "disabled": false,
        "info": ""
    },
    {
        "id": "caf59ec6.61c85",
        "type": "tab",
        "label": "Software",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ca03066f6a7451f4",
        "type": "tab",
        "label": "Sequent BA Temp",
        "disabled": false,
        "info": "Flow for reading NTC10K sensors on 3 BA Hats.",
        "env": []
    },
    {
        "id": "6e5b1fa667db3a1d",
        "type": "tab",
        "label": "Operation",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f7fb808af6ec3dfd",
        "type": "tab",
        "label": "Modem",
        "disabled": true,
        "info": ""
    },
    {
        "id": "6d332316b4ce7165",
        "type": "tab",
        "label": "Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ad903b095342f1e3",
        "type": "tab",
        "label": "Sontay Modbus",
        "disabled": false,
        "info": "A Modbus master for connecting to [Sontay](https://www.sontay.com/en-gb/) room controllers.\r\nUses ttyAMA1 serial connection."
    },
    {
        "id": "42ed18ca.652838",
        "type": "tab",
        "label": "MB-Read-Write-Servers",
        "disabled": true,
        "info": ""
    },
    {
        "id": "332e55aa4dadf1e2",
        "type": "tab",
        "label": "Weather",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d1f3d002.63ee48",
        "type": "subflow",
        "name": "rbe 1m",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "dd19c0de.9bebd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "29eae4ad.d68f2c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "a8d56bd2.c3c6f",
        "type": "subflow",
        "name": "runScript",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 139,
                "y": 96,
                "wires": [
                    {
                        "id": "469bad72.0a7394"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 830,
                "y": 460,
                "wires": [
                    {
                        "id": "6b7c3cb6.c9c104",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99",
        "inputLabels": [
            "Script"
        ],
        "outputLabels": [
            "Completed",
            ""
        ]
    },
    {
        "id": "3d0a40a7.66aa4",
        "type": "subflow",
        "name": "html table",
        "info": "",
        "in": [
            {
                "x": 100,
                "y": 180,
                "wires": [
                    {
                        "id": "790d9c49.fccc04"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 180,
                "wires": [
                    {
                        "id": "790d9c49.fccc04",
                        "port": 0
                    }
                ]
            }
        ]
    },
    {
        "id": "1887c5fb483f5c64",
        "type": "subflow",
        "name": "sequent in",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d24aada4e721da07"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 80,
                "wires": [
                    {
                        "id": "6bb4ad03.4f4974",
                        "port": 0
                    }
                ]
            },
            {
                "x": 620,
                "y": 160,
                "wires": [
                    {
                        "id": "6bb4ad03.4f4974",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "channel",
                "type": "num",
                "value": "1"
            },
            {
                "name": "block",
                "type": "str",
                "value": "universal"
            }
        ],
        "meta": {},
        "color": "#DDAA99",
        "status": {
            "x": 500,
            "y": 220,
            "wires": [
                {
                    "id": "6bb4ad03.4f4974",
                    "port": 2
                }
            ]
        }
    },
    {
        "id": "b2d492ed.c4def",
        "type": "subflow",
        "name": "rbe 3min",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ee023f13.5958c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 160,
                "wires": [
                    {
                        "id": "61b66a77.aec334",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "3bcc1796d56e0e4a",
        "type": "subflow",
        "name": "rbe 24h",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "ed3595ba7ad0e4b1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "6fdbb2068778d3c9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "344fa160119932f8",
        "type": "subflow",
        "name": "rbe 5m",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "486403111458df8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "c822677b38fcd83c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ecb148378771f4f5",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "0d7a9245d3c3d9f6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "0d7a9245d3c3d9f6",
                        "port": 0
                    }
                ]
            },
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "0d7a9245d3c3d9f6",
                        "port": 1
                    }
                ]
            }
        ]
    },
    {
        "id": "dadb5d41.655b1",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#1e7194",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#3037e8",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#d91212",
                    "value": "#3037e8",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#282828",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#141414",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#757af0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#333333",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#454ae8",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 57,
                "sy": 52,
                "gx": 3,
                "gy": 2,
                "cx": 6,
                "cy": 6,
                "px": 6,
                "py": 5
            }
        }
    },
    {
        "id": "550ec543.b55bc4",
        "type": "heatwebConfig",
        "name": "Heatweb Controller zccboovai3u",
        "description": "SHED Heating East",
        "url": "https://hw3.ddns.net",
        "nodeId": "zccboovai3u",
        "networkId": "swanseashed",
        "localNetworkId": "local",
        "localDirectory": "/home/pi/node-hiu",
        "htmlDirectory": "",
        "httpPort": "",
        "httpsKey": "",
        "httpsCert": "",
        "deviceType": "",
        "adminPassword": "",
        "guestPassword": "",
        "loadBoot": false
    },
    {
        "id": "888f4ceb.4b158",
        "type": "ui_tab",
        "name": "Setup",
        "icon": "fa-cog",
        "order": 23,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cb203bcb.f1ec68",
        "type": "ui_group",
        "name": "DefaultSetup",
        "tab": "888f4ceb.4b158",
        "order": 1,
        "disp": false,
        "width": "9",
        "collapse": false
    },
    {
        "id": "ee34b8ab.222b68",
        "type": "ui_group",
        "name": "MQTT Data ",
        "tab": "c6a43c18.30063",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "8ef017d0.9a0628",
        "type": "ui_group",
        "name": "MenuReadings",
        "tab": "c6a43c18.30063",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "43af1847.935fd8",
        "type": "ui_group",
        "name": "Default",
        "tab": "c6a43c18.30063",
        "order": 3,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "c6a43c18.30063",
        "type": "ui_tab",
        "name": "Readings",
        "icon": "fa-table",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "31ddf4e3.0519dc",
        "type": "ui_group",
        "name": "Default",
        "tab": "4d7ab312.a67afc",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "4d7ab312.a67afc",
        "type": "ui_tab",
        "name": "Graph",
        "icon": "fa-line-chart",
        "order": 10,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "db644eb4.b9d0a",
        "type": "ui_group",
        "name": "M",
        "tab": "ad9b32d2.b3054",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "ad9b32d2.b3054",
        "type": "ui_tab",
        "name": "Browser",
        "icon": "fa-line-chart",
        "order": 12,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "36b47e47.04f1c2",
        "type": "ui_group",
        "name": "Buttons",
        "tab": "888f4ceb.4b158",
        "order": 2,
        "disp": false,
        "width": "3",
        "collapse": false
    },
    {
        "id": "c982fbb8.1deb38",
        "type": "ui_group",
        "name": "hidden_group",
        "tab": "7c447e96.4b96a",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7c447e96.4b96a",
        "type": "ui_tab",
        "name": "Zooland Sys",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "10aaba68.e21626",
        "type": "ui_tab",
        "name": "Browser",
        "icon": "fa-chrome",
        "order": 18,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e6210b42.32c588",
        "type": "ui_group",
        "name": "Browser",
        "tab": "10aaba68.e21626",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3d9e45e.bcd50ba",
        "type": "ui_group",
        "name": "Radial Gauges",
        "tab": "e625ce36.34cf3",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e625ce36.34cf3",
        "type": "ui_tab",
        "name": "Widgets",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "07c35ea8fb94a2fc",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB2",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "100",
        "bin": "false",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b77843a6.57d18",
        "type": "ui_group",
        "name": "Modem AT Interface",
        "tab": "c8185974.465238",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c8185974.465238",
        "type": "ui_tab",
        "name": "Modem",
        "icon": "fa-signal",
        "order": 20,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7ad2997b.42a908",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a1a40c5149c84832",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "heatweb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://europe-west1-1.gcp.cloud2.influxdata.com",
        "rejectUnauthorized": true
    },
    {
        "id": "02cf675553394d1d",
        "type": "serial-port",
        "z": "ad903b095342f1e3",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "even",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "50",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "93ab2985bf8ca250",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "heatweb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://eu-central-1-1.aws.cloud2.influxdata.com/",
        "rejectUnauthorized": true,
        "info": "eL1lEr527yibtl-9hvaNQNWB6JLuOq_ZuQqfFfZw7F1jg3oZLz022IwRur9qQhw_FeeyE9i7aw8tcPwlUJz-3g=="
    },
    {
        "id": "80abe4eb2166ba41",
        "type": "serial-port",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "2",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "50",
        "bin": "bin",
        "out": "time",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "a24bea7c.848da",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "10502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "aefcd568.ff81c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "127.0.0.1",
        "tcpPort": "11502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "d71e6162d7e087b2",
        "type": "modbus-client",
        "name": "Heating West",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.57",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 2,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "5a15e08548d9c393",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.50",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0a9a86a0d76f9647",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.52",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c09cc9186ceab33f",
        "type": "mqtt-broker",
        "name": "main panel",
        "broker": "192.168.1.50",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "98732c68fada9942",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.51",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ed2df76d3b6a6aa",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.heatweb.cloud",
        "port": "8883",
        "tls": "0f29cbf427bdb043",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0f29cbf427bdb043",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "cert.pem",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "dd19c0de.9bebd",
        "type": "rbe",
        "z": "d1f3d002.63ee48",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "29eae4ad.d68f2c"
            ]
        ]
    },
    {
        "id": "8b22fc2a.83d07",
        "type": "inject",
        "z": "d1f3d002.63ee48",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "dd19c0de.9bebd"
            ]
        ]
    },
    {
        "id": "29eae4ad.d68f2c",
        "type": "switch",
        "z": "d1f3d002.63ee48",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "eb92fac.cb1f108",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo bash /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 246.2857208251953,
        "y": 418.28569984436035,
        "wires": [
            [
                "6b7c3cb6.c9c104"
            ],
            [],
            []
        ]
    },
    {
        "id": "ef9bf9d9.e12f28",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo chown root:node-red /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 296.2857208251953,
        "y": 298.28569984436035,
        "wires": [
            [
                "47ddca7f.78036c"
            ],
            [],
            []
        ]
    },
    {
        "id": "47ddca7f.78036c",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo chmod 755 /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 266.2857208251953,
        "y": 358.28569984436035,
        "wires": [
            [
                "eb92fac.cb1f108"
            ],
            [],
            []
        ]
    },
    {
        "id": "6b7c3cb6.c9c104",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo mv /home/pi/node-hiu/addmqttacl.sh /home/pi/node-hiu/_lastrun.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 336.2857208251953,
        "y": 478.28569984436035,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5ee23677.67d8e",
        "type": "file",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "filename": "/home/pi/node-hiu/addmqttacl.sh",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "59609ed4.bee04",
        "type": "delay",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 126.28572082519531,
        "y": 238.28569984436035,
        "wires": [
            [
                "ef9bf9d9.e12f28"
            ]
        ]
    },
    {
        "id": "469bad72.0a7394",
        "type": "trigger",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": false,
        "units": "s",
        "reset": "",
        "outputs": 1,
        "x": 279,
        "y": 96,
        "wires": [
            [
                "5ee23677.67d8e",
                "59609ed4.bee04"
            ]
        ]
    },
    {
        "id": "790d9c49.fccc04",
        "type": "function",
        "z": "3d0a40a7.66aa4",
        "name": "htmltable",
        "func": "var htmlt = '<table width=\"100%\">';\n\nfor (var key in msg.payload) {\n    \n    \n    htmlt += '<tr><td>' + key.replace(/_/g, ' ') + '</td><td align=\"right\">' + msg.payload[key] + '</td></tr>';\n}\n\nhtmlt += '<table>';\n\nmsg.payload=htmlt;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 240,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6bb4ad03.4f4974",
        "type": "function",
        "z": "1887c5fb483f5c64",
        "name": "",
        "func": "\nvar io = global.get(\"io\");\nio = io[msg.block+\"\"+msg.channel];\n\nvar msg1={\"payload\":\"1\"}\nif (!io) {\n    \n    return [null,msg1,msg3];\n}\n\nmsg.io = io;\n\nvar msg3 = {};\nmsg3.payload = msg.channel + \":  \" + io[\"type\"];\n\n\nif(io[\"type\"].indexOf(\"PULSE\")>-1) { msg.payload =  \"countrd\"; }\n\nelse if(io[\"type\"].indexOf(\"10K\")>-1) { \n    \n    if(msg.block==\"universal\") {   msg.payload =  \"r10krd\";  }\n    else {  msg.payload =  \"rthrd\";    msg.payload =  \"rthrd\"; }\n    \n}\n\nelse if(io[\"type\"].indexOf(\"10V\")>-1) { msg.payload =  \"adcrd\"; }\n\n\nelse { \n    \n    msg1={\"payload\":\"1\"}\n    return [null,msg1,msg3];\n    \n    \n}\n\n// address & channel\n//msg.payload =  msg.board + \" \" +  msg.payload + \" \" + msg.channel;\nmsg.payload =  msg.payload + \" \" + msg.channel;\n\nreturn [msg,null,msg3];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d24aada4e721da07",
        "type": "change",
        "z": "1887c5fb483f5c64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "channel",
                "pt": "msg",
                "to": "channel",
                "tot": "env"
            },
            {
                "t": "set",
                "p": "block",
                "pt": "msg",
                "to": "block",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "6bb4ad03.4f4974"
            ]
        ]
    },
    {
        "id": "61b66a77.aec334",
        "type": "switch",
        "z": "b2d492ed.c4def",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "23f9ad60.8b4b82",
        "type": "change",
        "z": "b2d492ed.c4def",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "ee023f13.5958c"
            ]
        ]
    },
    {
        "id": "44580c0c.eb7c04",
        "type": "inject",
        "z": "b2d492ed.c4def",
        "name": "",
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "23f9ad60.8b4b82"
            ]
        ]
    },
    {
        "id": "ee023f13.5958c",
        "type": "rbe",
        "z": "b2d492ed.c4def",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "61b66a77.aec334"
            ]
        ]
    },
    {
        "id": "ed3595ba7ad0e4b1",
        "type": "rbe",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "6fdbb2068778d3c9"
            ]
        ]
    },
    {
        "id": "ac6886f7de81d7ca",
        "type": "inject",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "ed3595ba7ad0e4b1"
            ]
        ]
    },
    {
        "id": "6fdbb2068778d3c9",
        "type": "switch",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "486403111458df8e",
        "type": "rbe",
        "z": "344fa160119932f8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "c822677b38fcd83c"
            ]
        ]
    },
    {
        "id": "9dd86fca5dcbfcab",
        "type": "inject",
        "z": "344fa160119932f8",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "486403111458df8e"
            ]
        ]
    },
    {
        "id": "c822677b38fcd83c",
        "type": "switch",
        "z": "344fa160119932f8",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0d7a9245d3c3d9f6",
        "type": "function",
        "z": "ecb148378771f4f5",
        "name": "split",
        "func": "var onV = msg.onV || 4;\nvar offV = 0;\n\nmsg.roomtemp = parseFloat(global.get(\"readings.local.\" + msg.stat + \".dat.temperature.value\") || 30);\n\nif (msg.roomtemp > 21) {\n\n    onV = 0;\n    offV = 0;\n    msg.delay = 3000;\n}\n\nelse {\n\n\n    if (msg.delay > 28000) {\n\n        onV = onV + ((msg.delay - 28000) / 1000)\n        offV = 1 + ((msg.delay - 28000) / 1000)\n    }\n\n    // Flow temperature adjustment.\n    msg.delay = parseInt(msg.delay * (global.get(\"fAdjust\") || 1));\n    //if (msg.delay > 5000) { \n\n    onV = parseInt(onV * 100) / 100;\n    if (onV > 9.5) { onV = 9.5; }\n\n    offV = parseInt(offV * 100) / 100;\n    if (offV > 8) { offV = 8; }\n\n}\n\nvar msg1 = { payload: msg.payload + (\"\" + onV), topic: msg.topic };\nmsg.payload = msg.payload + (\"\" + offV);\n\n//if (msg.delay > 28000) { return [msg1, null]; }\n\nreturn [msg1, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "92ddb4c174ed6fd2",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 60,
        "wires": [
            [
                "275116dd3dac404d"
            ]
        ]
    },
    {
        "id": "275116dd3dac404d",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "\n\n// zones 1 & 9 may be crossed.\n\n\nvar zones = [\n    { cmd: \"megabas 2 dacwr 1 \", zone: 1, onV: 2, stat: \"sontay113\", tRObj: \"htg-west.dat.tRZ1\"},\n    { cmd: \"megabas 2 dacwr 2 \", zone: 2, onV: 2, stat: \"sontay112\", tRObj: \"htg-west.dat.tRZ2\" },\n    { cmd: \"megabas 2 dacwr 3 \", zone: 3, onV: 2, stat: \"sontay111\", tRObj: \"htg-west.dat.tRZ3\" },\n    { cmd: \"megabas 0 dacwr 4 \", zone: 4, onV: 2, stat: \"sontay110\", tRObj: \"htg-west.dat.tRZ4\", fancmds: [\"megabas 0 dacwr 2 \", \"megabas 0 dacwr 3 \"] },\n    { cmd: \"megabas 1 dacwr 2 \", zone: 5, onV: 2, stat: \"sontay114\", tRObj: \"htg-west.dat.tRZ5\" },\n    { cmd: \"megabas 2 dacwr 4 \", zone: 6, onV: 2, stat: \"sontay115\", tRObj: \"htg-west.dat.tRZ6\" },\n    { cmd: \"megabas 1 dacwr 4 \", zone: 7, onV: 2, stat: \"sontay116\", tRObj: \"htg-west.dat.tRZ7\", fancmds: [\"megabas 1 dacwr 3 \"] },\n    { cmd: \"megabas 4 dacwr 2 \", zone: 8, onV: 2, stat: \"sontay117\", tRObj: \"htg-west.dat.tRZ8\", fancmds: [\"megabas 4 dacwr 1 \"] },\n    { cmd: \"megabas 4 dacwr 4 \", zone: 9, onV: 2, stat: \"sontay118\", tRObj: \"htg-west.dat.tRZ9\", fancmds: [\"megabas 4 dacwr 3 \"] }\n]\n\n// 112 / 113 ?\n\n\nflow.set(\"zones\", zones);\n\nflow.set(\"deviceid\", \"htg-west\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "0755e5b9825e6eab",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "2eb48544682316c2"
            ]
        ]
    },
    {
        "id": "457fbdc98d7382fd",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\nvar oat = flow.get(\"oat\") || 10;\nif (oat>100) { oat = 0; }\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\nflow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    if (i==1) { continue; }\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = zones[zone].onTime || 5000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = 5000;  // for now\n\n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n    zones[zone].tSetUser = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.setpoint.value\") || 50);\n\n\n    // pre-heat from 6-9am\n    var td = new Date();\n    var minuteOfDay = (60 * td.getHours()) + td.getMinutes();\n    var tDefault = 21.5;\n\n    zones[zone].tSetRoom = tDefault;\n\n    // if (minuteOfDay <= 360) {\n\n    //     //zones[zone].tSetRoom = 15;\n    //     zones[zone].tSetRoom = tDefault;\n\n    // } \n    // else \n    if (minuteOfDay < 480) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 8) + (8 * (minuteOfDay) / 480);\n        zones[zone].tSetRoom = Math.max(16, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n        // turn off between 8 and 9 am\n        // to allow startup to settle down \n\n        // if (zones[zone].tRoom < tDefault) {\n        //     zones[zone].tSetRoom = (tDefault + zones[zone].tRoom) / 2;\n        // }\n\n        // zones[zone].gapI = 300000;\n        // zones[zone].onTime = 5000;\n        // zones[zone].tSetRoom = 15;\n\n        // } else if (minuteOfDay > 900 && minuteOfDay <= 1020) {\n\n        //     zones[zone].tSetRoom = (tDefault - 1);\n\n    }\n    else if (minuteOfDay > 1080) {\n\n        zones[zone].tSetRoom = 16;\n        //zones[zone].tSetRoom = tDefault;\n    }\n\n    // on constant\n    //zones[zone].tSetRoom = tDefault;\n\n    // DONT DO ZONES\n   // if (i == 2 || i == 4) { zones[zone].tSetRoom = 16; }\n\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    zones[zone].turndown = 0; // no occupancy turn down temporary.\n\n    var setVme;  // set voltage\n\n    if (parseFloat(zones[zone].state || 0) > 0) {\n\n        zones[zone].lastOff = timin;\n\n        //zones[zone].state = 0.5;  // soft close\n\n\n        if (zones[zone].offV > 0) {\n\n            setVme = zones[zone].offV;\n            zones[zone].nextTime = timin + zones[zone].gap;\n            zones[zone].state = 0;\n        }\n\n        else {\n\n            if (zones[zone].state > 0.2) {\n\n                zones[zone].nextTime = timin + 1000;\n                zones[zone].state = zones[zone].state / 2;\n\n                setVme = zones[zone].onV * zones[zone].state;\n\n            }\n            else {\n\n                setVme = zones[zone].offV;\n                zones[zone].nextTime = timin + zones[zone].gap;\n                zones[zone].state = 0;\n            }\n        }\n\n        //setVme = zones[zone].offV || 0;\n\n\n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n\n\n\n    }\n\n    else {   // on pulse\n\n        zones[zone].state = 1;\n\n        zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n\n        zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n        zones[zone].tRLast = zones[zone].tR;\n\n\n\n        var integ = 1000;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 500000) { zones[zone].gapI = 500000; }  // max off time in milliseconds\n        if (zones[zone].gapI < -300000) { zones[zone].gapI = -300000; }  // \n\n        var prop = 50;\n        //if (zones[zone].errT < 0) { prop = prop * 2; } // faster when heating.\n\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n        if (zones[zone].gapP > 500000) { zones[zone].gapP = 300000; }  // max prop\n        else if (zones[zone].gapP < -300000) { zones[zone].gapP = -300000; }  // min prop\n\n        var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n        var diff = 60;\n\n        // when not in fine control, react more to counter increasing temperatures\n        // ... easier to add than remove heat from rooms.\n        //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n        if (tDM > 0) { diff = 120; }\n\n        //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n        var tDiffr = (10000000000 * tDM) / 60000;\n\n        //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].gapD = tDiffr * diff;\n        if (zones[zone].gapD > 300000) { zones[zone].gapD = 300000; }  // max diff\n        else if (zones[zone].gapD < -300000) { zones[zone].gapD = -300000; }  // max diff\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0) + (zones[zone].gapD || 0) + (3 * (avgd || 0));\n\n        if (zones[zone].gap < -180000) { zones[zone].gap = -180000; }  // max gap = 4v\n\n        if (zones[zone].errT > 1) { // off but not zero, when room too hot.\n            zones[zone].onV = 0.00;\n            zones[zone].offV = 0.0;\n            zones[zone].gap = 300000;\n        }\n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 120000)\n\n            // new 21/11/23\n            //zones[zone].offV = Math.max(0, zones[zone].onV - 4);\n\n            var offscalar = (zones[zone].onV - 2) * (zones[zone].onV - 2) / 5;\n            zones[zone].offV = Math.max(zones[zone].onV / 2, offscalar );\n\n            zones[zone].gap = Math.max(30000, zones[zone].gap);\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n            zones[zone].gap = 300000;\n            zones[zone].offV = 0;\n        }\n        else { zones[zone].onV = 2; }\n\n\n        // Flow Temperature Adjustments\n        var tF = flow.get(\"tF\") || 60;\n        zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n        //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n        zones[zone].onTime = Math.max(1500, 5000 * zones[zone].tFAdjust);\n\n        if (zones[zone].onV > 4) {\n            //zones[zone].onTime = zones[zone].onTime + 250;\n        }\n\n\n\n        // if (zones[zone].onV > 5) {\n        //     zones[zone].offV = (zones[zone].offV || 0) + 0.025;\n        // }\n        // if (zones[zone].onV > 2) {  // testing more aggressive offV\n        //     zones[zone].offV = zones[zone].onV - 1.5;\n        // } else {\n        //     zones[zone].offV = 0;\n        // }\n\n        // testing with fixed limit of 30C\n        // adds both a delay of up to 125s, and voltage reduction, over 5C span (to zero)\n        zones[zone].rtnLimitDelay = 0;\n\n\n        //if (zones[zone].tR > 99) { // temporary.\n\n            if (zones[zone].tR > 30) {\n\n                zones[zone].rtnLimitDelay = Math.max(0, Math.min(125, 5 * (zones[zone].tR - 30)));\n\n                var af = Math.max(10, zones[zone].tR - 30.0) / 10;\n                zones[zone].onV = zones[zone].onV * (1 - af);\n                zones[zone].offV = zones[zone].offV * (1 - af);\n            }\n\n            // if the hottest return, and rising, then good chance valve needs reseating...\n            if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) {\n                zones[zone].onV = 0.2;\n                zones[zone].offV = 0;\n                zones[zone].gap = 500000;\n                zones[zone].onTime = 2000;\n            }\n        //}\n\n        if (zones[zone].onTime > 30000) { zones[zone].onTime = 30000; }\n        if (zones[zone].offV > 2.5) { zones[zone].offV = 2.5; }\n\n\n        // minimum movement to help seating. off below 0.2.\n        if (zones[zone].onV < 0.2) { zones[zone].onV = 0; }\n\n        if (zones[zone].onV > 7) {\n            zones[zone].onV = 7;\n        } // max onV\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        if (zones[zone].gap > 500000) { zones[zone].gap = 500000; }  // max off time in milliseconds\n\n\n        if (zones[zone].onV < ((zones[zone].offV || 0) + 0.2)) {\n            zones[zone].offV = Math.max(0, zones[zone].offV - 0.01);  // wind down slow..\n        }\n\n        setVme = parseFloat(zones[zone].onV);\n        zones[zone].tR = zones[zone].tR || 30;\n\n        zones[zone].lastOn = timin;\n        zones[zone].nextTime = timin + zones[zone].onTime;\n\n    }\n\n    // temporary\n    //if (zones[zone].zone == 9) { setVme = 0; } \n    //else { setVme = 0; }\n\n\n    setVme = parseInt(setVme * 100) / 100;\n\n    //setVme = 0;\n    if (setVme < 0) { setVme = 0; }\n\n\n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].cmd + zones[zone].setV;\n\n    if (zones[zone].fancmds && zones[zone].state == 1) {\n        for (var fan in zones[zone].fancmds) {\n            // changed fan speed 21/11/23\n            var fv = 19 - oat; //zones[zone].setV - zones[zone].errT;\n            if (fv < 0.5) { fv = 0.5; }\n            if (fv > 8) { fv = 8; }\n            fv = parseInt(fv * 100) / 100;\n            cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].fancmds[fan] + fv;\n        }\n    }\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n    // }\n\n\n\n\n\n}\n\nif (cmdsout !== \"\") {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 240,
        "wires": [
            [
                "e59890ad4159f8d3",
                "585bf3b6928ae521"
            ],
            [
                "9415fcac21e853e7",
                "a42dd0bb6d88b4e4"
            ]
        ]
    },
    {
        "id": "e59890ad4159f8d3",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 78",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "9415fcac21e853e7",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 300,
        "wires": []
    },
    {
        "id": "585bf3b6928ae521",
        "type": "exec",
        "z": "9e8d0666443296bf",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "0be94f86a0b1532a"
            ],
            [
                "0be94f86a0b1532a"
            ],
            [
                "8a937023c3a91e76"
            ]
        ]
    },
    {
        "id": "0be94f86a0b1532a",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 80",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "a42dd0bb6d88b4e4",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 555,
        "y": 260,
        "wires": []
    },
    {
        "id": "8a937023c3a91e76",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "function 8",
        "func": "\nvar zones = flow.get(\"zones\");\nvar devicePrefix = \"htg-west\";\n\nfor (var zone in zones) {\n\n    if (zones[zone].zone == 1) { continue; }\n\n    for (var v in zones[zone]) {\n\n        if (v == \"tR\" || v == \"setV\"  || v == \"tSetRoom\" || v == \"tRoom\" || v == \"errT\" || v == \"onV\" || v == \"gap\"  || v == \"gapI\" || v == \"gapP\" || v == \"gapD\") { \n\n            var msg2 = {};\n            msg2.topic = devicePrefix + \"-zone\" + zones[zone].zone + \"/dat/\" + v;\n            msg2.payload = zones[zone][v];\n            node.send(msg2);\n        }\n    }\n\n\n\n\n\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "9164d260b485b994"
            ]
        ]
    },
    {
        "id": "a460c946e6675232",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 340,
        "wires": []
    },
    {
        "id": "9164d260b485b994",
        "type": "rbe",
        "z": "9e8d0666443296bf",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "02be2eb2b3d31f25"
            ]
        ]
    },
    {
        "id": "b3fa1a036ac9c0a6",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1235,
        "y": 280,
        "wires": []
    },
    {
        "id": "9a641a8cdf4b4803",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 970,
        "y": 260,
        "wires": [
            [
                "9164d260b485b994"
            ]
        ]
    },
    {
        "id": "02be2eb2b3d31f25",
        "type": "switch",
        "z": "9e8d0666443296bf",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "a460c946e6675232",
                "b3fa1a036ac9c0a6"
            ]
        ]
    },
    {
        "id": "c296351edd042dda",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    if ((timin - (zones[zone].lastOn || timin) < 3000) && (timin - (zones[zone].lastOff || timin) < 20000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n    \n    \n    zones[zone].tRoom = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 30);\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 21;    // !! NEED to takee from Sontay Dials\n\n    var setVme;  // set voltage\n    if (parseFloat(zones[zone].setV || 0) > 0) {    // already open = closing = take return reading and calculate off time.\n\n        setVme = 0; \n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n        zones[zone].errT = zones[zone].tRoom - zones[zone].tSetRoom;\n\n        var integ = 50;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 500000) { zones[zone].gapI = 500000; }  // max off time in milliseconds\n\n        var prop = 5;\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0);\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        else if (zones[zone].gap > 600000) { zones[zone].gap = 600000; }  // max off time in milliseconds\n\n        if (zones[zone].errT > 1) { zones[zone].onV = 0.05; } // off but not zero, when room too hot.\n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 10000)\n            zones[zone].gap = 60000;\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0.1, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n        }\n        else { zones[zone].onV = 2; }\n        if (zones[zone].onV > 5) { zones[zone].onV = 5; } // max onV\n\n        \n\n\n        zones[zone].lastOff = timin; \n        zones[zone].nextTime = timin + zones[zone].gap;\n\n    }\n    else {   // on pulse\n\n        setVme = parseFloat(zones[zone].onV); \n        zones[zone].tR = zones[zone].tR || 30;    \n\n        zones[zone].lastOn = timin; \n        zones[zone].nextTime = timin + 3000; // FIXED 3s on pulse for starters......\n\n    }\n\n    setVme = parseInt(setVme*100)/100;\n\n    //if (zones[zone].setV !== setVme) {   // send if change to voltage.\n\n    \n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout==\"\"?\"\":\" && \") + zones[zone].cmd + zones[zone].setV;\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n   // }\n\n    \n    \n    \n    \n}\n\nif (cmdsout !== \"\" ) {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 860,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "dde62d546346bbb9",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n    \n    \n\n    zones[zone].tRoom = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 30);\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 21;    // !! NEED to takee from Sontay Dials\n\n    var setVme;  // set voltage\n    if (parseFloat(zones[zone].setV || 0) > 0) {    // already open = closing = take return reading and calculate off time.\n\n\n        setVme = 0; \n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n        zones[zone].errT = zones[zone].tRoom - zones[zone].tSetRoom;\n\n        var integ = 50;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 500000) { zones[zone].gapI = 500000; }  // max off time in milliseconds\n\n        var prop = 5;\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n\n        var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n        var diff = 20;\n        var tDiffr = (100000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap||1000));\n\n        zones[zone].gapD = tDiffr * diff;\n        if (zones[zone].gapD > 500000) { zones[zone].gapD = 500000; }  // max diff\n        else if (zones[zone].gapD < -500000) { zones[zone].gapD = -500000; }  // max diff\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0) + (zones[zone].gapD || 0);\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        else if (zones[zone].gap > 600000) { zones[zone].gap = 600000; }  // max off time in milliseconds\n\n        if (zones[zone].errT > 1) { zones[zone].onV = 0.05; } // off but not zero, when room too hot.\n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 10000)\n            zones[zone].gap = 60000;\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0.1, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n        }\n        else { zones[zone].onV = 2; }\n        if (zones[zone].onV > 5) { zones[zone].onV = 5; } // max onV\n\n        \n\n\n        zones[zone].lastOff = timin; \n        zones[zone].nextTime = timin + zones[zone].gap;\n\n    }\n    else {   // on pulse\n\n        setVme = parseFloat(zones[zone].onV); \n        zones[zone].tR = zones[zone].tR || 30;    \n\n        zones[zone].lastOn = timin; \n        zones[zone].nextTime = timin + 3000; // FIXED 3s on pulse for starters......\n\n    }\n\n    setVme = parseInt(setVme*100)/100;\n\n    //if (zones[zone].setV !== setVme) {   // send if change to voltage.\n\n    \n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout==\"\"?\"\":\" && \") + zones[zone].cmd + zones[zone].setV;\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n   // }\n\n    \n    \n    \n    \n}\n\nif (cmdsout !== \"\" ) {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 820,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "41cfd40608526132",
        "type": "function",
        "z": "9e8d0666443296bf",
        "d": true,
        "name": "setup",
        "func": "\n\nvar zones = flow.get(\"zones\");\n\n\nfor (var zone in zones) {\n\n    zones[zone].tSetRoom = parseFloat(msg.payload);    \n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "58a4bfe774d749c2",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "21",
        "payloadType": "num",
        "x": 150,
        "y": 1380,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "6ddb9ecc8ed7c6ec",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "22",
        "payloadType": "num",
        "x": 150,
        "y": 1420,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "a7087ac887903257",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 1420,
        "wires": [
            [
                "ab35debed1c0e196"
            ]
        ]
    },
    {
        "id": "ab35debed1c0e196",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "var zones =  flow.get(\"zones\");\n\n// zones[2].stat=\"sontay113\";\n// zones[2].offV = 0;\n\nzones[0].lastOccupied = 10;\nzones[1].lastOccupied = 10;\nzones[2].lastOccupied = 10;\n// zones[3].offV = 0;\n// zones[0].offV = 0;\n// zones[8].offV = 0;\n\nflow.set(\"zones\", zones);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "11d00828a63040e5",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 1460,
        "wires": [
            [
                "f59b2f2f7500f637"
            ]
        ]
    },
    {
        "id": "f59b2f2f7500f637",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "var zones =  flow.get(\"zones\");\n\nzones[8].fancmds = [\"megabas 4 dacwr 1 \"]\nzones[0].fancmds = [\"megabas 4 dacwr 3 \"]\nzones[3].fancmds = [\"megabas 0 dacwr 2 \", \"megabas 0 dacwr 3 \"]\n\nflow.set(\"zones\", zones);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "c35be0874b92d3d3",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 1380,
        "wires": [
            [
                "7df8825ea58bc808"
            ]
        ]
    },
    {
        "id": "7df8825ea58bc808",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "var zones =  flow.get(\"zones\");\n\nzones[6].scalePID = 0.1;\nzones[7].scalePID = 0.4;\nzones[4].scalePID = 0.7;\nzones[3].scalePID = 0.2;\nzones[1].scalePID = 1;\n\nflow.set(\"zones\", zones);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "703a0da1a56fa59b",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "var zones = [\n    { cmd: \"megabas 2 dacwr 1 \", zone: 1, onV: 2, stat: \"sontay118\", tRObj: \"htg-west.dat.tRZ1\", fancmds: [\"megabas 4 dacwr 3 \"] },\n    { cmd: \"megabas 2 dacwr 2 \", zone: 2, onV: 2, stat: \"sontay111\", tRObj: \"htg-west.dat.tRZ2\" },\n    { cmd: \"megabas 2 dacwr 3 \", zone: 3, onV: 2, stat: \"sontay112\", tRObj: \"htg-west.dat.tRZ3\" },\n    { cmd: \"megabas 0 dacwr 4 \", zone: 4, onV: 2, stat: \"sontay110\", tRObj: \"htg-west.dat.tRZ4\", fancmds: [\"megabas 0 dacwr 2 \", \"megabas 0 dacwr 3 \"] },\n    { cmd: \"megabas 1 dacwr 2 \", zone: 5, onV: 2, stat: \"sontay114\", tRObj: \"htg-west.dat.tRZ5\" },\n    { cmd: \"megabas 2 dacwr 4 \", zone: 6, onV: 2, stat: \"sontay115\", tRObj: \"htg-west.dat.tRZ6\" },\n    { cmd: \"megabas 1 dacwr 4 \", zone: 7, onV: 2, stat: \"sontay116\", tRObj: \"htg-west.dat.tRZ7\" },\n    { cmd: \"megabas 4 dacwr 2 \", zone: 8, onV: 2, stat: \"sontay117\", tRObj: \"htg-west.dat.tRZ8\" },\n    { cmd: \"megabas 4 dacwr 4 \", zone: 9, onV: 2, stat: \"sontay113\", tRObj: \"htg-west.dat.tRZ9\" }\n]\n\n\n// 112 / 113 ?\n// Fans in 110, 115,117,118\n\nflow.set(\"zones\", zones);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "9f89133fc6501838",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "var zones = [\n    { cmd: \"megabas 2 dacwr 1 \", zone: 1, onV: 2, stat: \"sontay118\", tRObj: \"htg-west.dat.tRZ1\", fancmds: [\"megabas 4 dacwr 3 \"] },\n    { cmd: \"megabas 2 dacwr 2 \", zone: 2, onV: 2, stat: \"sontay112\", tRObj: \"htg-west.dat.tRZ2\" },\n    { cmd: \"megabas 2 dacwr 3 \", zone: 3, onV: 2, stat: \"sontay111\", tRObj: \"htg-west.dat.tRZ3\" },\n    { cmd: \"megabas 0 dacwr 4 \", zone: 4, onV: 2, stat: \"sontay110\", tRObj: \"htg-west.dat.tRZ4\", fancmds: [\"megabas 0 dacwr 2 \", \"megabas 0 dacwr 3 \"] },\n    { cmd: \"megabas 1 dacwr 2 \", zone: 5, onV: 2, stat: \"sontay114\", tRObj: \"htg-west.dat.tRZ5\" },\n    { cmd: \"megabas 2 dacwr 4 \", zone: 6, onV: 2, stat: \"sontay115\", tRObj: \"htg-west.dat.tRZ6\" },\n    { cmd: \"megabas 1 dacwr 4 \", zone: 7, onV: 2, stat: \"sontay116\", tRObj: \"htg-west.dat.tRZ7\", fancmds: [\"megabas 1 dacwr 3 \"] },\n    { cmd: \"megabas 4 dacwr 2 \", zone: 8, onV: 2, stat: \"sontay117\", tRObj: \"htg-west.dat.tRZ8\", fancmds: [\"megabas 4 dacwr 1 \"] },\n    { cmd: \"megabas 4 dacwr 4 \", zone: 9, onV: 2, stat: \"sontay113\", tRObj: \"htg-west.dat.tRZ9\" }\n]\n\n\n// 112 / 113 ?\n// Fans in 110, 115,117,118\n\nflow.set(\"zones\", zones);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6e28790b8ca00980",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "15",
        "topic": "",
        "payload": "23",
        "payloadType": "num",
        "x": 150,
        "y": 1460,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "fce2bb252bf63f6e",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 15 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "20",
        "payloadType": "str",
        "x": 150,
        "y": 1520,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "673a5e1052e35e70",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 16 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "18",
        "payloadType": "str",
        "x": 150,
        "y": 1560,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "b92302ca59e467fa",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "15",
        "payloadType": "str",
        "x": 150,
        "y": 1600,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "334a92f8e683c7a7",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "17",
        "payloadType": "str",
        "x": 150,
        "y": 1660,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "e6561138e28f2151",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "19",
        "payloadType": "str",
        "x": 150,
        "y": 1720,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "40dbe263c7d9d2bd",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 07 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "21",
        "payloadType": "str",
        "x": 150,
        "y": 1840,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "a011d261574f736f",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 08 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "21.5",
        "payloadType": "str",
        "x": 150,
        "y": 1880,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "b3e18ba38998e7d9",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0)\n}\nvar avgd = totd / zones.length;\nflow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = zones[zone].onTime || 5000   // 30s starting cycle time in milliseconds.\n\n\n    if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n    \n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n    \n    \n    var setVme;  // set voltage\n    if (parseFloat(zones[zone].state || 0) > 0) {\n    //if (parseFloat(zones[zone].setV || 0) > 0) {    // already open = closing = take return reading and calculate off time.\n\n        zones[zone].state = 0;\n\n        //setVme = 0; \n        // new - for constant flow\n        setVme = zones[zone].offV || 0;\n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n        zones[zone].lastOff = timin; \n        zones[zone].nextTime = timin + zones[zone].gap;\n\n    }\n    else {   // on pulse\n\n        zones[zone].state = 1;\n\n        zones[zone].errT = zones[zone].tRoom - zones[zone].tSetRoom;\n\n        var integ = 1000;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 300000) { zones[zone].gapI = 300000; }  // max off time in milliseconds\n        if (zones[zone].gapI < -500000) { zones[zone].gapI = -500000; }  // max off time in milliseconds\n\n        var prop = 50;\n        if (zones[zone].errT<0) { prop = prop *2;} // faster when heating.\n\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n\n\n\n        var diff = 8;\n        var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n        var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].gapD = tDiffr * diff;\n        if (zones[zone].gapD > 300000) { zones[zone].gapD = 300000; }  // max diff\n        else if (zones[zone].gapD < -300000) { zones[zone].gapD = -300000; }  // max diff\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0) + (zones[zone].gapD || 0) + (3 * (avgd || 0));\n\n        //\n        if (zones[zone].errT > 1) { // off but not zero, when room too hot.\n            zones[zone].onV = 0.00;\n            zones[zone].offV = 0.0; \n            zones[zone].gap = 300000;\n        } \n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 120000)\n            zones[zone].gap = 60000;\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0.0, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n            zones[zone].gap = 300000;\n        }\n        else { zones[zone].onV = 2; }\n\n\n\n        if (zones[zone].onV > 4) {\n            zones[zone].onTime = zones[zone].onTime + 250;\n        } \n        if (zones[zone].onV > 5) {\n            zones[zone].offV = (zones[zone].offV || 0) + 0.025;\n        }\n\n        if (zones[zone].onTime > 20000) { zones[zone].onTime = 20000; }\n        if (zones[zone].offV > 1.2) { zones[zone].offV = 1.2; }\n\n        if (zones[zone].onV > 7) { \n            zones[zone].onV = 7; \n        } // max onV\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        if (zones[zone].gap > 300000) { zones[zone].gap = 300000; }  // max off time in milliseconds\n\n\n        if (zones[zone].onV < ((zones[zone].offV||0) + 0.2)) {\n            zones[zone].offV = Math.max(0, zones[zone].offV - 0.01);  // wind down slow..\n        } \n\n        setVme = parseFloat(zones[zone].onV); \n        zones[zone].tR = zones[zone].tR || 30;    \n\n        zones[zone].lastOn = timin; \n        zones[zone].nextTime = timin + zones[zone].onTime; // FIXED 3s on pulse for starters......\n\n    }\n\n    // temporary\n    //if (zones[zone].zone == 9) { setVme = 0; } \n    //else { setVme = 0; }\n\n\n    setVme = parseInt(setVme*100)/100;\n    \n//setVme = 0;\n    //if (zones[zone].setV !== setVme) {   // send if change to voltage.\n\n    \n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout==\"\"?\"\":\" && \") + zones[zone].cmd + zones[zone].setV;\n\n    if (zones[zone].fancmds && zones[zone].state == 1) {\n        for (var fan in zones[zone].fancmds) {\n            cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].fancmds[fan] + Math.max(2.0, zones[zone].setV);\n        }\n    }\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n   // }\n\n    \n    \n    \n    \n}\n\nif (cmdsout !== \"\" ) {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 780,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "37403ab2bd6a837d",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID x",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0)\n}\nvar avgd = totd / zones.length;\nflow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = zones[zone].onTime || 5000   // 30s starting cycle time in milliseconds.\n\n\n    if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n    \n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n    \n    \n    var setVme;  // set voltage\n    if (parseFloat(zones[zone].state || 0) > 0) {\n    //if (parseFloat(zones[zone].setV || 0) > 0) {    // already open = closing = take return reading and calculate off time.\n\n        zones[zone].state = 0;\n\n        //setVme = 0; \n        // new - for constant flow\n        setVme = zones[zone].offV || 0;\n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n        zones[zone].lastOff = timin; \n        zones[zone].nextTime = timin + zones[zone].gap;\n\n    }\n    else {   // on pulse\n\n        zones[zone].state = 1;\n\n        zones[zone].errT = zones[zone].tRoom - zones[zone].tSetRoom;\n\n        var integ = 1000;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 300000) { zones[zone].gapI = 300000; }  // max off time in milliseconds\n        if (zones[zone].gapI < -500000) { zones[zone].gapI = -500000; }  // max off time in milliseconds\n\n        var prop = 50;\n        if (zones[zone].errT<0) { prop = prop *2;} // faster when heating.\n\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n\n\n\n        var diff = 8;\n        var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n        var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].gapD = tDiffr * diff;\n        if (zones[zone].gapD > 300000) { zones[zone].gapD = 300000; }  // max diff\n        else if (zones[zone].gapD < -300000) { zones[zone].gapD = -300000; }  // max diff\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0) + (zones[zone].gapD || 0) + (3 * (avgd || 0));\n\n        //\n        if (zones[zone].errT > 1) { // off but not zero, when room too hot.\n            zones[zone].onV = 0.00;\n            zones[zone].offV = 0.0; \n            zones[zone].gap = 300000;\n        } \n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 120000)\n            zones[zone].offV = zones[zone].onV - 1.5;\n            zones[zone].gap = Math.max(30000, zones[zone].gap);\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0.0, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n            zones[zone].gap = 300000;\n            zones[zone].offV = 0;\n        }\n        else { zones[zone].onV = 2; }\n\n\n\n        if (zones[zone].onV > 4) {\n            zones[zone].onTime = zones[zone].onTime + 250;\n        } \n        // if (zones[zone].onV > 5) {\n        //     zones[zone].offV = (zones[zone].offV || 0) + 0.025;\n        // }\n        // if (zones[zone].onV > 2) {  // testing more aggressive offV\n        //     zones[zone].offV = zones[zone].onV - 1.5;\n        // } else {\n        //     zones[zone].offV = 0;\n        // }\n\n\n        if (zones[zone].onTime > 30000) { zones[zone].onTime = 30000; }\n        if (zones[zone].offV > 2.5) { zones[zone].offV = 2.5; }\n\n        if (zones[zone].onV > 7) { \n            zones[zone].onV = 7; \n        } // max onV\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        if (zones[zone].gap > 300000) { zones[zone].gap = 300000; }  // max off time in milliseconds\n\n\n        if (zones[zone].onV < ((zones[zone].offV||0) + 0.2)) {\n            zones[zone].offV = Math.max(0, zones[zone].offV - 0.01);  // wind down slow..\n        } \n\n        setVme = parseFloat(zones[zone].onV); \n        zones[zone].tR = zones[zone].tR || 30;    \n\n        zones[zone].lastOn = timin; \n        zones[zone].nextTime = timin + zones[zone].onTime; // FIXED 3s on pulse for starters......\n\n    }\n\n    // temporary\n    //if (zones[zone].zone == 9) { setVme = 0; } \n    //else { setVme = 0; }\n\n\n    setVme = parseInt(setVme*100)/100;\n    \n//setVme = 0;\n    //if (zones[zone].setV !== setVme) {   // send if change to voltage.\n\n    \n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout==\"\"?\"\":\" && \") + zones[zone].cmd + zones[zone].setV;\n\n    if (zones[zone].fancmds && zones[zone].state == 1) {\n        for (var fan in zones[zone].fancmds) {\n            cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].fancmds[fan] + Math.max(2.0, zones[zone].setV);\n        }\n    }\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n   // }\n\n    \n    \n    \n    \n}\n\nif (cmdsout !== \"\" ) {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "781c53f6b1804ff8",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "20.5",
        "payloadType": "str",
        "x": 150,
        "y": 1800,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "e95df9d7de505ca0",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 06 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "20",
        "payloadType": "str",
        "x": 150,
        "y": 1760,
        "wires": [
            [
                "41cfd40608526132"
            ]
        ]
    },
    {
        "id": "5028651c75e803f3",
        "type": "mqtt in",
        "z": "9e8d0666443296bf",
        "name": "",
        "topic": "local/+/ZRI10837029496A8804/dat/tF",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c09cc9186ceab33f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1180,
        "wires": [
            [
                "af3ac112069289f5"
            ]
        ]
    },
    {
        "id": "5a846c5439361a3f",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "tF",
        "func": "flow.set(\"tF\", parseFloat(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1180,
        "wires": [
            [
                "be9cd87db530f82b"
            ]
        ]
    },
    {
        "id": "be9cd87db530f82b",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 84",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 1180,
        "wires": []
    },
    {
        "id": "50dfb838f068c9c3",
        "type": "delay",
        "z": "9e8d0666443296bf",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 700,
        "y": 1180,
        "wires": [
            [
                "5a846c5439361a3f"
            ]
        ]
    },
    {
        "id": "af3ac112069289f5",
        "type": "rbe",
        "z": "9e8d0666443296bf",
        "name": "",
        "func": "deadband",
        "gap": "1",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 560,
        "y": 1180,
        "wires": [
            [
                "50dfb838f068c9c3"
            ]
        ]
    },
    {
        "id": "882d55273c8d2be8",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0)\n}\nvar avgd = totd / zones.length;\nflow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = zones[zone].onTime || 5000   // 30s starting cycle time in milliseconds.\n\n\n    if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n\n    // pre-heat from 6-9am\n    var td = new Date();\n    var minuteOfDay = (60 * td.getHours()) + td.getMinutes();\n    var tDefault = 21.5;\n\n    zones[zone].tSetRoom = tDefault;\n    if (minuteOfDay < 360) {\n\n        zones[zone].tSetRoom = 15;\n\n    } else if (minuteOfDay > 360 && minuteOfDay < 540) {\n\n        if (zones[zone].tRoom < tDefault) {\n            zones[zone].tSetRoom = (tDefault + zones[zone].tRoom) / 2;\n        }\n\n    } else if (minuteOfDay > 900 && minuteOfDay < 1020) {\n\n        zones[zone].tSetRoom = (tDefault - 1);\n\n    } else if (minuteOfDay > 1020) {\n\n        zones[zone].tSetRoom = 15;\n    } \n\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000*60*60*24 * 3)) {\n        \n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000*60*60*24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    var setVme;  // set voltage\n    if (parseFloat(zones[zone].state || 0) > 0) {\n        //if (parseFloat(zones[zone].setV || 0) > 0) {    // already open = closing = take return reading and calculate off time.\n\n        zones[zone].state = 0;\n\n        //setVme = 0; \n        // new - for constant flow\n        setVme = zones[zone].offV || 0;\n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n        zones[zone].lastOff = timin;\n        zones[zone].nextTime = timin + zones[zone].gap;\n\n    }\n    else {   // on pulse\n\n        zones[zone].state = 1;\n\n        zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom ;\n\n        var integ = 1000;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 300000) { zones[zone].gapI = 300000; }  // max off time in milliseconds\n        if (zones[zone].gapI < -500000) { zones[zone].gapI = -500000; }  // max off time in milliseconds\n\n        var prop = 50;\n        if (zones[zone].errT < 0) { prop = prop * 2; } // faster when heating.\n\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n\n\n\n        var diff = 8;\n        var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n        var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].gapD = tDiffr * diff;\n        if (zones[zone].gapD > 300000) { zones[zone].gapD = 300000; }  // max diff\n        else if (zones[zone].gapD < -300000) { zones[zone].gapD = -300000; }  // max diff\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0) + (zones[zone].gapD || 0) + (3 * (avgd || 0));\n\n        //\n        if (zones[zone].errT > 1) { // off but not zero, when room too hot.\n            zones[zone].onV = 0.00;\n            zones[zone].offV = 0.0;\n            zones[zone].gap = 300000;\n        }\n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 120000)\n            zones[zone].offV = Math.max(0, zones[zone].onV - 4);\n            zones[zone].gap = Math.max(30000, zones[zone].gap);\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0.0, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n            zones[zone].gap = 300000;\n            zones[zone].offV = 0;\n        }\n        else { zones[zone].onV = 2; }\n\n\n\n        // Flow Temperature Adjustments\n        var tF = flow.get(\"tF\") || 60;\n        zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n\n        if (zones[zone].onV > 4) {\n            zones[zone].onTime = zones[zone].onTime + 250;\n        }\n        // if (zones[zone].onV > 5) {\n        //     zones[zone].offV = (zones[zone].offV || 0) + 0.025;\n        // }\n        // if (zones[zone].onV > 2) {  // testing more aggressive offV\n        //     zones[zone].offV = zones[zone].onV - 1.5;\n        // } else {\n        //     zones[zone].offV = 0;\n        // }\n\n        // testing with fixed limit of 30C\n        // adds both a delay of up to 125s, and voltage reduction, over 5C span (to zero)\n        zones[zone].rtnLimitDelay = 0;\n        if (zones[zone].tR > 30) {\n\n            zones[zone].rtnLimitDelay = Math.max(0, Math.min(125, 5 * (zones[zone].tR - 30)));\n\n            var af = Math.max(5, zones[zone].tR - 30.0) / 5;\n            zones[zone].onV = zones[zone].onV * (1 - af);\n        }\n\n\n        if (zones[zone].onTime > 30000) { zones[zone].onTime = 30000; }\n        if (zones[zone].offV > 2.5) { zones[zone].offV = 2.5; }\n\n        if (zones[zone].onV > 7) {\n            zones[zone].onV = 7;\n        } // max onV\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        if (zones[zone].gap > 400000) { zones[zone].gap = 400000; }  // max off time in milliseconds\n\n\n        if (zones[zone].onV < ((zones[zone].offV || 0) + 0.2)) {\n            zones[zone].offV = Math.max(0, zones[zone].offV - 0.01);  // wind down slow..\n        }\n\n        setVme = parseFloat(zones[zone].onV);\n        zones[zone].tR = zones[zone].tR || 30;\n\n        zones[zone].lastOn = timin;\n        zones[zone].nextTime = timin + parseInt(zones[zone].tFAdjust * zones[zone].onTime)  + (1000 * zones[zone].rtnLimitDelay); // FIXED 3s on pulse for starters......\n\n    }\n\n    // temporary\n    //if (zones[zone].zone == 9) { setVme = 0; } \n    //else { setVme = 0; }\n\n\n    setVme = parseInt(setVme * 100) / 100;\n\n    //setVme = 0;\n    //if (zones[zone].setV !== setVme) {   // send if change to voltage.\n\n\n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].cmd + zones[zone].setV;\n\n    if (zones[zone].fancmds && zones[zone].state == 1) {\n        for (var fan in zones[zone].fancmds) {\n            cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].fancmds[fan] + Math.max(2.0, Math.min(0.1,zones[zone].setV));\n        }\n    }\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n    // }\n\n\n\n\n\n}\n\nif (cmdsout !== \"\") {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 700,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "607fdbb6f26b42ed",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "Occupy All",
        "func": "\n\nvar zones = flow.get(\"zones\");\n\n\nfor (var zone in zones) {\n\n    zones[zone].lastOccupied = 1 * msg.payload;    \n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3f5b21518c24b021",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "607fdbb6f26b42ed"
            ]
        ]
    },
    {
        "id": "2eb48544682316c2",
        "type": "switch",
        "z": "9e8d0666443296bf",
        "name": "",
        "property": "runMode",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "callibrate",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 240,
        "wires": [
            [
                "457fbdc98d7382fd"
            ],
            []
        ]
    },
    {
        "id": "e4b347ebabfa29a9",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 930,
        "y": 60,
        "wires": [
            [
                "8ec7ba8b02eef1a4"
            ]
        ]
    },
    {
        "id": "8ec7ba8b02eef1a4",
        "type": "change",
        "z": "9e8d0666443296bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "runMode",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a93b686e2fb94ddb",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "callibrate",
        "payloadType": "str",
        "x": 940,
        "y": 100,
        "wires": [
            [
                "8ec7ba8b02eef1a4"
            ]
        ]
    },
    {
        "id": "bf5b87bd6ff250cd",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "CALLIBRATE",
        "func": "//var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    var setVme;\n    \n    if (parseInt(msg.zone) == parseInt(zones[zone].zone)) { \n        \n        setVme = parseInt(msg.payload * 100) / 100;\n        \n    }  else {\n\n        setVme = 0;\n    }\n    \n    ///if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n\n    \n\n    //setVme = 0;\n    if (setVme < 0) {  setVme = 0; } \n\n    if (zones[zone].setV > 0) {\n        zones[zone][(\"fH_\" + zones[zone].setV).replace(\".\",\"_\")] = flow.get(\"fNet\");  // log flow rates \n    }    \n\n    zones[zone].setV = setVme;\n    \n    cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].cmd + setVme;\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n    // }\n\n\n\n\n\n}\n\nif (cmdsout !== \"\") {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "e2ac687664306bed",
                "0a2e9b2dfa473e49"
            ],
            [
                "a18f60048827448d",
                "6fa3d64ea6869007"
            ]
        ]
    },
    {
        "id": "d39a55d46a01679d",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "9",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 940,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "e2ac687664306bed",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 540,
        "wires": []
    },
    {
        "id": "46ef2d8175b7a32e",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "",
        "op2": "10",
        "op1type": "nul",
        "op2type": "num",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 400,
        "y": 580,
        "wires": [
            [
                "bf5b87bd6ff250cd",
                "628a04daea845f4f"
            ]
        ]
    },
    {
        "id": "0a2e9b2dfa473e49",
        "type": "exec",
        "z": "9e8d0666443296bf",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 910,
        "y": 580,
        "wires": [
            [],
            [],
            [
                "50041fc0c39b983a"
            ]
        ]
    },
    {
        "id": "a18f60048827448d",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 875,
        "y": 640,
        "wires": []
    },
    {
        "id": "6fa3d64ea6869007",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 680,
        "wires": []
    },
    {
        "id": "800a840554db6b51",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 60,
        "wires": [
            [
                "8f954b15b17c7c2c"
            ]
        ]
    },
    {
        "id": "8f954b15b17c7c2c",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "callibrations",
        "func": "var zones =  flow.get(\"zones\");\n\nzones[0].f5 = 4;\n\nflow.set(\"zones\", zones);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7c72cbda9b811129",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "4",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "ca18c61abc7d73f1",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "3",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "66ec060cbc14a3b5",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "2",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "cff4ef58de73d183",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "1",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 620,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "0b8dcee56cf5e2bb",
        "type": "link in",
        "z": "9e8d0666443296bf",
        "name": "link in 10",
        "links": [
            "50041fc0c39b983a",
            "a34edbdfc9e98868",
            "a0f3e8c8740d4e88"
        ],
        "x": 705,
        "y": 340,
        "wires": [
            [
                "8a937023c3a91e76"
            ]
        ]
    },
    {
        "id": "50041fc0c39b983a",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "0b8dcee56cf5e2bb"
        ],
        "x": 1015,
        "y": 600,
        "wires": []
    },
    {
        "id": "3a1b82f438fb3e11",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "120",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 720,
        "wires": [
            [
                "bf5b87bd6ff250cd",
                "17899ccbc3306422"
            ]
        ]
    },
    {
        "id": "17899ccbc3306422",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "num",
        "duration": "120",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 800,
        "wires": [
            [
                "bf5b87bd6ff250cd",
                "1fbcf8084e6b994e"
            ]
        ]
    },
    {
        "id": "9d4d4859b8b7815f",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "8",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 900,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "63581b0ccaf4ab7e",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "7",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 860,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "39c583f601df9d37",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "6",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "b44049f4fe045afe",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "5",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 780,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "4c828585608a1dcd",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z10",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "10",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 169,
        "y": 987,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "e16aebd31b5e61f2",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "z11",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "zone",
                "v": "11",
                "vt": "num"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "971c142445d3e6bd",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "next",
        "func": "flow.set(\"runMode\", \"callibrating\");\n\nmsg.zone = parseInt(msg.zone||0) + 1;\n\nif (msg.zone > 11) {\n\n    flow.set(\"runMode\",\"on\");\n    return null;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 540,
        "wires": [
            [
                "46ef2d8175b7a32e"
            ]
        ]
    },
    {
        "id": "43d186d9271d6f9a",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "971c142445d3e6bd"
            ]
        ]
    },
    {
        "id": "1fbcf8084e6b994e",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "num",
        "duration": "60",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 880,
        "wires": [
            [
                "971c142445d3e6bd"
            ]
        ]
    },
    {
        "id": "628a04daea845f4f",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "",
        "op2": "2",
        "op1type": "nul",
        "op2type": "num",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 660,
        "wires": [
            [
                "3a1b82f438fb3e11",
                "bf5b87bd6ff250cd"
            ]
        ]
    },
    {
        "id": "28dabd23d30d7279",
        "type": "mqtt in",
        "z": "9e8d0666443296bf",
        "name": "",
        "topic": "local/+/ZRI10837029496A8804/dat/fH",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "c09cc9186ceab33f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "fdb441b0e9bea2c9"
            ]
        ]
    },
    {
        "id": "fdb441b0e9bea2c9",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "fNet",
        "func": "flow.set(\"fNet\", parseFloat(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1260,
        "wires": [
            [
                "5f69397e6bde1588"
            ]
        ]
    },
    {
        "id": "5f69397e6bde1588",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 89",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 1260,
        "wires": []
    },
    {
        "id": "881a97b7d74368ab",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "SEAT ALL",
        "func": "//var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    if (i !== 5) { continue; }\n\n    var setVme;\n    \n    //if (parseInt(msg.zone) == parseInt(zones[zone].zone)) { \n        \n        setVme = parseInt(msg.payload * 100) / 100;\n        \n    //}  else {\n\n        //setVme = 0;\n    //}\n    \n    ///if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n\n    \n\n    //setVme = 0;\n    if (setVme < 0) {  setVme = 0; } \n\n    // if (zones[zone].setV > 0) {\n    //     zones[zone][(\"fH_\" + zones[zone].setV).replace(\".\",\"_\")] = flow.get(\"fNet\");  // log flow rates \n    // }    \n\n    // zones[zone].setV = setVme;\n    \n    cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].cmd + setVme;\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n    // }\n\n\n\n\n\n}\n\nif (cmdsout !== \"\") {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\n// flow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 880,
        "wires": [
            [
                "1ddc88c027f105af",
                "733eb11858fa7711"
            ],
            [
                "aa267381c133a02f",
                "af010cad0e0f2462"
            ]
        ]
    },
    {
        "id": "fdcd2479a419ea1e",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "10",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "4",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 880,
        "wires": [
            [
                "881a97b7d74368ab"
            ]
        ]
    },
    {
        "id": "1ddc88c027f105af",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 90",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "733eb11858fa7711",
        "type": "exec",
        "z": "9e8d0666443296bf",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1210,
        "y": 880,
        "wires": [
            [],
            [],
            [
                "a34edbdfc9e98868"
            ]
        ]
    },
    {
        "id": "aa267381c133a02f",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "d": true,
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1175,
        "y": 940,
        "wires": []
    },
    {
        "id": "af010cad0e0f2462",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 980,
        "wires": []
    },
    {
        "id": "a34edbdfc9e98868",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "d": true,
        "name": "link out 6",
        "mode": "link",
        "links": [
            "0b8dcee56cf5e2bb"
        ],
        "x": 1315,
        "y": 900,
        "wires": []
    },
    {
        "id": "78aa848e1f8bdd72",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 670,
        "y": 880,
        "wires": [
            [
                "fdcd2479a419ea1e"
            ]
        ]
    },
    {
        "id": "74750a9acb56dfe0",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "10",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 630,
        "y": 1720,
        "wires": [
            [
                "5a4261a62b4938e5"
            ]
        ]
    },
    {
        "id": "184a4e0148128787",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 490,
        "y": 1720,
        "wires": [
            [
                "74750a9acb56dfe0"
            ]
        ]
    },
    {
        "id": "5a4261a62b4938e5",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "SEAT 8",
        "func": "//var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    if (i != 2) { continue; }\n\n    var setVme;\n    \n    //if (parseInt(msg.zone) == parseInt(zones[zone].zone)) { \n        \n        setVme = parseInt(msg.payload * 100) / 100;\n        \n    //}  else {\n\n        //setVme = 0;\n    //}\n    \n    ///if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n\n    \n\n    //setVme = 0;\n    if (setVme < 0) {  setVme = 0; } \n\n    // if (zones[zone].setV > 0) {\n    //     zones[zone][(\"fH_\" + zones[zone].setV).replace(\".\",\"_\")] = flow.get(\"fNet\");  // log flow rates \n    // }    \n\n    // zones[zone].setV = setVme;\n    \n    cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].cmd + setVme;\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n    // }\n\n\n\n\n\n}\n\nif (cmdsout !== \"\") {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\n// flow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1720,
        "wires": [
            [
                "2df10275171584d2",
                "74e2823279378176"
            ],
            [
                "d23bba1bee66b785",
                "61301686a01aab90"
            ]
        ]
    },
    {
        "id": "2df10275171584d2",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 92",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1680,
        "wires": []
    },
    {
        "id": "74e2823279378176",
        "type": "exec",
        "z": "9e8d0666443296bf",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1030,
        "y": 1720,
        "wires": [
            [],
            [],
            [
                "a0f3e8c8740d4e88"
            ]
        ]
    },
    {
        "id": "d23bba1bee66b785",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "d": true,
        "name": "",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 995,
        "y": 1780,
        "wires": []
    },
    {
        "id": "61301686a01aab90",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 93",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1820,
        "wires": []
    },
    {
        "id": "a0f3e8c8740d4e88",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "d": true,
        "name": "link out 7",
        "mode": "link",
        "links": [
            "0b8dcee56cf5e2bb"
        ],
        "x": 1135,
        "y": 1740,
        "wires": []
    },
    {
        "id": "ee6cd21b3d552251",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 630,
        "y": 940,
        "wires": [
            [
                "d7cdea274a1405a1"
            ]
        ]
    },
    {
        "id": "d7cdea274a1405a1",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "10",
        "op2": "1",
        "op1type": "num",
        "op2type": "num",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 770,
        "y": 940,
        "wires": [
            [
                "881a97b7d74368ab"
            ],
            [
                "e96263c8ba0b233e"
            ]
        ]
    },
    {
        "id": "e96263c8ba0b233e",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "0.5",
        "op2": "",
        "op1type": "num",
        "op2type": "payl",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 800,
        "y": 980,
        "wires": [
            [
                "881a97b7d74368ab"
            ],
            [
                "cc7367ba97cca95a"
            ]
        ]
    },
    {
        "id": "cc7367ba97cca95a",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "0.2",
        "op2": "",
        "op1type": "num",
        "op2type": "payl",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 800,
        "y": 1020,
        "wires": [
            [
                "881a97b7d74368ab"
            ],
            [
                "c5823a852b77037e"
            ]
        ]
    },
    {
        "id": "c5823a852b77037e",
        "type": "trigger",
        "z": "9e8d0666443296bf",
        "name": "",
        "op1": "0",
        "op2": "",
        "op1type": "num",
        "op2type": "payl",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 800,
        "y": 1060,
        "wires": [
            [
                "881a97b7d74368ab"
            ],
            []
        ]
    },
    {
        "id": "3ca15f8c93ebf4ac",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID",
        "func": "var timin = 1 * msg.payload;\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    }\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\nflow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    if (i==4) { continue; }\n\n    zones[zone].nextTime = zones[zone].nextTime || (timin + (i * 2000));\n    zones[zone].gapI = zones[zone].gapI || 60000   // 30s starting cycle time in milliseconds.\n    zones[zone].gap = zones[zone].gap || 60000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = zones[zone].onTime || 5000   // 30s starting cycle time in milliseconds.\n\n    zones[zone].onTime = 5000;  // for now\n    \n\n    if (timin < zones[zone].nextTime) { continue; }  // skip until time to act.\n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n\n    // pre-heat from 6-9am\n    var td = new Date();\n    var minuteOfDay = (60 * td.getHours()) + td.getMinutes();\n    var tDefault = 24; //21.5;\n\n    zones[zone].tSetRoom = tDefault;\n\n    // if (minuteOfDay > 420 && minuteOfDay < 430) {\n\n    //     zones[zone].gapI = 300000;\n    //     zones[zone].onTime = 5000;\n\n    // } // reset integral at start of heating.\n\n    if (minuteOfDay <= 360) {\n\n        //zones[zone].tSetRoom = 15;\n        zones[zone].tSetRoom = tDefault;\n\n    }\n    else if (minuteOfDay > 360 && minuteOfDay < 540) {\n\n        // ramp up \n\n        zones[zone].tSetRoom = (tDefault - 2) + (2 * (minuteOfDay - 360) / 180)\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n        // turn off between 8 and 9 am\n        // to allow startup to settle down \n\n        // if (zones[zone].tRoom < tDefault) {\n        //     zones[zone].tSetRoom = (tDefault + zones[zone].tRoom) / 2;\n        // }\n\n        // zones[zone].gapI = 300000;\n        // zones[zone].onTime = 5000;\n        // zones[zone].tSetRoom = 15;\n\n        // } else if (minuteOfDay > 900 && minuteOfDay <= 1020) {\n\n        //     zones[zone].tSetRoom = (tDefault - 1);\n\n    }\n    else if (minuteOfDay > 1020) {\n\n        //zones[zone].tSetRoom = 15;\n        zones[zone].tSetRoom = tDefault;\n    }\n\n\n    // on constant\n    zones[zone].tSetRoom = tDefault;\n\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    var setVme;  // set voltage\n    if (parseFloat(zones[zone].state || 0) > 0) {\n        //if (parseFloat(zones[zone].setV || 0) > 0) {    // already open = closing = take return reading and calculate off time.\n\n        zones[zone].state = 0;\n\n        //setVme = 0; \n        // new - for constant flow\n        setVme = zones[zone].offV || 0;\n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || zones[zone].tR || 30;\n\n        zones[zone].lastOff = timin;\n        zones[zone].nextTime = timin + zones[zone].gap;\n\n    }\n    else {   // on pulse\n\n        zones[zone].state = 1;\n\n        zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n\n        zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n        zones[zone].tRLast = zones[zone].tR;\n\n\n\n        var integ = 1000;\n        zones[zone].gapI = zones[zone].gapI + (zones[zone].errT * integ * (zones[zone].gap / 1000));\n        if (zones[zone].gapI > 500000) { zones[zone].gapI = 500000; }  // max off time in milliseconds\n        if (zones[zone].gapI < -300000) { zones[zone].gapI = -300000; }  // \n\n        var prop = 50;\n        //if (zones[zone].errT < 0) { prop = prop * 2; } // faster when heating.\n\n        zones[zone].gapP = zones[zone].errT * prop * 10000;\n        if (zones[zone].gapP > 500000) { zones[zone].gapP = 300000; }  // max prop\n        else if (zones[zone].gapP < -300000) { zones[zone].gapP = -300000; }  // min prop\n\n        var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n        var diff = 60;\n\n        // when not in fine control, react more to counter increasing temperatures\n        // ... easier to add than remove heat from rooms.\n        //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n        if (tDM > 0) { diff = 120; }\n        \n        //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n        var tDiffr = (10000000000 * tDM) / 60000;\n\n        //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].gapD = tDiffr * diff;\n        if (zones[zone].gapD > 300000) { zones[zone].gapD = 300000; }  // max diff\n        else if (zones[zone].gapD < -300000) { zones[zone].gapD = -300000; }  // max diff\n\n        zones[zone].gap = 0 + (zones[zone].gapI || 0) + (zones[zone].gapP || 0) + (zones[zone].gapD || 0) + (3 * (avgd || 0));\n\n        if (zones[zone].gap < -180000) { zones[zone].gap = -180000; }  // max gap = 4v\n        \n        if (zones[zone].errT > 1) { // off but not zero, when room too hot.\n            zones[zone].onV = 0.00;\n            zones[zone].offV = 0.0;\n            zones[zone].gap = 300000;\n        }\n        else if (zones[zone].gap < 60000) {\n            zones[zone].onV = 2 + ((60000 - zones[zone].gap) / 120000)\n            zones[zone].offV = Math.max(0, zones[zone].onV - 4);\n            zones[zone].gap = Math.max(30000, zones[zone].gap);\n\n        } else if (zones[zone].gap > 300000) {\n            zones[zone].onV = Math.max(0, 2 - ((zones[zone].gap - 300000) / 150000));\n            zones[zone].onV = parseInt(100 * zones[zone].onV) / 100;\n            zones[zone].gap = 300000;\n            zones[zone].offV = 0;\n        }\n        else { zones[zone].onV = 2; }\n\n\n        // Flow Temperature Adjustments\n        var tF = flow.get(\"tF\") || 60;\n        zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n        //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n        zones[zone].onTime = Math.max(1500, 5000 * zones[zone].tFAdjust) ;\n\n        if (zones[zone].onV > 4) {\n            //zones[zone].onTime = zones[zone].onTime + 250;\n        }\n\n\n\n        // if (zones[zone].onV > 5) {\n        //     zones[zone].offV = (zones[zone].offV || 0) + 0.025;\n        // }\n        // if (zones[zone].onV > 2) {  // testing more aggressive offV\n        //     zones[zone].offV = zones[zone].onV - 1.5;\n        // } else {\n        //     zones[zone].offV = 0;\n        // }\n\n        // testing with fixed limit of 30C\n        // adds both a delay of up to 125s, and voltage reduction, over 5C span (to zero)\n        zones[zone].rtnLimitDelay = 0;\n\n\n    if (zones[zone].tR > 99) { // temporary.\n\n        if (zones[zone].tR > 30) {\n\n            zones[zone].rtnLimitDelay = Math.max(0, Math.min(125, 5 * (zones[zone].tR - 30)));\n\n            var af = Math.max(5, zones[zone].tR - 30.0) / 5;\n            zones[zone].onV = zones[zone].onV * (1 - af);\n            zones[zone].offV = zones[zone].offV * (1 - af);\n        }\n\n        // if the hottest return, and rising, then good chance valve needs reseating...\n        if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) { \n            zones[zone].onV = 0.2;\n            zones[zone].offV = 0;\n            zones[zone].gap = 500000;\n            zones[zone].onTime = 2000;\n        }\n    }\n\n        if (zones[zone].onTime > 30000) { zones[zone].onTime = 30000; }\n        if (zones[zone].offV > 2.5) { zones[zone].offV = 2.5; }\n\n\n        // minimum movement to help seating. off below 0.2.\n        if (zones[zone].onV < 0.2) { zones[zone].onV = 0; }\n        \n        if (zones[zone].onV > 7) {\n            zones[zone].onV = 7;\n        } // max onV\n\n        if (zones[zone].gap < 10000) { zones[zone].gap = 10000; }  // minimum off time in milliseconds\n        if (zones[zone].gap > 500000) { zones[zone].gap = 500000; }  // max off time in milliseconds\n\n\n        if (zones[zone].onV < ((zones[zone].offV || 0) + 0.2)) {\n            zones[zone].offV = Math.max(0, zones[zone].offV - 0.01);  // wind down slow..\n        }\n\n        setVme = parseFloat(zones[zone].onV);\n        zones[zone].tR = zones[zone].tR || 30;\n\n        zones[zone].lastOn = timin;\n        zones[zone].nextTime = timin + zones[zone].onTime;\n\n    }\n\n    // temporary\n    //if (zones[zone].zone == 9) { setVme = 0; } \n    //else { setVme = 0; }\n\n\n    setVme = parseInt(setVme * 100) / 100;\n\n    //setVme = 0;\n    if (setVme < 0) {  setVme = 0; } \n\n\n    zones[zone].setV = setVme;\n    cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].cmd + zones[zone].setV;\n\n    if (zones[zone].fancmds && zones[zone].state == 1) {\n        for (var fan in zones[zone].fancmds) {\n            cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + zones[zone].fancmds[fan] + Math.max(2.0, Math.min(0.1, zones[zone].setV));\n        }\n    }\n\n    var msg2 = {};\n    msg2.topic = devicePrefix + \"-manifold/dat/setV\" + i;\n    // htg-east-manifold/dat/setV9\n    msg2.payload = setVme;\n\n    node.send([null, msg2]);\n\n    // }\n\n\n\n\n\n}\n\nif (cmdsout !== \"\") {\n\n    var msg1 = {};\n    msg1.topic = \"cmdsout\"\n    msg1.payload = cmdsout;\n\n    node.send([msg1, null]);\n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a84d53ac6da26fa2",
        "type": "mqtt in",
        "z": "9e8d0666443296bf",
        "name": "",
        "topic": "local/+/heatpump/dat/outdoorAmbientTemperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "98732c68fada9942",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "8189f3defb8d41d0"
            ]
        ]
    },
    {
        "id": "1b1de96ac5b50c71",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 96",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8189f3defb8d41d0",
        "type": "change",
        "z": "9e8d0666443296bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "oat",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1120,
        "wires": [
            [
                "1b1de96ac5b50c71"
            ]
        ]
    },
    {
        "id": "08cc1cba677e0523",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID Testing",
        "func": "\n\nvar td = new Date();\nvar minuteOfDay = (60 * td.getHours()) + td.getMinutes();\nvar timin = td.getTime();\n\nvar lasttimin = flow.get(\"timin\");\nflow.set(\"timin\",timin);\nif (!lasttimin) { return null; }\n\nvar periods = (timin - lasttimin) / 1000;  // seconds\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\nvar oat = flow.get(\"oat\") || 10;\nif (oat>100) { oat = 0; }\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    //if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        //zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n        zones[zone].tR = flow.get(\"tR.z\" + zones[zone].zone) || 30;\n    //}\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\n//flow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    zones[zone].index = zone;\n \n    zones[zone].pidI = zones[zone].pidI || 0   \n    zones[zone].pid = zones[zone].pid || 0  \n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n    // pre-heat from 6-9am\n    \n    var tDefault = 21.5;\n\n    zones[zone].tSetRoom = tDefault;\n\n  \n    if (minuteOfDay < 480) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 8) + (8 * (minuteOfDay) / 480);\n        zones[zone].tSetRoom = Math.max(16, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n\n    }\n    else if (minuteOfDay > 1080) {\n\n        zones[zone].tSetRoom = 16;\n        //zones[zone].tSetRoom = tDefault;\n    }\n\n    zones[zone].tSetRoom = tDefault; //21.5; // testing !!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    zones[zone].turndown = 0; // no occupancy turn down temporary.\n\n    var setVme;  // set voltage\n\n        //zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n        zones[zone].errT = zones[zone].tR + zones[zone].turndown - 35; //(zones[zone].tSetRoom+5);\n\n    \n\n        zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n        zones[zone].tRLast = zones[zone].tR;\n\n\n\n        var integ = 0.1;\n        zones[zone].pidI = zones[zone].pidI - (periods * zones[zone].errT * integ / 10000);\n\n        if (zones[zone].pidI > 0.5) { zones[zone].pidI = 0.5; }  // \n        if (zones[zone].pidI < 0) { zones[zone].pidI = 0; }  // \n\n        var prop = 2;\n        //if (zones[zone].errT > 1) { prop = prop * 1.5; } // bias when too hot.\n        if (zones[zone].errT > 2) { prop = prop * 2; } // force off when too hot.\n\n        zones[zone].pidP = (0-zones[zone].errT) * prop / 100;\n        if (zones[zone].pidP > 0.5) { zones[zone].pidP = 0.5; }  // max prop\n        else if (zones[zone].pidP < -0.5) { zones[zone].pidP = -0.5; }  // min prop\n\n        var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n        var diff = 30;\n        var stable = false;\n        if (Math.abs(tDM) < 0.01) { stable = true; }\n        if (Math.abs(zones[zone].errT) < 0.2 && stable) { diff = 10 }\n        \n        // when not in fine control, react more to counter increasing temperatures\n        // ... easier to add than remove heat from rooms.\n        //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n        //if (tDM > 0) { diff = 120; }\n\n        //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n        var tDiffr = (10000 * tDM) / 60;\n\n        //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].pidD = (0 - tDiffr) * diff / 1000;\n        if (zones[zone].pidD > 1) { zones[zone].pidD = 1; }  // max diff\n        else if (zones[zone].pidD < -1) { zones[zone].pidD = -1; }  // max diff\n\n        zones[zone].pidD = 0; // TEMP xxxxxxxxxxxxxxxxx\n\n        zones[zone].pid = 0 + (zones[zone].pidI || 0) + (zones[zone].pidP || 0) + (zones[zone].pidD || 0) \n        // + (3 * (avgd || 0) / 1000);\n\n        if (zones[zone].pid < 0) { zones[zone].pid = 0; }  \n\n        \n\n        // Flow Temperature Adjustments\n        var tF = flow.get(\"tF\") || 70;\n        zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n        //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n        zones[zone].pid = zones[zone].pid * zones[zone].tFAdjust;\n\n        if (zones[zone].pid > 1) { zones[zone].pid = 1; }  \n\n\n\n        // Return temperature limit.\n        // ! TODO vary return limit with outside air temperature and zone variable.\n\n            zones[zone].pidF = 1 *  zones[zone].pid;\n\n            if (zones[zone].tR > 35) {\n                \n                var af = (Math.min(45, zones[zone].tR) - 35.0) / 10;\n                zones[zone].pid = zones[zone].pid * (1 - (af/5));\n                zones[zone].pidI = zones[zone].pidI * (1 - (af/5));\n\n                \n            }\n\n            // if the hottest return, and rising, then good chance valve needs reseating...\n            zones[zone].state = \"ok\";\n            if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) {\n                // zones[zone].onV = 0.2;\n                // zones[zone].offV = 0;\n                // zones[zone].gap = 500000;\n                // zones[zone].onTime = 2000;\n                zones[zone].state = \"fault\";\n            }\n            \n            node.send([null, {\"topic\":devicePrefix + \"-manifold/alarm/zone\" + i, \"payload\":zones[zone].state }]);\n\n  \n    node.send([null, {\"topic\":devicePrefix + \"-manifold/dat/pid\" + i, \"payload\":zones[zone].pid }]);\n\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/tR\", \"payload\":zones[zone].tR }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/tSetRoom\", \"payload\":zones[zone].tSetRoom }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/tRoom\", \"payload\":zones[zone].tRoom }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/errT\", \"payload\":zones[zone].errT }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/onV\", \"payload\":zones[zone].onV }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pid\", \"payload\":zones[zone].pid }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pidP\", \"payload\":zones[zone].pidP }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pidI\", \"payload\":zones[zone].pidI }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pidD\", \"payload\":zones[zone].pidD }]);\n    \n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/stat/state\", \"payload\":zones[zone].state }]);\n \n \n    \n\n}\n\n\n\n\n// if (cmdsout !== \"\") {\n\n//     var msg1 = {};\n//     msg1.topic = \"cmdsout\"\n//     msg1.payload = cmdsout;\n\n//     node.send([msg1, null]);\n\n// }\n\nflow.set(\"zones\", zones);\n\nnode.send([{\"topic\": \"zones\" + i, \"payload\":zones }, null]);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "21159a7a3b46abbf",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "886f5b11e58a0ab2"
            ]
        ]
    },
    {
        "id": "8351691fd8328cdd",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 97",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 380,
        "wires": []
    },
    {
        "id": "67eb1a55cf49f58b",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 98",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 460,
        "wires": []
    },
    {
        "id": "51b3179403bdeb56",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "valve",
        "func": "var devicePrefix = \"htg-west\";\n\n//var myTimeouts = {};\nvar myTimeout;\nvar onTimeout;\n\nvar minV = 0.25;\nvar stepV = 0.25;\n\nvar onoffV = 0.5;\n\nvar steps = 1 + ((10 - minV - onoffV) / stepV);\nvar period = 60; // seconds\n\nvar z = msg.payload.zone;\nvar pid = msg.payload.pid;\n\n//pid = pid * (msg.zdata.pidMax || 1);\npid = pid * pid;\n\n//if (z == 1) { pid = pid * 2; }\n\n\nvar step = parseInt(pid * steps);\nvar highTime = parseInt(60000 * ((pid * steps) - parseInt(pid * steps))); // remainder \nvar startTime = parseInt((z / 13) * 50000);\n\n//var offV = (step < 1 ? 0 : minV + (stepV * (step-1)) );\n\n\nvar offV = (step < 1 ? onoffV : onoffV + minV + (stepV * (step - 1)));\nif (pid == 0) { offV = 0; }\n\nvar onV = (step < 1 ? minV + onoffV : offV + stepV); \n\nif (pid == 0) { onV = 0; offV = 0; }\n\nonV = Math.round((onV + Number.EPSILON) * 100) / 100; // parseInt(onV * 10) / 10;\noffV = Math.round((offV + Number.EPSILON) * 100) / 100; // parseInt(offV * 10) / 10;\n\n// if (z == 1) {\n\n//     if (onV > 3) { onV = 3; }\n//     if (offV > 3) { offV = 3; }\n\n// } else {\n\n//     if (onV > 5) { onV = 5; }\n//     if (offV > 5) { offV = 5; }\n\n// }\n\nmsg.zdata.onV = onV;\n\nonTimeout = setTimeout(sendhigh, startTime);\n\n\nreturn null;\n\nfunction sendlow() {\n\n\n\n    if (offV == 0 && onV > 0.2) {\n        // close in steps. \n        //node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": 0.2, \"zdata\": msg.zdata }]);\n        node.send([{ \"topic\": \"off\" + z, \"payload\": 0.2, \"zdata\": msg.zdata }, null]);\n\n        //node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": 0.1, \"zdata\": msg.zdata }]);\n        node.send([{ \"topic\": \"off\" + z, \"payload\": 0.1, \"zdata\": msg.zdata }, null]);\n    }\n\n    node.send([{ \"topic\": \"off\" + z, \"payload\": offV, \"zdata\": msg.zdata }, null]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": offV, \"zdata\": msg.zdata }]);\n\n    clearTimeout(myTimeout);\n}\n\nfunction sendhigh() {\n\n    node.send([{ \"topic\": \"on\" + z, \"payload\": onV, \"zdata\": msg.zdata }, null]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": onV, \"zdata\": msg.zdata }]);\n\n    myTimeout = setTimeout(sendlow, highTime);\n\n    clearTimeout(onTimeout);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            [
                "3baa643dca906453",
                "b0ae03461c446ddb"
            ],
            [
                "91d99c2f7d7423c2",
                "ddaaf7e8850dd659"
            ]
        ]
    },
    {
        "id": "3baa643dca906453",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 99",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 380,
        "wires": []
    },
    {
        "id": "d29f41ae618fc0b8",
        "type": "split",
        "z": "9e8d0666443296bf",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 420,
        "wires": [
            [
                "faaf878d90cd8086",
                "255e8532561f089a"
            ]
        ]
    },
    {
        "id": "faaf878d90cd8086",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 100",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 460,
        "wires": []
    },
    {
        "id": "b0ae03461c446ddb",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "Fans",
        "func": "var oat = flow.get(\"oat\") || 10;\nif (oat > 100) { oat = 0; }\n\nvar cmdsout=\"\";\n\ncmdsout += (cmdsout == \"\" ? \"\" : \" && \") + msg.zdata.cmd + msg.payload;\n\n\n\nif (msg.zdata.fancmds) {\n    for (var fan in msg.zdata.fancmds) {\n        // changed fan speed 21/11/23\n        var fv; // = parseFloat(msg.zdata.roomsettings.fanLow || 30) / 10; //10 * msg.zdata.pidF; //19 - oat; //zones[zone].setV - zones[zone].errT;\n        //fv = 7;\n\n        if (msg.zdata.pid == 0) { fv = 0; }\n        else {\n            fv = parseFloat(msg.zdata.roomsettings.fanLow || 30) / 10;\n            //fv = (msg.zdata.tSetUser || 0) / 10;  //  take fan speed from Sontay dial.\n            //fv = 10 * fv * fv;\n        }\n\n        if (fv < 0) { fv = 0; }\n        //if (fv < 0.25) { fv = 0.25; }\n        if (fv > 10) { fv = 10; }\n        fv = parseInt(fv * 100) / 100;\n\n        \n\n        cmdsout += (cmdsout == \"\" ? \"\" : \" && \") + msg.zdata.fancmds[fan] + fv;\n    }\n}\n\nmsg.payload = cmdsout;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "ea4cffca347f27b9"
            ]
        ]
    },
    {
        "id": "255e8532561f089a",
        "type": "change",
        "z": "9e8d0666443296bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "zdata",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 420,
        "wires": [
            [
                "51b3179403bdeb56"
            ]
        ]
    },
    {
        "id": "4c4504376ffb4c77",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 101",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 420,
        "wires": []
    },
    {
        "id": "869558e509c31ff4",
        "type": "exec",
        "z": "9e8d0666443296bf",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1370,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ea4cffca347f27b9",
        "type": "switch",
        "z": "9e8d0666443296bf",
        "name": "",
        "property": "zdata.zone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "4c4504376ffb4c77",
                "7d61671b9e31b57a"
            ]
        ]
    },
    {
        "id": "91d99c2f7d7423c2",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 102",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 480,
        "wires": []
    },
    {
        "id": "7d61671b9e31b57a",
        "type": "delay",
        "z": "9e8d0666443296bf",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "869558e509c31ff4"
            ]
        ]
    },
    {
        "id": "a67c37dcb5edc4fe",
        "type": "link in",
        "z": "9e8d0666443296bf",
        "name": "link in 11",
        "links": [
            "c38883d7ee46962a",
            "ddaaf7e8850dd659"
        ],
        "x": 865,
        "y": 320,
        "wires": [
            [
                "9164d260b485b994"
            ]
        ]
    },
    {
        "id": "c38883d7ee46962a",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "a67c37dcb5edc4fe"
        ],
        "x": 435,
        "y": 500,
        "wires": []
    },
    {
        "id": "ddaaf7e8850dd659",
        "type": "link out",
        "z": "9e8d0666443296bf",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "a67c37dcb5edc4fe"
        ],
        "x": 875,
        "y": 480,
        "wires": []
    },
    {
        "id": "42eade8639d5b776",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "cLEAR Int",
        "func": "\n\nvar zones = flow.get(\"zones\");\n\n\nfor (var zone in zones) {\n\n    zones[zone].pidI = 0;    \n\n}\n\nflow.set(\"zones\", zones);\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "797754171d03c5bb",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 760,
        "wires": [
            [
                "42eade8639d5b776"
            ]
        ]
    },
    {
        "id": "886f5b11e58a0ab2",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "West 6",
        "func": "\n\nvar td = new Date();\nvar minuteOfDay = (60 * td.getHours()) + td.getMinutes();\nvar timin = td.getTime();\n\nvar lasttimin = flow.get(\"timin\");\nflow.set(\"timin\", timin);\nif (!lasttimin) { return null; }\n\nvar periods = (timin - lasttimin) / 1000;  // seconds\n\nvar cmdsout = \"\";\n\nvar devicePrefix = flow.get(\"deviceid\") || \"htg-west\";\n\nvar zones = flow.get(\"zones\");\nvar oat = flow.get(\"oat\") || 10;\nif (oat > 100) { oat = 0; }\n\nvar usersettings = flow.get(\"usersettings\") || [];\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    //if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n    zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    //}\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\n//flow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    var roomsettings = {};\n    var room = (\"\" + zones[zone].stat).replace(\"sontay\", \"\");\n    for (var r in usersettings) {\n        if (usersettings[r].room == room) {\n            roomsettings = usersettings[r];\n            zones[zone].roomsettings = roomsettings; //usersettings[r];\n            break;\n        }\n    }\n\n    zones[zone].pidI = zones[zone].pidI || 0\n    zones[zone].pid = zones[zone].pid || 0\n\n    zones[zone].pidMax = zones[zone].pidMax || 1.0;\n    // zones[zone].pidHistory = zones[zone].pidHistory || [0, 0, 0, 0, 0];\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n    // pre-heat from 6-9am\n\n    var tDefault = parseFloat(roomsettings.tSetDefault || 21.5);\n    var tSetBack = parseFloat(roomsettings.tSetBack || 16);\n\n    zones[zone].tSetRoom = tDefault;\n\n    zones[zone].tSetUser = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.setpoint.value\") || 50);\n\n\n    if (minuteOfDay < 420) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 8) + (8 * (minuteOfDay) / 480);\n        zones[zone].tSetRoom = Math.max(tSetBack, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n    }\n    else if (minuteOfDay < 540) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 1) + (1 * (minuteOfDay - 420) / 120);\n        zones[zone].tSetRoom = Math.max(tSetBack, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n        // no ramp\n        //zones[zone].tSetRoom = tSetBack;\n\n    }\n    else if (minuteOfDay > 1080) {\n\n        zones[zone].tSetRoom = tSetBack;\n        //zones[zone].tSetRoom = tDefault;\n    }\n\n    if (roomsettings.runMode == \"off\") { zones[zone].tSetRoom = 5; }\n    else if (roomsettings.runMode == \"constant\") { zones[zone].tSetRoom = tDefault; }\n\n    //zones[zone].tSetRoom = tDefault; //21.5; // testing !!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    zones[zone].turndown = 0; // no occupancy turn down temporary.\n\n    var setVme;  // set voltage\n\n    var errTLast = 1 * (zones[zone].errT || 0);\n    zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n\n    zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n    zones[zone].tRLast = zones[zone].tR;\n\n\n    zones[zone].scalePID = zones[zone].scalePID || 1;\n    zones[zone].scaleD = zones[zone].scaleD || 1;\n\n\n    zones[zone][\"AvHistory\"] = null;\n    zones[zone][\"pidHistory\"] = null;\n    zones[zone].cycleHistory = zones[zone].cycleHistory || [];\n    zones[zone].errorHistory = zones[zone].errorHistory || [];\n    zones[zone].lastOut = zones[zone].lastOut || 0;\n\n    zones[zone].errorMax = zones[zone].errorMax || 0;\n    zones[zone].errorMin = zones[zone].errorMin || 0;\n    if (zones[zone].errT < zones[zone].errorMin) { zones[zone].errorMin = zones[zone].errT; }\n    if (zones[zone].errT > zones[zone].errorMax) { zones[zone].errorMax = zones[zone].errT; }\n\n\n    zones[zone].errorHistory.push(Math.abs(zones[zone].errT));\n    if (zones[zone].errorHistory.length > 300) {\n        zones[zone].errorHistory.shift();\n    }\n    zones[zone].errorAv = zones[zone].errorHistory.reduce((a, b) => a + b, 0) / zones[zone].errorHistory.length;\n    zones[zone].errorAvAbs = zones[zone].errorHistory.reduce((a, b) => Math.abs(a) + Math.abs(b), 0) / zones[zone].errorHistory.length;\n\n\n    if (Math.abs(zones[zone].errT) > 0.1) { zones[zone].lastOut = timin; }\n\n    if (errTLast > 0 && zones[zone].errT <= 0) {\n\n        zones[zone].cycleTime = (timin - (zones[zone].zeroTime || 0)) / 60000;\n        zones[zone].zeroTime = timin;\n\n        // PID tuning\n        zones[zone].cycleErrorHistory = zones[zone].cycleErrorHistory || [];\n\n        //zones[zone].cycleError = zones[zone].errorHistory.reduce((a, b) => Math.max(a, b), 0); //zones[zone].errorAvAbs;\n        zones[zone].cycleError = zones[zone].errorMax - zones[zone].errorMin;  // Aplitude\n        node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/cycleError\", \"payload\": zones[zone].cycleError }]);\n\n        zones[zone].errorMax = 0;   // reset\n        zones[zone].errorMin = 0;   // reset\n\n        zones[zone].cycleErrorHistory.push(zones[zone].cycleError)\n        zones[zone].errorHistory = [];\n\n        if ((timin - zones[zone].lastOut) < (1000 * 60 * 60)) {   // only tune if there is recent inaccuracy.\n\n            if (zones[zone].cycleErrorHistory.length > 2 && zones[zone].cycleErrorHistory.length % 2 == 0) {\n            \n                var deltaCycleError = zones[zone].cycleErrorHistory[zones[zone].cycleErrorHistory.length - 1] - zones[zone].cycleErrorHistory[zones[zone].cycleErrorHistory.length - 3];\n\n                zones[zone].tuneDirection = zones[zone].tuneDirection || 0;\n\n                // if error increasing, change direction\n                if (deltaCycleError > 0) {\n                    if (zones[zone].tuneDirection > 0) {\n                        zones[zone].tuneDirection = -1;\n                    } else {\n                        zones[zone].tuneDirection = 1;\n                    }\n                }\n\n                zones[zone].scalePID = zones[zone].scalePID + (zones[zone].tuneDirection * 0.005);\n            }\n\n\n\n            // if (zones[zone].cycleTime < 30 && zones[zone].cycleTime > 5) {   \n            //     zones[zone].scalePID = zones[zone].scalePID * 0.975;    \n\n            //     // if (zones[zone].pidD > 0.01) {\n            //     //     zones[zone].scaleD = zones[zone].scaleD + 0.05;\n            //     // }\n\n\n            // } \n            // else if (zones[zone].cycleTime < 300 && zones[zone].cycleTime > 30 ) {\n            //     zones[zone].scalePID = zones[zone].scalePID + 0.05;\n            // }\n\n            if (zones[zone].scalePID > 5) { zones[zone].scalePID = 5; }\n            else if (zones[zone].scalePID < 0.1) { zones[zone].scalePID = 0.1; }\n\n            // // if (zones[zone].scaleD > 10) { zones[zone].scaleD = 10; }\n            // // else if (zones[zone].scaleD < 0.8) { zones[zone].scaleD = 0.8; }\n\n        }\n\n        zones[zone].cycleHistory.push(zones[zone].cycleTime);\n        if (zones[zone].cycleHistory.length > 10) {\n            zones[zone].cycleHistory.shift();\n        }\n    }\n    if (timin - (zones[zone].zeroTime || 0) < (1000 * 60 * 60)) {\n        // has been at zero point within last hour\n\n    }\n\n\n    \n\n    var integ = 4 * zones[zone].scalePID;  // 18/02/24\n    //if (Math.abs(zones[zone].errT) < 0.5) { integ = Math.abs(zones[zone].errT) * 10; }\n    //if (zones[zone].errT < -3 ) { integ = 5 * integ; }   // 18/02/24  to allow faster startup.\n    if (zones[zone].tRoom < 15.8) { integ = integ * 3; }\n    \n    // dont integrate up if at limits\n    if (zones[zone].pid >= zones[zone].pidMax && zones[zone].errT < 0) { integ = 0; }\n\n    zones[zone].pidI = zones[zone].pidI - (periods * zones[zone].errT * integ / 100000);\n\n    if (zones[zone].pidI > 1) { zones[zone].pidI = 1; }  // 18/02/24\n    if (zones[zone].pidI < 0) { zones[zone].pidI = 0; }  // \n\n    if (zones[zone].pidI >= zones[zone].pidMax) { zones[zone].pidI = zones[zone].pidMax; }\n\n    var prop = 12 ; \n    //if (zones[zone].errT > 1) { prop = prop * 1.5; } // bias when too hot.\n    if (Math.abs(zones[zone].errT) > 0.5) { prop = (20) + ((Math.abs(zones[zone].errT) - 0.5) * 2); }\n    //if (zones[zone].errT > 2.5) { prop = prop * 5; } // force off when too hot.\n    //if (Math.abs(zones[zone].errT) < 0.5) { prop = Math.abs(zones[zone].errT) * 20; }\n    if (zones[zone].tRoom < 15.8) { prop = prop * 3; }\n\n    prop = prop * zones[zone].scalePID; // 18/02/24\n\n    zones[zone].pidP = (0 - zones[zone].errT) * prop / 100;\n    if (zones[zone].pidP > 0.5) { zones[zone].pidP = 0.5; }  // max prop\n    else if (zones[zone].pidP < -1) { zones[zone].pidP = -1; }  // min prop\n\n    var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n    \n    var diff = 5 * zones[zone].scalePID; // * zones[zone].scaleD;\n\n    var stable = false;\n    if (Math.abs(tDM) < 0.01) { stable = true; }\n    //if (Math.abs(zones[zone].errT) < 0.1) { diff = 0 }\n    //if (Math.abs(zones[zone].errT) < 0.5) { diff = Math.abs(zones[zone].errT) * 30; }\n\n    if (Math.abs(zones[zone].errT) > 1.5) { diff = 0 }   // 18/02/24  to allow faster startup.\n\n    // when not in fine control, react more to counter increasing temperatures\n    // ... easier to add than remove heat from rooms.\n    //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n    //if (tDM > 0) { diff = 120; }\n\n    //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n    //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n    var tDiffr = (10000 * tDM) / 60;\n\n    //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n    zones[zone].pidD = (0 - tDiffr) * diff / 1000;\n    if (zones[zone].pidD > 1) { zones[zone].pidD = 1; }  // max diff\n    else if (zones[zone].pidD < -1) { zones[zone].pidD = -1; }  // max diff\n\n    zones[zone].pid = 0.0 + (zones[zone].pidI || 0) + (zones[zone].pidP || 0) + (zones[zone].pidD || 0)\n    // + (3 * (avgd || 0) / 1000);\n\n    if (zones[zone].pid < 0) { zones[zone].pid = 0; }\n\n\n\n    // Flow Temperature Adjustments\n    var tF = flow.get(\"tF\") || 70;\n    // zones[zone].tFAdjust = (70 - oat) / (Math.max(45, tF) - oat);\n    zones[zone].tFAdjust = (70 - zones[zone].tR) / (Math.max(45, tF) - zones[zone].tR);\n\n    //zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n    //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n    //zones[zone].pid = zones[zone].pid * zones[zone].tFAdjust;\n\n    if (zones[zone].pid > 1) { zones[zone].pid = 1; }\n\n    if (zones[zone].pid > zones[zone].pidMax) { zones[zone].pid = zones[zone].pidMax; }\n\n\n\n    // Return temperature limit.\n    // ! TODO vary return limit with outside air temperature and zone variable.\n\n    zones[zone].pidF = 1 * zones[zone].pid;\n\n    if (zones[zone].tR > 35.5) {\n\n        //if (Math.max(zones[zone].pidHistory) > 0) {\n\n        var af = (Math.min(45, zones[zone].tR) - 35.0) / 10;\n        zones[zone].pid = zones[zone].pid * (1 - (af / 1));\n        //zones[zone].pidI = zones[zone].pidI * (1 - (af / 1));\n        //}\n\n        //if (Math.max(zones[zone].pidHistory) == zones[zone].pidMax) {\n\n        if (zones[zone].tR > 37) {\n            zones[zone].pidMax = zones[zone].pidMax - 0.01;\n        } else {\n            zones[zone].pidMax = zones[zone].pidMax - 0.0025;\n        }\n\n    } else if (zones[zone].tR > 34.5) {\n\n        // deadband\n\n    } else if (zones[zone].pid >= zones[zone].pidMax) {\n\n        zones[zone].pidMax = zones[zone].pidMax + 0.0025;\n\n    }\n\n\n\n\n    //if (zones[zone].pid > 0) { zones[zone].pidHistory.push(zones[zone].pid); }\n    //zones[zone].pidHistory.shift();\n\n    // if the hottest return, and rising, then good chance valve needs reseating...\n    zones[zone].state = \"ok\";\n    if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) {\n        // zones[zone].onV = 0.2;\n        // zones[zone].offV = 0;\n        // zones[zone].gap = 500000;\n        // zones[zone].onTime = 2000;\n        zones[zone].state = \"fault\";\n    }\n\n    node.send([null, { \"topic\": devicePrefix + \"-manifold/alarm/zone\" + i, \"payload\": zones[zone].state }]);\n\n\n    node.send([null, { \"topic\": devicePrefix + \"-manifold/dat/pid\" + i, \"payload\": zones[zone].pid }]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tR\", \"payload\": zones[zone].tR }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tSetRoom\", \"payload\": zones[zone].tSetRoom }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tRoom\", \"payload\": zones[zone].tRoom }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/errT\", \"payload\": zones[zone].errT }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/onV\", \"payload\": zones[zone].onV }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pid\", \"payload\": zones[zone].pid }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidP\", \"payload\": zones[zone].pidP }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidI\", \"payload\": zones[zone].pidI }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidD\", \"payload\": zones[zone].pidD }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidMax\", \"payload\": zones[zone].pidMax }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/scalePID\", \"payload\": zones[zone].scalePID }]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/stat/state\", \"payload\": zones[zone].state }]);\n\n\n\n\n}\n\n\n\n\n// if (cmdsout !== \"\") {\n\n//     var msg1 = {};\n//     msg1.topic = \"cmdsout\"\n//     msg1.payload = cmdsout;\n\n//     node.send([msg1, null]);\n\n// }\n\nflow.set(\"zones\", zones);\n\nnode.send([{ \"topic\": \"zones\" + i, \"payload\": zones }, null]);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "d29f41ae618fc0b8",
                "8351691fd8328cdd"
            ],
            [
                "c38883d7ee46962a",
                "67eb1a55cf49f58b"
            ]
        ]
    },
    {
        "id": "9885f9498763cd6f",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "PID Testing",
        "func": "\n\nvar td = new Date();\nvar minuteOfDay = (60 * td.getHours()) + td.getMinutes();\nvar timin = td.getTime();\n\nvar lasttimin = flow.get(\"timin\");\nflow.set(\"timin\",timin);\nif (!lasttimin) { return null; }\n\nvar periods = (timin - lasttimin) / 1000;  // seconds\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\nvar oat = flow.get(\"oat\") || 10;\nif (oat>100) { oat = 0; }\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    //if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n        zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    //}\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\n//flow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    \n \n    zones[zone].pidI = zones[zone].pidI || 0   \n    zones[zone].pid = zones[zone].pid || 0  \n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n    // pre-heat from 6-9am\n    \n    var tDefault = 21.5;\n\n    zones[zone].tSetRoom = tDefault;\n\n  \n    if (minuteOfDay < 480) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 8) + (8 * (minuteOfDay) / 480);\n        zones[zone].tSetRoom = Math.max(16, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n\n    }\n    else if (minuteOfDay > 1080) {\n\n        zones[zone].tSetRoom = 16;\n        //zones[zone].tSetRoom = tDefault;\n    }\n\n    zones[zone].tSetRoom = tDefault; //21.5; // testing !!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    zones[zone].turndown = 0; // no occupancy turn down temporary.\n\n    var setVme;  // set voltage\n\n        zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n\n        zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n        zones[zone].tRLast = zones[zone].tR;\n\n\n\n        var integ = 1;\n        zones[zone].pidI = zones[zone].pidI - (periods * zones[zone].errT * integ / 10000);\n\n        if (zones[zone].pidI > 0.5) { zones[zone].pidI = 0.5; }  // \n        if (zones[zone].pidI < 0) { zones[zone].pidI = 0; }  // \n\n        var prop = 10;\n        //if (zones[zone].errT > 1) { prop = prop * 1.5; } // bias when too hot.\n        if (zones[zone].errT > 2) { prop = prop * 2; } // force off when too hot.\n\n        zones[zone].pidP = (0-zones[zone].errT) * prop / 100;\n        if (zones[zone].pidP > 0.5) { zones[zone].pidP = 0.5; }  // max prop\n        else if (zones[zone].pidP < -0.5) { zones[zone].pidP = -0.5; }  // min prop\n\n        var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n        var diff = 30;\n        var stable = false;\n        if (Math.abs(tDM) < 0.01) { stable = true; }\n        if (Math.abs(zones[zone].errT) < 0.2 && stable) { diff = 10 }\n        \n        // when not in fine control, react more to counter increasing temperatures\n        // ... easier to add than remove heat from rooms.\n        //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n        //if (tDM > 0) { diff = 120; }\n\n        //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n        //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n        var tDiffr = (10000 * tDM) / 60;\n\n        //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n        zones[zone].pidD = (0 - tDiffr) * diff / 1000;\n        if (zones[zone].pidD > 1) { zones[zone].pidD = 1; }  // max diff\n        else if (zones[zone].pidD < -1) { zones[zone].pidD = -1; }  // max diff\n\n        zones[zone].pid = 0 + (zones[zone].pidI || 0) + (zones[zone].pidP || 0) + (zones[zone].pidD || 0) \n        // + (3 * (avgd || 0) / 1000);\n\n        if (zones[zone].pid < 0) { zones[zone].pid = 0; }  \n\n        \n\n        // Flow Temperature Adjustments\n        var tF = flow.get(\"tF\") || 70;\n        zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n        //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n        zones[zone].pid = zones[zone].pid * zones[zone].tFAdjust;\n\n        if (zones[zone].pid > 1) { zones[zone].pid = 1; }  \n\n\n\n        // Return temperature limit.\n        // ! TODO vary return limit with outside air temperature and zone variable.\n\n            zones[zone].pidF = 1 *  zones[zone].pid;\n\n            if (zones[zone].tR > 35) {\n                \n                var af = (Math.min(45, zones[zone].tR) - 35.0) / 10;\n                zones[zone].pid = zones[zone].pid * (1 - (af/5));\n                zones[zone].pidI = zones[zone].pidI * (1 - (af/5));\n\n                \n            }\n\n            // if the hottest return, and rising, then good chance valve needs reseating...\n            zones[zone].state = \"ok\";\n            if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) {\n                // zones[zone].onV = 0.2;\n                // zones[zone].offV = 0;\n                // zones[zone].gap = 500000;\n                // zones[zone].onTime = 2000;\n                zones[zone].state = \"fault\";\n            }\n            \n            node.send([null, {\"topic\":devicePrefix + \"-manifold/alarm/zone\" + i, \"payload\":zones[zone].state }]);\n\n  \n    node.send([null, {\"topic\":devicePrefix + \"-manifold/dat/pid\" + i, \"payload\":zones[zone].pid }]);\n\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/tR\", \"payload\":zones[zone].tR }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/tSetRoom\", \"payload\":zones[zone].tSetRoom }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/tRoom\", \"payload\":zones[zone].tRoom }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/errT\", \"payload\":zones[zone].errT }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/onV\", \"payload\":zones[zone].onV }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pid\", \"payload\":zones[zone].pid }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pidP\", \"payload\":zones[zone].pidP }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pidI\", \"payload\":zones[zone].pidI }]);\n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/dat/pidD\", \"payload\":zones[zone].pidD }]);\n    \n    node.send([null, {\"topic\":devicePrefix + \"-zone\" + i + \"/stat/state\", \"payload\":zones[zone].state }]);\n \n \n    \n\n}\n\n\n\n\n// if (cmdsout !== \"\") {\n\n//     var msg1 = {};\n//     msg1.topic = \"cmdsout\"\n//     msg1.payload = cmdsout;\n\n//     node.send([msg1, null]);\n\n// }\n\nflow.set(\"zones\", zones);\n\nnode.send([{\"topic\": \"zones\" + i, \"payload\":zones }, null]);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "978c5fac98a256bc",
        "type": "mqtt in",
        "z": "9e8d0666443296bf",
        "name": "",
        "topic": "+/+/htg/settings/usersettings",
        "qos": "0",
        "datatype": "json",
        "broker": "0a9a86a0d76f9647",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 140,
        "wires": [
            [
                "9177d1f67017a985",
                "6b512cbf1bd32286"
            ]
        ]
    },
    {
        "id": "9177d1f67017a985",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "setup",
        "func": "\nflow.set(\"usersettings\", msg.payload);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6b512cbf1bd32286",
        "type": "debug",
        "z": "9e8d0666443296bf",
        "name": "debug 104",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 120,
        "wires": []
    },
    {
        "id": "1bbbd8cb9eca0a55",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "West 1",
        "func": "\n\nvar td = new Date();\nvar minuteOfDay = (60 * td.getHours()) + td.getMinutes();\nvar timin = td.getTime();\n\nvar lasttimin = flow.get(\"timin\");\nflow.set(\"timin\", timin);\nif (!lasttimin) { return null; }\n\nvar periods = (timin - lasttimin) / 1000;  // seconds\n\nvar cmdsout = \"\";\n\nvar devicePrefix = \"htg-west\";\n\nvar zones = flow.get(\"zones\");\nvar oat = flow.get(\"oat\") || 10;\nif (oat > 100) { oat = 0; }\n\nvar usersettings = flow.get(\"usersettings\") || [];\n\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    //if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n    zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    //}\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\n//flow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    var roomsettings = {};\n    var room = (\"\"+zones[zone].stat).replace(\"sontay\", \"\");\n    for (var r in usersettings) {\n        if (usersettings[r].room == room) {\n            roomsettings = usersettings[r];\n            //zones[zone].usersettings = usersettings[r];\n            break;\n        }\n    }\n\n    zones[zone].pidI = zones[zone].pidI || 0\n    zones[zone].pid = zones[zone].pid || 0\n\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n    zones[zone].tSetUser = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.setpoint.value\") || 50);\n\n    var tDefault = parseFloat(roomsettings.tSetDefault || 21.5);\n    var tSetBack = parseFloat(roomsettings.tSetBack || 16);\n    \n    zones[zone].tSetRoom = tDefault;\n\n    if (minuteOfDay < 420) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 8) + (8 * (minuteOfDay) / 480);\n        zones[zone].tSetRoom = Math.max(tSetBack, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n    }\n    else if (minuteOfDay < 540) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 1) + (1 * (minuteOfDay - 420) / 120);\n        zones[zone].tSetRoom = Math.max(tSetBack, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n        // no ramp\n        //zones[zone].tSetRoom = tSetBack;\n\n    }\n    else if (minuteOfDay > 1080) {\n\n        zones[zone].tSetRoom = tSetBack ;\n        //zones[zone].tSetRoom = tDefault;\n    }\n\n    if (roomsettings.runMode == \"off\") { zones[zone].tSetRoom = 5; }\n    else if (roomsettings.runMode == \"constant\") { zones[zone].tSetRoom = tDefault; }\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n   \n\n    zones[zone].turndown = 0; // no occupancy turn down temporary.\n\n    var setVme;  // set voltage\n\n    zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n\n    zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n    zones[zone].tRLast = zones[zone].tR;\n\n\n\n    var integ = 5;\n    if (Math.abs(zones[zone].errT) < 0.5) { integ = Math.abs(zones[zone].errT) * 10; }\n    \n    zones[zone].pidI = zones[zone].pidI - (periods * zones[zone].errT * integ / 100000);\n\n    if (zones[zone].pidI > 0.5) { zones[zone].pidI = 0.5; }  // \n    if (zones[zone].pidI < 0) { zones[zone].pidI = 0; }  // \n\n    var prop = 5;\n    //if (zones[zone].errT > 1) { prop = prop * 1.5; } // bias when too hot.\n    if (Math.abs(zones[zone].errT) > 2) { prop = prop * 3; } \n    if (zones[zone].errT > 2.5) { prop = prop * 5; } // force off when too hot.\n    //if (Math.abs(zones[zone].errT) < 0.5) { prop = Math.abs(zones[zone].errT) * 20; }\n\n    zones[zone].pidP = (0 - zones[zone].errT) * prop / 100;\n    if (zones[zone].pidP > 0.5) { zones[zone].pidP = 0.5; }  // max prop\n    else if (zones[zone].pidP < -0.5) { zones[zone].pidP = -0.5; }  // min prop\n\n    var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n    var diff = 4;\n\n    var stable = false;\n    if (Math.abs(tDM) < 0.01) { stable = true; }\n    if (Math.abs(zones[zone].errT) < 0.1) { diff = 0 }\n    //if (Math.abs(zones[zone].errT) < 0.5) { diff = Math.abs(zones[zone].errT) * 30; }\n\n    // when not in fine control, react more to counter increasing temperatures\n    // ... easier to add than remove heat from rooms.\n    //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n    //if (tDM > 0) { diff = 120; }\n\n    //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n    //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n    var tDiffr = (10000 * tDM) / 60;\n\n    //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n    zones[zone].pidD = (0 - tDiffr) * diff / 1000;\n    if (zones[zone].pidD > 1) { zones[zone].pidD = 1; }  // max diff\n    else if (zones[zone].pidD < -1) { zones[zone].pidD = -1; }  // max diff\n\n    zones[zone].pid = 0 + (zones[zone].pidI || 0) + (zones[zone].pidP || 0) + (zones[zone].pidD || 0)\n    // + (3 * (avgd || 0) / 1000);\n\n    if (zones[zone].pid < 0) { zones[zone].pid = 0; }\n\n\n\n    // Flow Temperature Adjustments\n    var tF = flow.get(\"tF\") || 70;\n    zones[zone].tFAdjust = (70 - oat) / (Math.max(45, tF) - oat);\n    //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n    zones[zone].pid = zones[zone].pid * zones[zone].tFAdjust;\n\n    if (zones[zone].pid > 1) { zones[zone].pid = 1; }\n\n\n\n    // Return temperature limit.\n    // ! TODO vary return limit with outside air temperature and zone variable.\n\n    zones[zone].pidF = 1 * zones[zone].pid;\n\n    if (zones[zone].tR > 35) {\n\n        // var af = (Math.min(45, zones[zone].tR) - 35.0) / 10;\n        // zones[zone].pid = zones[zone].pid * (1 - (af / 5));\n        // zones[zone].pidI = zones[zone].pidI * (1 - (af / 5));\n\n\n    }\n\n    // if the hottest return, and rising, then good chance valve needs reseating...\n    zones[zone].state = \"ok\";\n    if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) {\n        // zones[zone].onV = 0.2;\n        // zones[zone].offV = 0;\n        // zones[zone].gap = 500000;\n        // zones[zone].onTime = 2000;\n        zones[zone].state = \"fault\";\n    }\n\n    node.send([null, { \"topic\": devicePrefix + \"-manifold/alarm/zone\" + i, \"payload\": zones[zone].state }]);\n\n\n    node.send([null, { \"topic\": devicePrefix + \"-manifold/dat/pid\" + i, \"payload\": zones[zone].pid }]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tR\", \"payload\": zones[zone].tR }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tSetRoom\", \"payload\": zones[zone].tSetRoom }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tRoom\", \"payload\": zones[zone].tRoom }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/errT\", \"payload\": zones[zone].errT }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/onV\", \"payload\": zones[zone].onV }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pid\", \"payload\": zones[zone].pid }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidP\", \"payload\": zones[zone].pidP }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidI\", \"payload\": zones[zone].pidI }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidD\", \"payload\": zones[zone].pidD }]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/stat/state\", \"payload\": zones[zone].state }]);\n\n\n\n\n}\n\n\n\n\n// if (cmdsout !== \"\") {\n\n//     var msg1 = {};\n//     msg1.topic = \"cmdsout\"\n//     msg1.payload = cmdsout;\n\n//     node.send([msg1, null]);\n\n// }\n\nflow.set(\"zones\", zones);\n\nnode.send([{ \"topic\": \"zones\" + i, \"payload\": zones }, null]);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9d6128cfc747b160",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "West 5",
        "func": "\n\nvar td = new Date();\nvar minuteOfDay = (60 * td.getHours()) + td.getMinutes();\nvar timin = td.getTime();\n\nvar lasttimin = flow.get(\"timin\");\nflow.set(\"timin\", timin);\nif (!lasttimin) { return null; }\n\nvar periods = (timin - lasttimin) / 1000;  // seconds\n\nvar cmdsout = \"\";\n\nvar devicePrefix = flow.get(\"deviceid\") || \"htg-west\";\n\nvar zones = flow.get(\"zones\");\nvar oat = flow.get(\"oat\") || 10;\nif (oat > 100) { oat = 0; }\n\nvar usersettings = flow.get(\"usersettings\") || [];\n\n// var readsnow = global.get(\"readings.local.\" + devicePrefix + \".dat\");\n// var reads = flow.get(\"tR\") || {};\n// var readslast = flow.get(\"tRlast\") || {};\n// var setV = flow.get(\"setV\") || {};\n\n// var tFHistory = global.get(\"tFHistory\") || [];\n// var tF = readsnow[\"tFM\"].value || 70;\n// tFHistory.push(tF);\n// if (tFHistory.length > 20) { tFHistory.shift(); }\n// global.set(\"tFHistory\", tFHistory);\n// var tFAv = 0;\n// for (let h = 0; h < 15; h++) {\n//     tFAv = tFAv + (tFHistory[h] || 70);\n// }\n// tFAv = tFAv / 15;\n// var fAdjust = 70 / (Math.max(30, tFAv));\n// global.set(\"fAdjust\", fAdjust);\n\nvar totd = 0;\nvar tRPeak = 0;\nfor (var zone in zones) {\n    totd = totd + (zones[zone].gapD || 0);\n\n    //if ((timin - (zones[zone].lastOff || timin) > 10000) && (timin - (zones[zone].lastOff || timin) < 15000)) {    // open recent = take return reading and calculate off time.\n\n    zones[zone].tR = global.get(\"readings.local.\" + zones[zone].tRObj + \".value\") || 30;\n    //}\n\n    if (zones[zone].tR > tRPeak) { tRPeak = 1.0 * zones[zone].tR; }\n}\n\n\nvar avgd = totd / zones.length;\n//flow.set(\"avgd\", avgd);\n\nfor (var zone in zones) {\n\n    var i = zones[zone].zone;\n\n    var roomsettings = {};\n    var room = (\"\" + zones[zone].stat).replace(\"sontay\", \"\");\n    for (var r in usersettings) {\n        if (usersettings[r].room == room) {\n            roomsettings = usersettings[r];\n            //zones[zone].usersettings = usersettings[r];\n            break;\n        }\n    }\n\n    zones[zone].pidI = zones[zone].pidI || 0\n    zones[zone].pid = zones[zone].pid || 0\n\n    zones[zone].pidMax = zones[zone].pidMax || 1.0;\n    // zones[zone].pidHistory = zones[zone].pidHistory || [0, 0, 0, 0, 0];\n\n    // temporary fix for occasional low readings on 110\n    var tRoomT = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperature.value\") || 22);\n    if (tRoomT < 5) { continue; }\n    else { zones[zone].tRoom = tRoomT; }\n\n\n    zones[zone].tSetRoom = zones[zone].tSetRoom || 22;    // !! NEED to takee from Sontay Dials\n\n    // pre-heat from 6-9am\n\n    var tDefault = parseFloat(roomsettings.tSetDefault || 21.5);\n    var tSetBack = parseFloat(roomsettings.tSetBack || 16);\n\n    zones[zone].tSetRoom = tDefault;\n\n    if (minuteOfDay < 420) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 8) + (8 * (minuteOfDay) / 480);\n        zones[zone].tSetRoom = Math.max(tSetBack, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n    }\n    else if (minuteOfDay < 540) {\n\n        // ramp up \n\n        //zones[zone].tSetRoom = (tDefault - 3) + (3 * (minuteOfDay - 480) / 480) ;\n        zones[zone].tSetRoom = (tDefault - 1) + (1 * (minuteOfDay - 420) / 120);\n        zones[zone].tSetRoom = Math.max(tSetBack, zones[zone].tSetRoom);\n        zones[zone].tSetRoom = parseInt(100 * zones[zone].tSetRoom) / 100;\n\n        // no ramp\n        //zones[zone].tSetRoom = tSetBack;\n\n    }\n    else if (minuteOfDay > 1080) {\n\n        zones[zone].tSetRoom = tSetBack;\n        //zones[zone].tSetRoom = tDefault;\n    }\n\n    if (roomsettings.runMode == \"off\") { zones[zone].tSetRoom = 5; }\n    else if (roomsettings.runMode == \"constant\") { zones[zone].tSetRoom = tDefault; }\n\n    //zones[zone].tSetRoom = tDefault; //21.5; // testing !!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    var co2Room = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.co2Rise.value\") || 0);\n    if (co2Room > 40) { zones[zone].lastOccupied = timin; }\n    var lastOcc = timin - (zones[zone].lastOccupied || timin);\n\n    if (lastOcc < (1000 * 60 * 60 * 24 * 3)) {\n\n        zones[zone].turndown = 0.0;\n\n    } else if (lastOcc < (1000 * 60 * 60 * 24 * 5)) {\n\n        zones[zone].turndown = 3.0 * (lastOcc - (1000 * 60 * 60 * 24 * 3)) / (1000 * 60 * 60 * 24 * 2);\n\n    } else {\n\n        zones[zone].turndown = 3.0;\n    }\n\n    zones[zone].turndown = 0; // no occupancy turn down temporary.\n\n    var setVme;  // set voltage\n\n    var errTLast = 1 * (zones[zone].errT || 0);\n    zones[zone].errT = zones[zone].tRoom + zones[zone].turndown - zones[zone].tSetRoom;\n\n    zones[zone].tRDiff = zones[zone].tR - (zones[zone].tRLast || zones[zone].tR);\n    zones[zone].tRLast = zones[zone].tR;\n\n\n    zones[zone].scalePID = zones[zone].scalePID || 1;\n    zones[zone].scaleD = zones[zone].scaleD || 1;\n\n\n    zones[zone][\"AvHistory\"] = null;\n    zones[zone][\"pidHistory\"] = null;\n    zones[zone].cycleHistory = zones[zone].cycleHistory || []; \n    zones[zone].lastOut = zones[zone].lastOut || 0;\n\n    if (Math.abs(zones[zone].errT) > 0.15) { zones[zone].lastOut = timin; }\n\n    if (errTLast > 0 && zones[zone].errT <= 0) {\n        \n        zones[zone].cycleTime = (timin - (zones[zone].zeroTime || 0)) / 60000;\n        zones[zone].zeroTime = timin;\n\n        // PID tuning\n\n        if ((timin - zones[zone].lastOut) < (1000 * 60 * 60)) {   // only tune if there is recent inaccuracy.\n\n            if (zones[zone].cycleTime < 30 && zones[zone].cycleTime > 5) {   \n                zones[zone].scalePID = zones[zone].scalePID * 0.975;    \n\n                // if (zones[zone].pidD > 0.01) {\n                //     zones[zone].scaleD = zones[zone].scaleD + 0.05;\n                // }\n            \n\n            } \n            else if (zones[zone].cycleTime < 300 && zones[zone].cycleTime > 30 ) {\n                zones[zone].scalePID = zones[zone].scalePID + 0.05;\n            }\n            \n            if (zones[zone].scalePID > 5) { zones[zone].scalePID = 5; }\n            else if (zones[zone].scalePID < 0.1) { zones[zone].scalePID = 0.1; }\n            \n            // if (zones[zone].scaleD > 10) { zones[zone].scaleD = 10; }\n            // else if (zones[zone].scaleD < 0.8) { zones[zone].scaleD = 0.8; }\n\n        }\n\n        zones[zone].cycleHistory.push(zones[zone].cycleTime);\n        if (zones[zone].cycleHistory.length > 10) {\n            zones[zone].cycleHistory.shift();\n        }\n    }\n    if (timin - (zones[zone].zeroTime || 0) < (1000 * 60 * 60)) {\n        // has been at zero point within last hour\n\n    }\n\n\n    \n\n    var integ = 1.5 * zones[zone].scalePID;  // 18/02/24\n    //if (Math.abs(zones[zone].errT) < 0.5) { integ = Math.abs(zones[zone].errT) * 10; }\n    if (Math.abs(zones[zone].errT) < 1.5 ) { integ = 5 * integ; }   // 18/02/24  to allow faster startup.\n\n    zones[zone].pidI = zones[zone].pidI - (periods * zones[zone].errT * integ / 100000);\n\n    if (zones[zone].pidI > 1) { zones[zone].pidI = 1; }  // 18/02/24\n    if (zones[zone].pidI < 0) { zones[zone].pidI = 0; }  // \n\n    var prop = 20 ; \n    //if (zones[zone].errT > 1) { prop = prop * 1.5; } // bias when too hot.\n    if (Math.abs(zones[zone].errT) > 0.5) { prop = (20) + ((Math.abs(zones[zone].errT) - 0.5) * 2); }\n    //if (zones[zone].errT > 2.5) { prop = prop * 5; } // force off when too hot.\n    //if (Math.abs(zones[zone].errT) < 0.5) { prop = Math.abs(zones[zone].errT) * 20; }\n\n    prop = prop * zones[zone].scalePID; // 18/02/24\n\n    zones[zone].pidP = (0 - zones[zone].errT) * prop / 100;\n    if (zones[zone].pidP > 0.5) { zones[zone].pidP = 0.5; }  // max prop\n    else if (zones[zone].pidP < -0.5) { zones[zone].pidP = -0.5; }  // min prop\n\n    var tDM = parseFloat(global.get(\"readings.local.\" + zones[zone].stat + \".dat.temperatureDiff.value\") || 0);\n    \n    var diff = 5 * zones[zone].scalePID; // * zones[zone].scaleD;\n\n    var stable = false;\n    if (Math.abs(tDM) < 0.01) { stable = true; }\n    //if (Math.abs(zones[zone].errT) < 0.1) { diff = 0 }\n    //if (Math.abs(zones[zone].errT) < 0.5) { diff = Math.abs(zones[zone].errT) * 30; }\n\n    if (Math.abs(zones[zone].errT) > 1.5) { diff = 0 }   // 18/02/24  to allow faster startup.\n\n    // when not in fine control, react more to counter increasing temperatures\n    // ... easier to add than remove heat from rooms.\n    //if ((zones[zone].errT < -0.3) && (zones[zone].errT > 0.3) && (tDM > 0)) { diff = 60; }\n    //if (tDM > 0) { diff = 120; }\n\n    //var tRoomLast = 1 * (zones[zone].tRoomLast || 21);\n    //zones[zone].tRoomLast = 1 * zones[zone].tRoom;\n\n    var tDiffr = (10000 * tDM) / 60;\n\n    //var tDiffr = (10000000000 * (zones[zone].tRoom - tRoomLast)) / Math.max(1000, (zones[zone].gap || 1000));\n\n    zones[zone].pidD = (0 - tDiffr) * diff / 1000;\n    if (zones[zone].pidD > 1) { zones[zone].pidD = 1; }  // max diff\n    else if (zones[zone].pidD < -1) { zones[zone].pidD = -1; }  // max diff\n\n    zones[zone].pid = 0.0 + (zones[zone].pidI || 0) + (zones[zone].pidP || 0) + (zones[zone].pidD || 0)\n    // + (3 * (avgd || 0) / 1000);\n\n    if (zones[zone].pid < 0) { zones[zone].pid = 0; }\n\n\n\n    // Flow Temperature Adjustments\n    var tF = flow.get(\"tF\") || 70;\n    // zones[zone].tFAdjust = (70 - oat) / (Math.max(45, tF) - oat);\n    zones[zone].tFAdjust = (70 - zones[zone].tR) / (Math.max(45, tF) - zones[zone].tR);\n\n    //zones[zone].tFAdjust = 40.0 / (Math.max(45, tF) - 20.0)\n    //zones[zone].gap = zones[zone].gap / zones[zone].tFAdjust;\n    //zones[zone].pid = zones[zone].pid * zones[zone].tFAdjust;\n\n    if (zones[zone].pid > 1) { zones[zone].pid = 1; }\n\n    if (zones[zone].pid > zones[zone].pidMax) { zones[zone].pid = zones[zone].pidMax; }\n\n\n\n    // Return temperature limit.\n    // ! TODO vary return limit with outside air temperature and zone variable.\n\n    zones[zone].pidF = 1 * zones[zone].pid;\n\n    if (zones[zone].tR > 35.5) {\n\n        //if (Math.max(zones[zone].pidHistory) > 0) {\n\n        var af = (Math.min(45, zones[zone].tR) - 35.0) / 10;\n        zones[zone].pid = zones[zone].pid * (1 - (af / 1));\n        //zones[zone].pidI = zones[zone].pidI * (1 - (af / 1));\n        //}\n\n        //if (Math.max(zones[zone].pidHistory) == zones[zone].pidMax) {\n\n        if (zones[zone].tR > 37) {\n            zones[zone].pidMax = zones[zone].pidMax - 0.01;\n        } else {\n            zones[zone].pidMax = zones[zone].pidMax - 0.0025;\n        }\n\n    } else if (zones[zone].tR > 34.5) {\n\n        // deadband\n\n    } else if (zones[zone].pid >= zones[zone].pidMax) {\n\n        zones[zone].pidMax = zones[zone].pidMax + 0.0025;\n\n    }\n\n\n\n\n    //if (zones[zone].pid > 0) { zones[zone].pidHistory.push(zones[zone].pid); }\n    //zones[zone].pidHistory.shift();\n\n    // if the hottest return, and rising, then good chance valve needs reseating...\n    zones[zone].state = \"ok\";\n    if (zones[zone].tR > 40 && zones[zone].tR == tRPeak && zones[zone].tRDiff > 0) {\n        // zones[zone].onV = 0.2;\n        // zones[zone].offV = 0;\n        // zones[zone].gap = 500000;\n        // zones[zone].onTime = 2000;\n        zones[zone].state = \"fault\";\n    }\n\n    node.send([null, { \"topic\": devicePrefix + \"-manifold/alarm/zone\" + i, \"payload\": zones[zone].state }]);\n\n\n    node.send([null, { \"topic\": devicePrefix + \"-manifold/dat/pid\" + i, \"payload\": zones[zone].pid }]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tR\", \"payload\": zones[zone].tR }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tSetRoom\", \"payload\": zones[zone].tSetRoom }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/tRoom\", \"payload\": zones[zone].tRoom }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/errT\", \"payload\": zones[zone].errT }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/onV\", \"payload\": zones[zone].onV }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pid\", \"payload\": zones[zone].pid }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidP\", \"payload\": zones[zone].pidP }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidI\", \"payload\": zones[zone].pidI }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidD\", \"payload\": zones[zone].pidD }]);\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/dat/pidMax\", \"payload\": zones[zone].pidMax }]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + i + \"/stat/state\", \"payload\": zones[zone].state }]);\n\n\n\n\n}\n\n\n\n\n// if (cmdsout !== \"\") {\n\n//     var msg1 = {};\n//     msg1.topic = \"cmdsout\"\n//     msg1.payload = cmdsout;\n\n//     node.send([msg1, null]);\n\n// }\n\nflow.set(\"zones\", zones);\n\nnode.send([{ \"topic\": \"zones\" + i, \"payload\": zones }, null]);\n\n\nreturn null;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c2136592577f8907",
        "type": "function",
        "z": "9e8d0666443296bf",
        "name": "valve",
        "func": "var devicePrefix = \"htg-west\";\n\n//var myTimeouts = {};\nvar myTimeout;\nvar onTimeout;\n\nvar minV = 1;\nvar stepV = 0.2;\n\nvar steps = 1 + ((10 - minV) / 0.2);\nvar period = 60; // seconds\n\nvar z = msg.payload.zone;\nvar pid = msg.payload.pid;\n\npid = pid * pid;\n//if (z!==1) { continue; }\n\n\nvar step = parseInt(pid * steps);\nvar highTime = parseInt(60000 * ((pid * steps) - parseInt(pid * steps))); // remainder \nvar startTime = parseInt((z / 12) * 30000);\n\nvar offV = (step < 1 ? 0 : minV + (stepV * (step-1)) );\nvar onV = (step < 1 ? minV : offV + stepV); ;\n\nif (pid == 0) { onV = 0; offV=0; }\n\nonV = Math.round((onV + Number.EPSILON) * 100) / 100; // parseInt(onV * 10) / 10;\noffV = Math.round((offV + Number.EPSILON) * 100) / 100; // parseInt(offV * 10) / 10;\n\nif (onV>4) { onV = 4; }\nif (offV>4) { offV = 4; }\n\nmsg.zdata.onV = onV;\n\nonTimeout = setTimeout(sendhigh, startTime);\n\n\nreturn null;\n\nfunction sendlow() {\n\n    var tR = global.get(\"readings.local.\" + msg.zdata.tRObj + \".value\") || 30;\n    flow.set(\"tR.z\" + msg.zdata.zone, tR);\n\n    if (offV == 0 && onV > 0.2) {\n        // close in steps. \n        //node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": 0.2, \"zdata\": msg.zdata }]);\n        node.send([{ \"topic\": \"off\" + z, \"payload\": 0.2, \"zdata\": msg.zdata }, null]);\n\n        //node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": 0.1, \"zdata\": msg.zdata }]);\n        node.send([{ \"topic\": \"off\" + z, \"payload\": 0.1, \"zdata\": msg.zdata }, null]);\n    }\n    \n    node.send([{ \"topic\": \"off\" + z, \"payload\": offV, \"zdata\": msg.zdata }, null]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": offV, \"zdata\": msg.zdata }]);\n\n    clearTimeout(myTimeout);\n}\n\nfunction sendhigh() {\n\n    node.send([{ \"topic\": \"on\" + z, \"payload\": onV, \"zdata\": msg.zdata }, null]);\n\n    node.send([null, { \"topic\": devicePrefix + \"-zone\" + z + \"/dat/setV\", \"payload\": onV, \"zdata\": msg.zdata }]);\n\n    myTimeout = setTimeout(sendlow, highTime);\n\n    clearTimeout(onTimeout);\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c85c6860a55765ae",
        "type": "file",
        "z": "9e8d0666443296bf",
        "name": "",
        "filename": "/home/pi/node-hiu/zones.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f9fecf064588e856",
        "type": "inject",
        "z": "9e8d0666443296bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "zones",
        "payloadType": "flow",
        "x": 920,
        "y": 140,
        "wires": [
            [
                "44fc84861fc89285"
            ]
        ]
    },
    {
        "id": "44fc84861fc89285",
        "type": "json",
        "z": "9e8d0666443296bf",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1070,
        "y": 140,
        "wires": [
            [
                "c85c6860a55765ae"
            ]
        ]
    },
    {
        "id": "f09d9c6fd472bb88",
        "type": "exec",
        "z": "5b1a83a41448db32",
        "command": "lt --port 1880 --subdomain swanseashed-zccboovai3u-nodered",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 570,
        "y": 260,
        "wires": [
            [
                "3aad3abf888fc4c3"
            ],
            [
                "b47b95bfcb149d31"
            ],
            [
                "56727e5360cd5ed8"
            ]
        ]
    },
    {
        "id": "3aad3abf888fc4c3",
        "type": "debug",
        "z": "5b1a83a41448db32",
        "name": "debug 94",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "b47b95bfcb149d31",
        "type": "debug",
        "z": "5b1a83a41448db32",
        "name": "debug 95",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 260,
        "wires": []
    },
    {
        "id": "0a4b5bd44ee826b5",
        "type": "inject",
        "z": "5b1a83a41448db32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "f09d9c6fd472bb88"
            ]
        ]
    },
    {
        "id": "56727e5360cd5ed8",
        "type": "delay",
        "z": "5b1a83a41448db32",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 480,
        "wires": [
            [
                "f09d9c6fd472bb88"
            ]
        ]
    },
    {
        "id": "f61243a955127483",
        "type": "inject",
        "z": "5b1a83a41448db32",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 80,
        "wires": [
            [
                "c5ab1a8d880c13d7"
            ]
        ]
    },
    {
        "id": "c5ab1a8d880c13d7",
        "type": "exec",
        "z": "5b1a83a41448db32",
        "command": "sudo npm install -g localtunnel",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 550,
        "y": 80,
        "wires": [
            [
                "abaed603baa90734"
            ],
            [
                "abaed603baa90734"
            ],
            []
        ]
    },
    {
        "id": "abaed603baa90734",
        "type": "debug",
        "z": "5b1a83a41448db32",
        "name": "debug 103",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 80,
        "wires": []
    },
    {
        "id": "45e645e2f66a124c",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "59e6ca4144a6be20"
            ]
        ]
    },
    {
        "id": "59e6ca4144a6be20",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 0 dacwr 1",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 80,
        "wires": [
            [
                "016d234261878103"
            ],
            [],
            []
        ]
    },
    {
        "id": "016d234261878103",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 80,
        "wires": []
    },
    {
        "id": "ddc05ef4c769e4ce",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 100,
        "wires": [
            [
                "4a76d48c15576c70"
            ]
        ]
    },
    {
        "id": "4a76d48c15576c70",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 0 r10krd 1",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "aaa9df128bb7c6aa"
            ],
            [],
            []
        ]
    },
    {
        "id": "aaa9df128bb7c6aa",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 100,
        "wires": []
    },
    {
        "id": "6294753a65953a67",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 220,
        "wires": [
            [
                "37330e6715fb6cef"
            ]
        ]
    },
    {
        "id": "37330e6715fb6cef",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas -list",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "209e261b731d9be0"
            ],
            [],
            []
        ]
    },
    {
        "id": "209e261b731d9be0",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 220,
        "wires": []
    },
    {
        "id": "d711386a0f95f10b",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "59e6ca4144a6be20"
            ]
        ]
    },
    {
        "id": "815b73a7246ed659",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "87d94a70bf2460d3"
            ]
        ]
    },
    {
        "id": "87d94a70bf2460d3",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 0 dacwr 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "0f3079cad9efea3d"
            ],
            [],
            []
        ]
    },
    {
        "id": "0f3079cad9efea3d",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "1a7353eca1992383",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "87d94a70bf2460d3"
            ]
        ]
    },
    {
        "id": "3eacc934edafda3b",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "997eaff2f592035c"
            ]
        ]
    },
    {
        "id": "997eaff2f592035c",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 0 dacwr 3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 340,
        "wires": [
            [
                "df75bcd56871b6ca"
            ],
            [],
            []
        ]
    },
    {
        "id": "df75bcd56871b6ca",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 340,
        "wires": []
    },
    {
        "id": "4460a4338952c565",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "997eaff2f592035c"
            ]
        ]
    },
    {
        "id": "b225c3a927980f3c",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "d79da54c4f705508"
            ]
        ]
    },
    {
        "id": "d79da54c4f705508",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 0 dacwr 4",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 460,
        "wires": [
            [
                "8c4fcb9847a89bf6"
            ],
            [],
            []
        ]
    },
    {
        "id": "8c4fcb9847a89bf6",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 460,
        "wires": []
    },
    {
        "id": "c7c1f4c6c6207a86",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "d79da54c4f705508"
            ]
        ]
    },
    {
        "id": "ef3b80d1e9757904",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "19c04ae8795fbded"
            ]
        ]
    },
    {
        "id": "19c04ae8795fbded",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 1 dacwr 1",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "33d6db44586f8815"
            ],
            [],
            []
        ]
    },
    {
        "id": "33d6db44586f8815",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 580,
        "wires": []
    },
    {
        "id": "a27006905fb4d910",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "19c04ae8795fbded"
            ]
        ]
    },
    {
        "id": "532bbd04741c873a",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "a199c0f483bbfff1"
            ]
        ]
    },
    {
        "id": "a199c0f483bbfff1",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 1 dacwr 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 720,
        "wires": [
            [
                "582c49edd2478071"
            ],
            [],
            []
        ]
    },
    {
        "id": "582c49edd2478071",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 720,
        "wires": []
    },
    {
        "id": "c76be3e13891fd7f",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "a199c0f483bbfff1"
            ]
        ]
    },
    {
        "id": "8c9d5eb394f3b45a",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 820,
        "wires": [
            [
                "67c0b16cd90c4dff"
            ]
        ]
    },
    {
        "id": "67c0b16cd90c4dff",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 1 dacwr 3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 840,
        "wires": [
            [
                "29e3ed26f732aa9e"
            ],
            [],
            []
        ]
    },
    {
        "id": "29e3ed26f732aa9e",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 840,
        "wires": []
    },
    {
        "id": "4657cebf1db5b660",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 880,
        "wires": [
            [
                "67c0b16cd90c4dff"
            ]
        ]
    },
    {
        "id": "e026d6743801067e",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act7",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 940,
        "wires": [
            [
                "8612320a9f8417cc"
            ]
        ]
    },
    {
        "id": "8612320a9f8417cc",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 1 dacwr 4",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 960,
        "wires": [
            [
                "08b5cf0cd25ea0c8"
            ],
            [],
            []
        ]
    },
    {
        "id": "08b5cf0cd25ea0c8",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 960,
        "wires": []
    },
    {
        "id": "506f18d645722678",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "8612320a9f8417cc"
            ]
        ]
    },
    {
        "id": "fc4f0439094797e1",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 1080,
        "wires": [
            [
                "97a7e0c55efbd6ac"
            ]
        ]
    },
    {
        "id": "97a7e0c55efbd6ac",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 2 dacwr 1",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "72dc6bd0f4e6a101"
            ],
            [],
            []
        ]
    },
    {
        "id": "72dc6bd0f4e6a101",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1100,
        "wires": []
    },
    {
        "id": "06a450539a6222b7",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 1140,
        "wires": [
            [
                "97a7e0c55efbd6ac"
            ]
        ]
    },
    {
        "id": "604b8ed1b6e65b2b",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "f11295b7ab536d4b"
            ]
        ]
    },
    {
        "id": "f11295b7ab536d4b",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 2 dacwr 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 1240,
        "wires": [
            [
                "202a84e76154148f"
            ],
            [],
            []
        ]
    },
    {
        "id": "202a84e76154148f",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 42",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1240,
        "wires": []
    },
    {
        "id": "feb0529817220d21",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 1280,
        "wires": [
            [
                "f11295b7ab536d4b"
            ]
        ]
    },
    {
        "id": "a0db34e4a6e99a5c",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 1340,
        "wires": [
            [
                "ffa7fb515af2f585"
            ]
        ]
    },
    {
        "id": "ffa7fb515af2f585",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 2 dacwr 3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 1360,
        "wires": [
            [
                "20c432c09374aa54"
            ],
            [],
            []
        ]
    },
    {
        "id": "20c432c09374aa54",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1360,
        "wires": []
    },
    {
        "id": "bb80f12f7d856bf4",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 1400,
        "wires": [
            [
                "ffa7fb515af2f585"
            ]
        ]
    },
    {
        "id": "fe86987e4d2e125c",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 110,
        "y": 1460,
        "wires": [
            [
                "d9d50e6b3ec5c576"
            ]
        ]
    },
    {
        "id": "d9d50e6b3ec5c576",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 2 dacwr 4",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 350,
        "y": 1480,
        "wires": [
            [
                "bb0aa1d973d88dbb"
            ],
            [],
            []
        ]
    },
    {
        "id": "bb0aa1d973d88dbb",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1480,
        "wires": []
    },
    {
        "id": "f556e0643bd6c975",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 110,
        "y": 1500,
        "wires": [
            [
                "d9d50e6b3ec5c576"
            ]
        ]
    },
    {
        "id": "4b3f47260e0c8e83",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 90,
        "y": 1600,
        "wires": [
            [
                "7b145b182d411d5d"
            ]
        ]
    },
    {
        "id": "7b145b182d411d5d",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 4 dacwr 1",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 1620,
        "wires": [
            [
                "60b59fae1b2954c7"
            ],
            [],
            []
        ]
    },
    {
        "id": "60b59fae1b2954c7",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c72fe35d1650c09f",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.5",
        "payloadType": "str",
        "x": 90,
        "y": 1640,
        "wires": [
            [
                "7b145b182d411d5d"
            ]
        ]
    },
    {
        "id": "02f5f92027188906",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act8",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 90,
        "y": 1740,
        "wires": [
            [
                "aabaa65c0a4f82b0"
            ]
        ]
    },
    {
        "id": "aabaa65c0a4f82b0",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 4 dacwr 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 1760,
        "wires": [
            [
                "818e0494315fdec4"
            ],
            [],
            []
        ]
    },
    {
        "id": "818e0494315fdec4",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1760,
        "wires": []
    },
    {
        "id": "22335af22fb9a111",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 90,
        "y": 1800,
        "wires": [
            [
                "aabaa65c0a4f82b0"
            ]
        ]
    },
    {
        "id": "f68bd1ca66f9f645",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 90,
        "y": 1840,
        "wires": [
            [
                "2273a19ab9ed5dc6"
            ]
        ]
    },
    {
        "id": "2273a19ab9ed5dc6",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 4 dacwr 3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 1880,
        "wires": [
            [
                "f15018cf4e697cb0"
            ],
            [],
            []
        ]
    },
    {
        "id": "f15018cf4e697cb0",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 1880,
        "wires": []
    },
    {
        "id": "ba58f9770c4e38c0",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.5",
        "payloadType": "str",
        "x": 90,
        "y": 1880,
        "wires": [
            [
                "2273a19ab9ed5dc6"
            ]
        ]
    },
    {
        "id": "164f63d515bf264d",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "act9",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 90,
        "y": 1980,
        "wires": [
            [
                "7befea1e330d6bb1"
            ]
        ]
    },
    {
        "id": "7befea1e330d6bb1",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 4 dacwr 4",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 330,
        "y": 2000,
        "wires": [
            [
                "fe2525dcbc0ec64a"
            ],
            [],
            []
        ]
    },
    {
        "id": "fe2525dcbc0ec64a",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 2000,
        "wires": []
    },
    {
        "id": "c595da6381ff72b8",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 90,
        "y": 2040,
        "wires": [
            [
                "7befea1e330d6bb1"
            ]
        ]
    },
    {
        "id": "4a66f51c198dfd67",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "tv03 room 117",
        "info": "",
        "x": 650,
        "y": 1580,
        "wires": []
    },
    {
        "id": "f2e8ecb34276a3c9",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 90,
        "y": 1680,
        "wires": [
            [
                "7b145b182d411d5d"
            ]
        ]
    },
    {
        "id": "219d3b87e83e51f3",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 0 r10krd",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "7ebdf17b0b0f974e"
            ],
            [],
            []
        ]
    },
    {
        "id": "389bbc30e543160f",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 830,
        "y": 300,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "a1cae6d1006aa4e7",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "af338ad4c554d653",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 830,
        "y": 380,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "4d3ec02011fda648",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "str",
        "x": 830,
        "y": 420,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "908f67a6add2448a",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 830,
        "y": 460,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "c0e089b7dc95c414",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "6",
        "payloadType": "str",
        "x": 830,
        "y": 500,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "32f278f1a08533ef",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7",
        "payloadType": "str",
        "x": 830,
        "y": 540,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "55f68c0184b86c78",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "str",
        "x": 830,
        "y": 580,
        "wires": [
            [
                "219d3b87e83e51f3"
            ]
        ]
    },
    {
        "id": "7ebdf17b0b0f974e",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 50",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 340,
        "wires": []
    },
    {
        "id": "af311e9cb42b8824",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 1 r10krd",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1110,
        "y": 680,
        "wires": [
            [
                "b8fe8aac5a19a53e"
            ],
            [],
            []
        ]
    },
    {
        "id": "69eab066f7ec7856",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 830,
        "y": 640,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "c850ba1e2f477dd8",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 830,
        "y": 720,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "291e34f031115b95",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "str",
        "x": 830,
        "y": 760,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "980fa650b7b4f7ea",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 830,
        "y": 800,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "50bcfadf54be03ff",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "6",
        "payloadType": "str",
        "x": 830,
        "y": 840,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "16f1c140419becb9",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "Strap-on t1 - Return",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7",
        "payloadType": "str",
        "x": 870,
        "y": 880,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "6bf60a754085356b",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "Strap-on t2 - Flow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "str",
        "x": 870,
        "y": 920,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "b8fe8aac5a19a53e",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 680,
        "wires": []
    },
    {
        "id": "775c8eee63dca358",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 2 r10krd",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1110,
        "y": 1020,
        "wires": [
            [
                "89e4b9919938c243"
            ],
            [],
            []
        ]
    },
    {
        "id": "e91f6f14219c8095",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 830,
        "y": 980,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "df7f99adfc02810f",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 830,
        "y": 1020,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "3ffbb2bfe2ac95ef",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 830,
        "y": 1060,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "5e3d37bdd2757ed9",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "str",
        "x": 830,
        "y": 1100,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "b13ad5cf6a6852bd",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 830,
        "y": 1140,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "bd64acc9def897df",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "6",
        "payloadType": "str",
        "x": 830,
        "y": 1180,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "999b668c76c81f37",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7",
        "payloadType": "str",
        "x": 830,
        "y": 1220,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "98cf88c0475421f6",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "str",
        "x": 830,
        "y": 1260,
        "wires": [
            [
                "775c8eee63dca358"
            ]
        ]
    },
    {
        "id": "89e4b9919938c243",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1020,
        "wires": []
    },
    {
        "id": "77fd03238735a5d9",
        "type": "exec",
        "z": "ab630f81cda33d8a",
        "command": "megabas 4 r10krd",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1110,
        "y": 1360,
        "wires": [
            [
                "a11d357e72c6a5ba"
            ],
            [],
            []
        ]
    },
    {
        "id": "5c3ca98707a22b5c",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 830,
        "y": 1320,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "04f03ba8271858cf",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 830,
        "y": 1360,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "f95413ace9462728",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3",
        "payloadType": "str",
        "x": 830,
        "y": 1400,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "36b70797a423eb83",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "str",
        "x": 830,
        "y": 1440,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "426eeeb73e130219",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 830,
        "y": 1480,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "d7c7f087b80978bc",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "6",
        "payloadType": "str",
        "x": 830,
        "y": 1520,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "045689e68f13c4af",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "7",
        "payloadType": "str",
        "x": 830,
        "y": 1560,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "738cac6d05e276db",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "8",
        "payloadType": "str",
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "77fd03238735a5d9"
            ]
        ]
    },
    {
        "id": "a11d357e72c6a5ba",
        "type": "debug",
        "z": "ab630f81cda33d8a",
        "name": "debug 53",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1360,
        "wires": []
    },
    {
        "id": "f96adb195ba27bd9",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in1 z4",
        "info": "",
        "x": 1450,
        "y": 300,
        "wires": []
    },
    {
        "id": "cf325838ab489fd8",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "str",
        "x": 830,
        "y": 680,
        "wires": [
            [
                "af311e9cb42b8824"
            ]
        ]
    },
    {
        "id": "1a6387c6515ab2f1",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in1 z7",
        "info": "",
        "x": 1450,
        "y": 640,
        "wires": []
    },
    {
        "id": "6fc99cabd7a30373",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in2 z6",
        "info": "",
        "x": 1450,
        "y": 680,
        "wires": []
    },
    {
        "id": "0c07d4a2dbb79323",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in1 z5",
        "info": "",
        "x": 1450,
        "y": 980,
        "wires": []
    },
    {
        "id": "23a770894dc44fd4",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in2 z3",
        "info": "",
        "x": 1450,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b83d141bc16196f5",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in3 z2",
        "info": "",
        "x": 1450,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2d76caeb230d12ae",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in4 z1",
        "info": "",
        "x": 1450,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2495fc9f1a24974f",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in1 z9",
        "info": "",
        "x": 1450,
        "y": 1320,
        "wires": []
    },
    {
        "id": "cce37f2918730339",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "in2 z8",
        "info": "",
        "x": 1450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c4e42fa53203529a",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "tv04 room 110",
        "info": "",
        "x": 650,
        "y": 300,
        "wires": []
    },
    {
        "id": "49865f2afd10b86e",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "room 110 fan 1 tv01 ",
        "info": "",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "6f127fa65874dfec",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "tv02 room 116?",
        "info": "",
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "0f5033a2473092f8",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "tv05 room 118",
        "info": "",
        "x": 650,
        "y": 1840,
        "wires": []
    },
    {
        "id": "247a25b81e01e815",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 110,
        "y": 1540,
        "wires": [
            [
                "d9d50e6b3ec5c576"
            ]
        ]
    },
    {
        "id": "51f7fce64a28ecdc",
        "type": "link in",
        "z": "ab630f81cda33d8a",
        "name": "link in 5",
        "links": [
            "3fbb1f5792a76031"
        ],
        "x": 245,
        "y": 1560,
        "wires": [
            [
                "7b145b182d411d5d"
            ]
        ]
    },
    {
        "id": "3fbb1f5792a76031",
        "type": "link out",
        "z": "ab630f81cda33d8a",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "51f7fce64a28ecdc",
            "70b5d55dab52a2fd",
            "02f63e600ad418af",
            "644066227afb8def",
            "de31e9edc073356c"
        ],
        "x": 985,
        "y": 1920,
        "wires": []
    },
    {
        "id": "9ec3a1a60bc6f1e9",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 850,
        "y": 1880,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "ac10bd3b3a5ce98d",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2.5",
        "payloadType": "str",
        "x": 850,
        "y": 2040,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "70b5d55dab52a2fd",
        "type": "link in",
        "z": "ab630f81cda33d8a",
        "name": "link in 6",
        "links": [
            "3fbb1f5792a76031"
        ],
        "x": 225,
        "y": 1820,
        "wires": [
            [
                "2273a19ab9ed5dc6"
            ]
        ]
    },
    {
        "id": "02f63e600ad418af",
        "type": "link in",
        "z": "ab630f81cda33d8a",
        "name": "link in 7",
        "links": [
            "3fbb1f5792a76031"
        ],
        "x": 235,
        "y": 780,
        "wires": [
            [
                "67c0b16cd90c4dff"
            ]
        ]
    },
    {
        "id": "644066227afb8def",
        "type": "link in",
        "z": "ab630f81cda33d8a",
        "name": "link in 8",
        "links": [
            "3fbb1f5792a76031"
        ],
        "x": 245,
        "y": 280,
        "wires": [
            [
                "997eaff2f592035c"
            ]
        ]
    },
    {
        "id": "de31e9edc073356c",
        "type": "link in",
        "z": "ab630f81cda33d8a",
        "name": "link in 9",
        "links": [
            "3fbb1f5792a76031"
        ],
        "x": 235,
        "y": 160,
        "wires": [
            [
                "87d94a70bf2460d3"
            ]
        ]
    },
    {
        "id": "43b82dabc24e8839",
        "type": "comment",
        "z": "ab630f81cda33d8a",
        "name": "All Fans",
        "info": "",
        "x": 840,
        "y": 1840,
        "wires": []
    },
    {
        "id": "bb653d9934679c07",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.5",
        "payloadType": "str",
        "x": 850,
        "y": 1920,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "ff452f4eb94c649c",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1.5",
        "payloadType": "str",
        "x": 850,
        "y": 2000,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "b172493dbc344a84",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "str",
        "x": 850,
        "y": 2080,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "8423c3ceb51b4f29",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 850,
        "y": 2120,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "08d7f4e4ce0723cd",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "str",
        "x": 90,
        "y": 1920,
        "wires": [
            [
                "2273a19ab9ed5dc6"
            ]
        ]
    },
    {
        "id": "0451ba836372e6e5",
        "type": "inject",
        "z": "ab630f81cda33d8a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 850,
        "y": 1960,
        "wires": [
            [
                "3fbb1f5792a76031"
            ]
        ]
    },
    {
        "id": "c4ae8968.68a538",
        "type": "heatwebNode",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "nodeConfig": "550ec543.b55bc4",
        "x": 1010,
        "y": 180,
        "wires": [
            [
                "e2a5359d.ef1ea"
            ]
        ]
    },
    {
        "id": "81452df3.f1e0b8",
        "type": "heatwebRemote",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "nodeConfig": "550ec543.b55bc4",
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "e2a5359d.ef1ea"
            ]
        ]
    },
    {
        "id": "6db74d6.e025e34",
        "type": "heatwebFilter",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "nodeConfig": "550ec543.b55bc4",
        "resetEvery": "60",
        "defaultGroup": "dat",
        "defaultPoints": "10",
        "deadband": "",
        "storeHistoricEx": false,
        "x": 370,
        "y": 180,
        "wires": [
            [
                "8b488cbb14b093cb",
                "5794e74d.4504f8",
                "de5cbb28.0bca7"
            ],
            [
                "f7abd73e.da268",
                "16d3ed6.1101e13",
                "6ed780fa.52d71",
                "5794e74d.4504f8"
            ]
        ]
    },
    {
        "id": "72fc070f.39dd8",
        "type": "link in",
        "z": "580bb6a3.5dc1d",
        "name": "handler",
        "links": [
            "0a7561544c78863d",
            "10ee4216045b7731",
            "1d8ef88d8c83d435",
            "26f1ad336f82aeeb",
            "32f9b18e.982aee",
            "392d126135d185ae",
            "776e329235ad88fd",
            "8ba892de82b9c853",
            "948513be7da72df9",
            "a3897f36b4cb5d73",
            "a42dd0bb6d88b4e4",
            "ae865c20.2fec3",
            "b3fa1a036ac9c0a6",
            "b49c3f37c8f9bebd",
            "ca1358f93e7b6dc8",
            "db32607d56940241",
            "e2a5359d.ef1ea",
            "e44a91c9.939dc",
            "e53bc655ccc539b5",
            "f35f2c270fa6bc6f",
            "c1ae9744bf19e44d",
            "a18f60048827448d",
            "aa267381c133a02f",
            "d23bba1bee66b785"
        ],
        "x": 205,
        "y": 180,
        "wires": [
            [
                "6db74d6.e025e34"
            ]
        ]
    },
    {
        "id": "e2a5359d.ef1ea",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1195,
        "y": 160,
        "wires": []
    },
    {
        "id": "5794e74d.4504f8",
        "type": "mqtt out",
        "z": "580bb6a3.5dc1d",
        "name": "No Retain",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 620,
        "y": 180,
        "wires": []
    },
    {
        "id": "f7abd73e.da268",
        "type": "switch",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/xnode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/set/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "json/sync",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/raw/",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 610,
        "y": 320,
        "wires": [
            [],
            [],
            [],
            [],
            [
                "adae7e8a.85a74"
            ]
        ]
    },
    {
        "id": "adae7e8a.85a74",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "mode": "link",
        "links": [
            "73d07a2516badbf4",
            "6167102f3b645906"
        ],
        "x": 735,
        "y": 340,
        "wires": []
    },
    {
        "id": "32f9b18e.982aee",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 455,
        "y": 480,
        "wires": []
    },
    {
        "id": "4a7b0367.1dda1c",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/net_1_ip4",
        "payloadType": "str",
        "x": 220,
        "y": 560,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "16d3ed6.1101e13",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 260,
        "wires": []
    },
    {
        "id": "10199216.12d03e",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/net_2_ip4",
        "payloadType": "str",
        "x": 220,
        "y": 600,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "db6ad2fe.19c03",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/mem_total",
        "payloadType": "str",
        "x": 220,
        "y": 640,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "68804932.313de8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/mem_free",
        "payloadType": "str",
        "x": 220,
        "y": 680,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "6ed780fa.52d71",
        "type": "switch",
        "z": "580bb6a3.5dc1d",
        "name": "Only Requests",
        "property": "mode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "request",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 420,
        "wires": [
            [
                "69cac137.62091"
            ]
        ]
    },
    {
        "id": "69cac137.62091",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 420,
        "wires": []
    },
    {
        "id": "ed00b81b.500ff8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/dat/#",
        "payloadType": "str",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "170c616c.8b5bef",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/fs_0_use",
        "payloadType": "str",
        "x": 220,
        "y": 720,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "ba62991c.c36168",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "400",
        "topic": "cmd/request",
        "payload": "local/+/+/system/#",
        "payloadType": "str",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "30eb37b6.547d88",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/upTime",
        "payloadType": "str",
        "x": 220,
        "y": 440,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "679a6694.f7bfc8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/upTimeH",
        "payloadType": "str",
        "x": 220,
        "y": 480,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "bb65f185.3adab",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "216000",
        "crontab": "",
        "once": true,
        "onceDelay": "180",
        "topic": "cmd/request",
        "payload": "local/+/+/+/os_hostname",
        "payloadType": "str",
        "x": 250,
        "y": 520,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "51318833.c258d8",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "36000",
        "crontab": "",
        "once": true,
        "onceDelay": "450",
        "topic": "cmd/request",
        "payload": "local/+/+/settings/#",
        "payloadType": "str",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "311e9db6.ba1b82",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "66c2e225.64a90c"
        ],
        "x": 735,
        "y": 140,
        "wires": []
    },
    {
        "id": "7109deeb.a22d3",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "900",
        "topic": "cmd/request",
        "payload": "local/+/+/cpu/#",
        "payloadType": "str",
        "x": 240,
        "y": 800,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "2dde7725.9f7118",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "254c663c.1890fa"
        ],
        "x": 735,
        "y": 100,
        "wires": []
    },
    {
        "id": "dd49d580.483498",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "USERS",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"admin\":{\"networks\":[{\"networkId\":\"local\",\"server\":\"192.168.0.250\",\"port\":8080,\"secure\":false,\"user\":\"admin\",\"password\":\"12345678\"}]},\"guest\":{\"networks\":[{\"networkId\":\"local\",\"server\":\"192.168.0.250\",\"port\":8080,\"secure\":false,\"user\":\"guest\",\"password\":\"guest\"}]}}",
        "payloadType": "json",
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "94ba0d3d.e77e1"
            ]
        ]
    },
    {
        "id": "94ba0d3d.e77e1",
        "type": "change",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "users",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8b488cbb14b093cb",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "bfed0a27b4c87767",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "about",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 520,
        "wires": [
            [
                "5591a77bf54b568e"
            ]
        ]
    },
    {
        "id": "fb19782f815bcb84",
        "type": "http response",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 520,
        "wires": []
    },
    {
        "id": "5591a77bf54b568e",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "func": "msg.payload = JSON.stringify({\"node\":global.get(\"node\"),\"networkId\":global.get(\"networkId\"),\"nodeDescription\":global.get(\"nodeDescription\"),\"nodeName\":global.get(\"nodeName\")})\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": [
            [
                "fb19782f815bcb84"
            ]
        ]
    },
    {
        "id": "ff28800e4bbba1c7",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "Clear Alarms & Sync",
        "func": "\n\n\n//for (var net in global.get(\"readings\")) {\nvar net = global.get(\"localNetworkId\");\n\n    for (var dev in global.get(\"readings.\"+net)) {\n    \n            if (global.get(\"readings.\"+net+\".\"+dev+\".alarm\")) {\n                \n                global.set(\"readings.\"+net+\".\"+dev+\".alarm\", {});\n                \n            }\n        \n    }\n    \n//}\n\nmsg.topic = \"cmd/sync\"\nmsg.payload = net + \"/#\";\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 300,
        "wires": [
            [
                "0a7561544c78863d"
            ]
        ]
    },
    {
        "id": "f8a586463e821247",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "ff28800e4bbba1c7"
            ]
        ]
    },
    {
        "id": "0a7561544c78863d",
        "type": "link out",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1345,
        "y": 300,
        "wires": []
    },
    {
        "id": "78d6fbafd103f379",
        "type": "ui_button",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 4,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Clear Alarms",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "cmd:clearalarms",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 990,
        "y": 280,
        "wires": [
            [
                "ff28800e4bbba1c7"
            ]
        ]
    },
    {
        "id": "0916c03a0c141250",
        "type": "inject",
        "z": "580bb6a3.5dc1d",
        "name": "local/+/+/+/cpu_currentload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "cmd/request",
        "payload": "local/+/+/+/cpu_currentload",
        "payloadType": "str",
        "x": 240,
        "y": 760,
        "wires": [
            [
                "32f9b18e.982aee"
            ]
        ]
    },
    {
        "id": "518305dd1d973895",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/api/readings/:vargroup",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 680,
        "y": 660,
        "wires": [
            [
                "1c09662af1958f62",
                "dd20e9fca3781c4c"
            ]
        ]
    },
    {
        "id": "1c09662af1958f62",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "Metrics",
        "func": "\nvar metrics = global.get(\"readings.local\") || {};\n\n\nvar net = global.get(\"networkId\") || \"local\";\n\nvar oot = { readings: [] };\n//oot = 'stat_state {network=\"local\", node=\"mynodered1\", device=\"prometheus\", vargroup=\"stat\", varkey=\"state\"} 1\\n';\n\nfor (var dev in metrics) {\n    for (var grp in metrics[dev]) {\n\n        if (msg.req.params.vargroup && grp != msg.req.params.vargroup) { continue; }\n\n        for (var m in metrics[dev][grp]) {\n\n            var tline = {};\n            if (metrics[dev][grp][m].topic) {\n\n                tline.value = metrics[dev][grp][m].value;\n                tline.time = metrics[dev][grp][m].timestamp;\n                tline.title = metrics[dev][grp][m].title || \"\";\n                tline.units = metrics[dev][grp][m].units || \"\";\n                tline.network = net;\n                tline.node = metrics[dev][grp][m].topic.split(\"/\")[1];\n                tline.device = dev;\n                tline.vargroup = grp;\n                tline.varkey = m;\n\n                if (msg.payload.select) {\n\n                    tline = tline[msg.payload.select];\n\n                    if (oot.readings.indexOf(tline) < 0) { oot.readings.push(tline); }\n\n                } else {\n\n                    oot.readings.push(tline);\n                }\n\n\n\n            }\n            //oot += tops[3] + '_' + tops[4] + '{network=\"' + net + '\",node=\"' + tops[1] + '\",device=\"' + tops[2] + '\",vargroup=\"' + tops[3] + '\",varkey=\"' + tops[4] + '\"} ' + metrics[m].payload + \"\\n\";\n        }\n    }\n}\n\nmsg.payload = oot;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "de79189b967c2492",
                "303547d4871dc1e6"
            ]
        ]
    },
    {
        "id": "f4cec4c48cb94a38",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/api/readings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 650,
        "y": 600,
        "wires": [
            [
                "1c09662af1958f62",
                "dc8557effbb07747"
            ]
        ]
    },
    {
        "id": "de79189b967c2492",
        "type": "http response",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 600,
        "wires": []
    },
    {
        "id": "303547d4871dc1e6",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 660,
        "wires": []
    },
    {
        "id": "7622ca4aa75d6b27",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/cmd",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 740,
        "wires": [
            [
                "37ee9ad397338449",
                "5fd1baeb1c818156"
            ]
        ]
    },
    {
        "id": "37ee9ad397338449",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "Metrics",
        "func": "msg.payload={\"data\":[{return:\"ok\"}]};\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 760,
        "wires": [
            [
                "859484ecdc7e8eff",
                "449a3389bd406444"
            ]
        ]
    },
    {
        "id": "859484ecdc7e8eff",
        "type": "http response",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 760,
        "wires": []
    },
    {
        "id": "5fd1baeb1c818156",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 720,
        "wires": []
    },
    {
        "id": "247724fd2c92998a",
        "type": "http in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "url": "/cmd",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 620,
        "y": 800,
        "wires": [
            [
                "37ee9ad397338449",
                "08df032ed7de4560"
            ]
        ]
    },
    {
        "id": "449a3389bd406444",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 800,
        "wires": []
    },
    {
        "id": "08df032ed7de4560",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 800,
        "wires": []
    },
    {
        "id": "dd20e9fca3781c4c",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 660,
        "wires": []
    },
    {
        "id": "2cc170705ae25adc",
        "type": "mqtt in",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "topic": "_/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 100,
        "wires": [
            [
                "8aa46b4ede182d15"
            ]
        ]
    },
    {
        "id": "8aa46b4ede182d15",
        "type": "change",
        "z": "580bb6a3.5dc1d",
        "name": "remove _/",
        "rules": [
            {
                "t": "change",
                "p": "topic",
                "pt": "msg",
                "from": "_/",
                "fromt": "str",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 100,
        "wires": [
            [
                "6db74d6.e025e34"
            ]
        ]
    },
    {
        "id": "de5cbb28.0bca7",
        "type": "switch",
        "z": "580bb6a3.5dc1d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/cmd/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/set/",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 610,
        "y": 120,
        "wires": [
            [],
            [
                "2dde7725.9f7118"
            ],
            [
                "311e9db6.ba1b82"
            ]
        ]
    },
    {
        "id": "dc8557effbb07747",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 560,
        "wires": []
    },
    {
        "id": "3a3e5a5957d64e95",
        "type": "mqtt in",
        "z": "580bb6a3.5dc1d",
        "d": true,
        "name": "",
        "topic": "+/+/+/dat/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5a15e08548d9c393",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "58301ca7c4696e37"
            ]
        ]
    },
    {
        "id": "58301ca7c4696e37",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 420,
        "wires": []
    },
    {
        "id": "69693e598ea4addc",
        "type": "mqtt out",
        "z": "580bb6a3.5dc1d",
        "name": "Central MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0a9a86a0d76f9647",
        "x": 1280,
        "y": 480,
        "wires": []
    },
    {
        "id": "ce8e3434b5f26c0e",
        "type": "function",
        "z": "580bb6a3.5dc1d",
        "name": "function 3",
        "func": "\nvar dataout = {};\nvar bits = msg.topic.split(\"/\");\ndataout.network = bits[0];\ndataout.node = bits[1];\ndataout.device = bits[2];\ndataout.vargroup = bits[3];\ndataout.varkey = bits[4];\ndataout.payload = msg.payload;\n\nmsg.payload = JSON.stringify(dataout);\n\nmsg.topic = \"heatweb/\" + global.get(\"node\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 480,
        "wires": [
            [
                "caf6cdd410538579",
                "69693e598ea4addc"
            ]
        ]
    },
    {
        "id": "caf6cdd410538579",
        "type": "debug",
        "z": "580bb6a3.5dc1d",
        "name": "debug 79",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 540,
        "wires": []
    },
    {
        "id": "6167102f3b645906",
        "type": "link in",
        "z": "580bb6a3.5dc1d",
        "name": "link in 5",
        "links": [
            "adae7e8a.85a74"
        ],
        "x": 985,
        "y": 480,
        "wires": [
            [
                "ce8e3434b5f26c0e"
            ]
        ]
    },
    {
        "id": "6af90896.407f38",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 730,
        "y": 700,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "562c9c07.d14df4",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "//if (!flow.get(\"selectedhiu\")) { return null; }\n//if (!global.get(\"readings.\" + flow.get(\"selectedhiu\"))) { return null; }\n\n\nvar icongreen = 'http://www.heatweb.co.uk/w/images/thumb/2/2a/Greenled.png/120px-Greenled.png'; \nvar iconred = 'http://www.heatweb.co.uk/w/images/thumb/3/39/Redled.png/120px-Redled.png'; \nvar icongrey = 'https://www.heatweb.co.uk/w/images/7/78/Greyled.png'; \nvar iconyellow = 'https://www.heatweb.co.uk/w/images/thumb/5/59/Yellowled.png/180px-Yellowled.png'; \n                        \nvar htmlt = '';\nvar filt = flow.get(\"filterdata\") || \"\";\n\nvar listout = [];\n\nvar defaultTopics = global.get(\"topics.default\") || {};\nvar datData = defaultTopics[\"dat\"] || {}; \n\nfor (var network in global.get(\"readings\")) { \n\n    for (var device in global.get(\"readings.\"+network)) { \n        \n        var htmlline = \"\";\n        var htmllineCount = 0;\n        var statStateLine = \"\";\n        \n        var hiudata = global.get(\"readings.\" + network + \".\" + device);\n        \n        \n        //flow.set(\"tempid\",hiudata.system.tempid);\n        \n        \n        var dicon=\"\";\n        \n        for (var key in hiudata) {\n            \n            if(key == flow.get(\"selecteddata\") || flow.get(\"selecteddata\")=='all' ) { \n            \n                var groupdata = hiudata[key];\n                \n                var typeData = defaultTopics[key] || {}; \n            \n                for (var gkey in groupdata) {\n                    \n                    var okline=1;\n                    \n                    if (gkey==\"nodeXXX\" || gkey==\"timestamp\") { okline=0; }\n                    \n                    if (key==\"json\")  { okline=0; }\n                    \n                    if (filt!==\"\") {\n                        \n                        var teststr = \" /\" + device + \"/\" + key + \"/\" + gkey + \"/\" + network + \"/\"  ;\n                        \n                        if (key==\"alarm\") {\n                            if(groupdata[gkey].value == 'ok' || groupdata[gkey].value == '0') {\n                                teststr += \"/green\";\n                            } else { \n                                teststr += \"/red\";\n                            }\n                            \n                        }\n                     \n                        \n                        if (teststr.indexOf(filt)<1) { okline=0; }\n                    }\n                    \n                    if (okline==1) {\n                        var icon = \"\";\n                        var iconsrc = \"\";\n                        if (key==\"alarm\") { \n                            \n                            if(groupdata[gkey].value == 'ok' || groupdata[gkey].value == '0') {\n                                \n                                iconsrc = icongreen;\n                            } else if(groupdata[gkey].value == 'off') {\n                                iconsrc = icongrey ; \n                            } else { \n                                iconsrc = iconred ; \n                            }\n                            icon=' <img height=\"12\" src=\"' + iconsrc + '\">'; \n                        }\n                        \n                        var gkeySh = gkey;\n                        //if (gkeySh.length>16) { gkeySh = gkeySh.substr(0,10) + \"..\" + gkeySh.substr(gkeySh.length-4); }\n                        \n                        //mm +=  '<md-button class=\"rounded myB\" ng-click=\"send({payload:' + \"'\" + m[mmm] + \"'\" + '})\">';\n                        \n                        var butts = \"\";\n                        //butts = '</td><td><span id=\"dbut' + key + '\" ng-click=\"send({payload:' + \"'\" + key + \"/\" + gkeySh + \"'\" + '})\">Graph</span>';\n                        \n                        //if (!isNaN(groupdata[gkey].value)) {\n                        var hasH = global.get(\"readingsHistory.\" + network + \".\" + device + \".\" + key + \".\" + gkey) || [];\n                        if (!isNaN(groupdata[gkey].value) && hasH[2]) {\n                            butts += '<td class=\"tdLS\" width=\"70\">';\n                            //butts += '<span class=\"smB\">';\n                            butts +=  '<md-button class=\"rounded myB thinB\" ng-click=\"send({payload:' + \"'\" + network + \".\" + device + \".\" + key + \".\" + gkeySh + \"'\" + '})\">';\n                            butts +=  \"Graph\";\n                            butts +=  '</md-button>';\n                            //butts +=  '</span>';\n                            butts +=  '</td>';\n                        } else {\n                            butts =  '<td class=\"tdLS\" width=\"70\"> </td>';\n                        }\n                        \n                        //htmllineAdd = '<tr><td>' + key + \" / \" + gkeySh + '</td><td align=\"right\">' + groupdata[gkey].value + icon + '</td></tr>';\n                        //htmllineAdd = '<table width=\"100%\"><tr><td>' + key + \" / \" + gkeySh + '</td><td align=\"right\">' + groupdata[gkey].value + icon + '</td><td> </td></tr></table>';\n                        htmllineAdd = '<table width=\"100%\"><tr><td>' + key + \" / \" + gkeySh + '</td><td align=\"right\">' + groupdata[gkey].value + icon  +'</td><td> </td>' + butts + '</tr></table>';\n\n                        htmlline += htmllineAdd\n                        if(key==\"stat\" && gkey==\"state\") { statStateLine = htmllineAdd; }\n                        htmllineCount++;\n                        \n                        \n                        \n                        var gkey2 = gkey.replace(\"Sensor\",\"\");\n                        var keyData = typeData[gkey2] || datData[gkey2] || {};\n                        \n                        var mytitle = keyData[\"title\"] || gkey;\n                        var units = keyData[\"units\"] || \"\";\n                        \n                        if ((gkey.indexOf(\"Sensor\")>0) && (mytitle.indexOf(\"Sensor\")<1)) { \n                            mytitle += \" sensor\"\n                            units = \"\";\n                        }\n                        \n                        if (!typeData[gkey2]) {  units = \"\"; }\n                        \n                        \n                        var moredes = device + \" / \" + key;\n                        \n                        \n                        if (keyData[\"title\"]) { moredes += \" / \" + gkey; }\n                        \n                        //var units = \"\";\n                        var mytopic =  groupdata[gkey].topic; //\"ihiu/\"+node+\"/\"+xx+\"/\"+k+\"/\"+kk;\n                        \n                        var newb={\n                            \"title\": \"<table cellpadding='0' width='100%'><tr><td><b>\" + mytitle + \"</b></td><td align='right'><big>\" + groupdata[gkey].value +  \" \"+ units + \"</big></td></tr></table>\",\n                            \"description\": \"<table cellpadding='0' width='100%'><tr><td>\" + moredes + \"</td><td width='60' align='center'></td></tr></table>\",\n                             \"topic\": mytopic\n                        };\n                        if (iconsrc!==\"\") { newb[\"icon\"] = iconsrc; } //else  { newb[\"icon_name\"] = \"fa-cog\"; }\n                           \n                        listout.push(newb);\n                        \n                    }\n                }\n        \n            }\n        }\n        \n        if(hiudata[\"stat\"]) {\n        if(hiudata[\"stat\"][\"state\"]){\n            if(hiudata[\"stat\"][\"state\"][\"value\"] == 'ok') {\n                dicon=' <img height=\"12\" src=\"' + icongreen + '\">'; \n            } else if(hiudata[\"stat\"][\"state\"][\"value\"] == 'on') {\n                dicon=' <img height=\"12\" src=\"' + icongreen + '\">'; \n            }  else if(hiudata[\"stat\"][\"state\"][\"value\"].indexOf('arning')>0) {\n                dicon=' <img height=\"12\" src=\"' + iconyellow + '\">'; \n            } else if(hiudata[\"stat\"][\"state\"][\"value\"] == 'alarm') {\n                dicon=' <img height=\"12\" src=\"' + iconred + '\">'; \n            } else { \n                dicon=' <img height=\"12\" src=\"' + icongrey + '\">'; \n            }\n            dicon = \"<b>\" + hiudata[\"stat\"][\"state\"][\"value\"] + \"</b>\" + dicon;\n        }\n        }\n        \n        if (htmlline!==\"\") {\n        \n            htmlt +=  '<table width=\"100%\"><tr><td><b>' + device + '</b></td><td align=\"right\">' + dicon + '</td></tr></table>';\n            \n            if(htmllineCount==1 && htmlline.indexOf(\"tat / state\")>0) { }\n            else {\n                \n                if(htmllineCount>1 && statStateLine!==\"\") { htmlline =  htmlline.replace(statStateLine,\"\"); }\n                htmlt +=   htmlline; \n                \n            }\n            \n            htmlt +=  '<hr />';\n        }\n    }\n}\n\nhtmlt = htmlt.replace(/Exchanger/g, \"\");\n\nhtmlt = htmlt.replace(\">st<\", \">State<\");\nhtmlt = htmlt.replace(\">fC<\", \">DHW Flow Rate [l/m]<\");\nhtmlt = htmlt.replace(\">tCo<\", \">DHW Output Temperature [C]<\");\nhtmlt = htmlt.replace(\">tH<\", \">Primary Flow Temp [C]<\");\nhtmlt = htmlt.replace(\">tHoDHW<\", \">Primary Rtn Temp DHW [C]<\");\nhtmlt = htmlt.replace(\">tHoCH<\", \">Primary Rtn Temp CH [C]<\");\nhtmlt = htmlt.replace(\">tHoDHW<\", \">Primary Rtn Temp DHW [C]<\");\nhtmlt = htmlt.replace(\">xDHW<\", \">Valve Position DHW<\");\nhtmlt = htmlt.replace(\">xCH<\", \">Valve Position CH<\");\nhtmlt = htmlt.replace(\">stat<\", \">Room Thermostat<\");\nhtmlt = htmlt.replace(\">dpH<\", \">Primary Diff Pressure [bar]<\");\nhtmlt = htmlt.replace(\">fHDHW<\", \">Primary Flow Rate DHW [l/m]<\");\nhtmlt = htmlt.replace(\">fHCH<\", \">Primary Flow Rate CH [l/m]<\");\nhtmlt = htmlt.replace(\">eT<\", \">Temp Error DHW [C]<\");\n\nhtmlt = htmlt.replace(\">TTdhw<\", \">Setpoint DHW [C]<\");\nhtmlt = htmlt.replace(\">eS<\", \">Error State<\");\nhtmlt = htmlt.replace(\">tCHo<\", \">CH Output Temp [C]<\");\nhtmlt = htmlt.replace(\">pCH<\", \">CH System Pressure [bar]<\");\nhtmlt = htmlt.replace(\">pump<\", \">CH Pump<\");\nhtmlt = htmlt.replace(\">vC<\", \">DHW Volume Total [ltr]<\");\n\n\n\nmsg.payload=htmlt;\n\nmsg2={}; msg2.payload = listout;\n\nreturn [msg,msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 700,
        "wires": [
            [
                "d9ed7968.b72af8"
            ],
            [
                "6b5c6225.dcc93c"
            ]
        ]
    },
    {
        "id": "d9ed7968.b72af8",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "datalist",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 620,
        "wires": [
            [
                "9e9cdb4c.9f6be8"
            ]
        ]
    },
    {
        "id": "6b5c6225.dcc93c",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1250,
        "y": 760,
        "wires": []
    },
    {
        "id": "2d561223.d9db6e",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "selecteddata",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 620,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "6789714f.99829",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filterdata",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "drilling",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 780,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "f6a36c6b.c8c3",
        "type": "delay",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "outputs": 1,
        "x": 870,
        "y": 500,
        "wires": [
            [
                "562c9c07.d14df4"
            ]
        ]
    },
    {
        "id": "38cd61a0.1cd1fe",
        "type": "rbe",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 1150,
        "y": 580,
        "wires": [
            [
                "d9ed7968.b72af8"
            ]
        ]
    },
    {
        "id": "9e9cdb4c.9f6be8",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "drilling",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1530,
        "y": 620,
        "wires": [
            [
                "282422b2.6aa76e"
            ]
        ]
    },
    {
        "id": "ed5f8555.f418e8",
        "type": "ui_dropdown",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Type",
        "group": "ee34b8ab.222b68",
        "order": 4,
        "width": "2",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "all",
                "type": "str"
            },
            {
                "label": "Alarms",
                "value": "alarm",
                "type": "str"
            },
            {
                "label": "Readings",
                "value": "dat",
                "type": "str"
            },
            {
                "label": "Statistics",
                "value": "stat",
                "type": "str"
            },
            {
                "label": "Settings",
                "value": "settings",
                "type": "str"
            },
            {
                "label": "System",
                "value": "system",
                "type": "str"
            },
            {
                "label": "Meters",
                "value": "meter",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 540,
        "y": 620,
        "wires": [
            [
                "2d561223.d9db6e"
            ]
        ]
    },
    {
        "id": "2513de4a.a661c2",
        "type": "ui_text_input",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "ee34b8ab.222b68",
        "order": 5,
        "width": "2",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 560,
        "y": 780,
        "wires": [
            [
                "6789714f.99829"
            ]
        ]
    },
    {
        "id": "282422b2.6aa76e",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "template",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1690,
        "y": 620,
        "wires": [
            [
                "193e14fb.d6a80b"
            ]
        ]
    },
    {
        "id": "76bee7.e09ff118",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "all",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "drilling",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 560,
        "wires": [
            [
                "ed5f8555.f418e8"
            ]
        ]
    },
    {
        "id": "adfe6cac.8c846",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "setGroup",
        "links": [
            "d18c9773.2bb088"
        ],
        "x": 355,
        "y": 620,
        "wires": [
            [
                "ed5f8555.f418e8"
            ]
        ]
    },
    {
        "id": "ab8cb03b.d70f3",
        "type": "ui_dropdown",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Device",
        "group": "ee34b8ab.222b68",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "All",
                "value": "",
                "type": "str"
            },
            {
                "label": "Alarms",
                "value": "/red",
                "type": "str"
            },
            {
                "label": "State",
                "value": "state",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "x": 560,
        "y": 840,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "504e8408.6f0e6c",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "shuffle",
        "payload": "stat/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 760,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "8a3813c5.ed4c",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "group": "ee34b8ab.222b68",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "ALL",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 680,
        "wires": [
            [
                "76bee7.e09ff118",
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "d57b221e.46366",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "name": "alarms",
        "group": "ee34b8ab.222b68",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": true,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "warning",
        "payload": "alarm",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 340,
        "y": 720,
        "wires": [
            [
                "ed5f8555.f418e8"
            ]
        ]
    },
    {
        "id": "c988811f.23218",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 3,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "flag",
        "payload": "/system",
        "payloadType": "str",
        "topic": "",
        "x": 353.0833282470703,
        "y": 804.0833435058594,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "9a659cee.6305e",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 4,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-thermometer-half",
        "payload": "dat/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 840,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "8e362fbc.2801",
        "type": "ui_button",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "name": "",
        "group": "8ef017d0.9a0628",
        "order": 5,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "fa-thermometer-half",
        "payload": "settings/",
        "payloadType": "str",
        "topic": "",
        "x": 350,
        "y": 880,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "220e2954.01e376",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "setFilter",
        "links": [
            "9b2ec796.e88cf8"
        ],
        "x": 555,
        "y": 720,
        "wires": [
            [
                "2513de4a.a661c2"
            ]
        ]
    },
    {
        "id": "193e14fb.d6a80b",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "43af1847.935fd8",
        "name": "rout",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<br><div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1890,
        "y": 620,
        "wires": [
            [
                "d876816a.e2244",
                "68fce0f6.7193f"
            ]
        ]
    },
    {
        "id": "ffc2f769.631ac8",
        "type": "trigger",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 540,
        "y": 920,
        "wires": [
            [
                "ab8cb03b.d70f3"
            ]
        ]
    },
    {
        "id": "d876816a.e2244",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2110,
        "y": 620,
        "wires": []
    },
    {
        "id": "68fce0f6.7193f",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "//msg.payload = \"http://localhost/index.php?page=Graph&height=350&show=\"+msg.payload;\nmsg.payload = \"cmd:graph:\"+msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1880,
        "y": 720,
        "wires": [
            [
                "ba5f5516.919e68"
            ]
        ]
    },
    {
        "id": "b1160ab2.4def48",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<br><div ng-bind-html=\"msg.payload\"></div> ",
        "output": "str",
        "x": 1680,
        "y": 680,
        "wires": [
            [
                "193e14fb.d6a80b"
            ]
        ]
    },
    {
        "id": "83178f3c.8e09d",
        "type": "rbe",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 750,
        "y": 980,
        "wires": [
            [
                "ffc2f769.631ac8"
            ]
        ]
    },
    {
        "id": "ba5f5516.919e68",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "906024b7.9e3e48",
            "96558a40.5d4f48"
        ],
        "x": 1975,
        "y": 720,
        "wires": []
    },
    {
        "id": "9c3bb7a5.4d7a58",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "DROPDOWN",
        "func": "msg.options  = [ {\"All\":\"/\"}, {\"Alarms\":\"/red\"} ];\n\nfor (var network in global.get(\"readings\")) { \n\n    var lineout = {};\n    lineout[network.replace(\"_\", \" \")] = \"/\" + network + \"/\";\n    msg.options.push(lineout);\n\n}\n\nfor (network in global.get(\"readings\")) { \n\n    for (var device in global.get(\"readings.\"+network)) { \n\n        lineout = {};\n        lineout[device] = \"/\" + device + \"/\";\n        msg.options.push(lineout);\n    \n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 980,
        "wires": [
            [
                "83178f3c.8e09d"
            ]
        ]
    },
    {
        "id": "e5c3fb8b.944008",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 980,
        "wires": [
            [
                "9c3bb7a5.4d7a58"
            ]
        ]
    },
    {
        "id": "562969d9.1acd48",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "history",
        "func": "var gdat0 = {\"series\":[],\"data\":[]};\n\nvar gtype = msg.payload;\nvar selectedGraph=\",\";\nvar sd = global.get(\"standardGraph\") || \"\";\n\nif (msg.payload.substr(0,6)==\"graph:\") {\n    \n    gtype = \"graphall\";\n    sd = msg.payload.substr(6);\n} \n\n\n\n\n\nfor (var lin in sd.split(\",\")) {\n    \n    var dothis = 1;\n    var ln = sd.split(\",\")[lin];\n    \n    if (gtype!==\"graphall\") {\n        \n        var lns = ln.split(\".\")[3];\n        if(gtype==\"grapht\" && lns.substr(0,1)!=\"t\" && lns.substr(0,1)!=\"T\") { dothis = 0; continue;}\n        else if(gtype==\"graphp\" && lns.substr(0,1)!=\"p\") { dothis = 0; continue;}\n        else if(gtype==\"graphf\" && lns.substr(0,1)!=\"f\") { dothis = 0; continue;}\n        else if(gtype==\"graphkwh\" && lns.substr(0,3)!=\"kwh\") { dothis = 0; continue;}\n        else if(gtype==\"graphkw\" && (lns.substr(0,2)!=\"kw\" || lns.substr(0,3)==\"kwh\")) { dothis = 0; continue;}\n        \n    }\n    \n    if (dothis==1) {\n        \n        selectedGraph += \",\" + ln.split(\".\")[3] + \",\";\n        \n        var dat = global.get(\"readingsHistory.\" + ln) || {};\n        \n        var itemData = [];\n        for (var readin in dat) {\n            \n            itemData.push({\"x\":dat[readin].timestamp, \"y\":dat[readin].value});\n            \n        }\n        \n        gdat0.series.push(ln.split(\".\")[3]);\n        gdat0.data.push(itemData);\n    }\n    \n}\n\nmsg.payload = [];\nmsg.payload.push(gdat0);\n\n\nglobal.set(\"selectedGraph\",selectedGraph);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1980,
        "wires": [
            [
                "10c3f765.254dd9"
            ]
        ]
    },
    {
        "id": "f4f1c704.705e38",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "poweroff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reboot",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "screenoff",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cleargraph",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "graph",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "32b356c.727daaa"
            ],
            [
                "4b53ff20.944ec"
            ],
            [
                "5c85c22a.9dd31c"
            ],
            [
                "23bec7e3.287aa8"
            ],
            [
                "562969d9.1acd48",
                "1fbc21a0.42a4de"
            ]
        ]
    },
    {
        "id": "10c3f765.254dd9",
        "type": "ui_chart",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "group": "31ddf4e3.0519dc",
        "order": 0,
        "width": "12",
        "height": "7",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1030,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "7106c32a.f7fbdc",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1980,
        "wires": [
            [
                "562969d9.1acd48"
            ]
        ]
    },
    {
        "id": "c797794c.dd6478",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "if((flow.get(\"screenon\")||\"1\")!=\"1\") { flow.set(\"screenon\",\"1\"); return null; }\n\n\nif ((\" \"+msg.payload).indexOf(\"cmd:\")==1) {\n    \n    msg2={};\n    msg2.payload = msg.payload.substr(4);\n    \n    return [null,null,msg2,msg];\n    \n} else if (((\" \"+msg.payload).indexOf(\"http\")==1) || ((\" \"+msg.payload).indexOf(\"dashboard.php\")==1)) {\n    \n    msg2={};\n    msg2.payload = msg.payload;\n    \n    msg.payload = \"Browser\";\n    \n    return [msg,msg2,null,msg];\n    \n} else {\n\n    return [msg,null,null,msg];\n\n}",
        "outputs": 4,
        "noerr": 0,
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "330fb08c.56046"
            ],
            [
                "157ff427.90adac"
            ],
            [
                "66bd8c8e.5bb634",
                "f4f1c704.705e38"
            ],
            [
                "f4a2cb0e.cc71e8",
                "93aa8803.d762d8"
            ]
        ]
    },
    {
        "id": "32b356c.727daaa",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to shut down?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1520,
        "wires": [
            [
                "efbdf53c.f17388"
            ]
        ]
    },
    {
        "id": "4b53ff20.944ec",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to reboot?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 1580,
        "wires": [
            [
                "3c8aa46a.228a1c"
            ]
        ]
    },
    {
        "id": "5c85c22a.9dd31c",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "export DISPLAY=:0; sleep 1; xset dpms force off",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 940,
        "y": 1640,
        "wires": [
            [
                "857d0ead.0eefc"
            ],
            [],
            []
        ]
    },
    {
        "id": "23bec7e3.287aa8",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "cleargraph",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 1920,
        "wires": [
            [
                "10c3f765.254dd9"
            ]
        ]
    },
    {
        "id": "66c2e225.64a90c",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "7d2dded9.2db22",
            "abe9ca55.20fc08",
            "311e9db6.ba1b82"
        ],
        "x": 535,
        "y": 2100,
        "wires": [
            [
                "808dfefa.ca41b",
                "eb2a6826.ed1f08"
            ]
        ]
    },
    {
        "id": "23c9b825.020758",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 850,
        "y": 1880,
        "wires": [
            [
                "10c3f765.254dd9"
            ]
        ]
    },
    {
        "id": "330fb08c.56046",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "f89813e8.cbd968",
            "27dd3d5e.5e27e2"
        ],
        "x": 575,
        "y": 1360,
        "wires": []
    },
    {
        "id": "157ff427.90adac",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "browser",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<style>\n    .maxsiz {\n\n    width: 100%; \n    height: 100%;\n\n}\n</style>\n<iframe class=\"maxsiz\" frameborder=\"0\" src=\"{{{payload}}}\"></iframe>",
        "output": "str",
        "x": 620,
        "y": 1400,
        "wires": [
            [
                "8382fe3d.011db"
            ]
        ]
    },
    {
        "id": "66bd8c8e.5bb634",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 1440,
        "wires": []
    },
    {
        "id": "f4a2cb0e.cc71e8",
        "type": "trigger",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "7",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 270,
        "y": 1620,
        "wires": [
            [
                "f0465a90.803e88"
            ]
        ]
    },
    {
        "id": "93aa8803.d762d8",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 290,
        "y": 1580,
        "wires": []
    },
    {
        "id": "96558a40.5d4f48",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "gomenu",
        "links": [
            "ba5f5516.919e68",
            "8bd72823.48ffa8"
        ],
        "x": 195,
        "y": 1400,
        "wires": [
            [
                "c797794c.dd6478"
            ]
        ]
    },
    {
        "id": "efbdf53c.f17388",
        "type": "ui_toast",
        "z": "9ad9f74f.55ef58",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 1520,
        "wires": [
            [
                "203458a8.c15748"
            ]
        ]
    },
    {
        "id": "3c8aa46a.228a1c",
        "type": "ui_toast",
        "z": "9ad9f74f.55ef58",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1010,
        "y": 1580,
        "wires": [
            [
                "5fd2a71f.e1c788"
            ]
        ]
    },
    {
        "id": "857d0ead.0eefc",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "screenon",
                "pt": "flow",
                "to": "0",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 1640,
        "wires": [
            [
                "994bf91b.a564b8"
            ]
        ]
    },
    {
        "id": "8382fe3d.011db",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "e2be1f54.b5e92"
        ],
        "x": 715,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f0465a90.803e88",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "screenon",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "203458a8.c15748",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 1520,
        "wires": [
            [
                "5b96ed94.afa714"
            ]
        ]
    },
    {
        "id": "5fd2a71f.e1c788",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 1580,
        "wires": [
            [
                "33c0b5f6.2b7a9a"
            ]
        ]
    },
    {
        "id": "5b96ed94.afa714",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1340,
        "y": 1520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "33c0b5f6.2b7a9a",
        "type": "link out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "b8d3b38a.4c844"
        ],
        "x": 1255,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6b4903b4.fc142c",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "all",
        "x": 560,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "1fbc21a0.42a4de",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Graph",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1900,
        "wires": [
            [
                "6b4903b4.fc142c"
            ]
        ]
    },
    {
        "id": "a004a982.0cc798",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "d": true,
        "group": "ee34b8ab.222b68",
        "name": "Virtual Keyboard",
        "order": 6,
        "width": "4",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button style=\"display:none\" class=\"VK\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 320,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "808dfefa.ca41b",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "pass graph",
        "func": "// var inv = msg.payload;\n\n// msg.payload = inv.value;\n\n// if (!inv.topic.split(\"/\")[4]) { return null; }\n\nmsg.topic = msg.topic.split(\"/\")[4];\n\n\nvar selectedGraph = global.get(\"selectedGraph\") || \"\";\n\nif (selectedGraph.indexOf(\",\"+msg.topic+\",\")<1) { return null; }\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2100,
        "wires": [
            [
                "10c3f765.254dd9",
                "eb2a6826.ed1f08"
            ]
        ]
    },
    {
        "id": "eb2a6826.ed1f08",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 2200,
        "wires": []
    },
    {
        "id": "ccbb20ec.44a33",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "export DISPLAY=:0; sleep 1; xset dpms force on",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 600,
        "y": 1280,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bf3b2876.73db98",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1280,
        "wires": [
            [
                "ccbb20ec.44a33"
            ]
        ]
    },
    {
        "id": "f8df0f4c.e553c",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 1740,
        "wires": [
            [
                "5c85c22a.9dd31c"
            ]
        ]
    },
    {
        "id": "63f5f1b4.29d7f",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "600",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 1780,
        "wires": [
            [
                "5c85c22a.9dd31c"
            ]
        ]
    },
    {
        "id": "994bf91b.a564b8",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "all",
        "x": 1300,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "ddb3413d.f5131",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "d57b221e.46366"
            ]
        ]
    },
    {
        "id": "b97bc1c0.cb899",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "c982fbb8.1deb38",
        "name": "Clock Toolbar",
        "order": 2,
        "width": "0",
        "height": "0",
        "format": " \n<script>\n    (function(scope) {\n        console.log('Position 1');\n        console.dir(scope);\n        console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            console.log('Position 2');\n            console.dir(data);\n            alert(data);\n        });\n    })(scope);\n</script>\n\n<script id=\"titleScript\" type=\"text/javascript\">\n\n\n$(function() {\n    if($('.md-toolbar-tools').length != 0){\n        loadClock();\n    }else setTimeout(loadClock, 500)\n});\n\nvar instr = \"\";\n\nfunction loadClock(){\n    $('#clock').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<p/ id=\"clock\">');\n    \n    \n    \n    div.append(p);\n    div[0].style.margin = '5px 5px 5px auto';\n    div[0].style.fontSize = '18px';\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n    \n    function upTime() {\n        var d = new Date();\n        p.html(d.toLocaleString('en-GB') + (instr||\"\"));\n    }\n\n    if(document.clockInterval){ \n            clearInterval(document.clockInterval);\n            document.clockInterval = null;\n    }\n        \n    document.clockInterval = setInterval(upTime,1000);\n    \n    \n}\n\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 1160,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5f220091.bf4cf",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "ca932fda.09d3",
            "c03b2ad5.8e8478"
        ],
        "x": 195,
        "y": 560,
        "wires": [
            [
                "76bee7.e09ff118",
                "2513de4a.a661c2",
                "b0b3904d.3e833"
            ]
        ]
    },
    {
        "id": "43e007fe.38ff38",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "all",
        "x": 540,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b0b3904d.3e833",
        "type": "change",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Readings",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 500,
        "wires": [
            [
                "43e007fe.38ff38"
            ]
        ]
    },
    {
        "id": "9a783cd.aa426c",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 80,
        "wires": []
    },
    {
        "id": "8e10d78d.1bb458",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1310,
        "y": 80,
        "wires": [
            [
                "ec484785.877f98"
            ]
        ]
    },
    {
        "id": "ec484785.877f98",
        "type": "exec",
        "z": "9ad9f74f.55ef58",
        "command": "chromium-browser --start-fullscreen --kiosk --incognito --noerrdialogs --disable-translate --no-first-run --fast --fast-start --disable-infobars --disable-features=TranslateUI --disk-cache-dir=/dev/null  --password-store=basic --disable-pinch --overscroll-history-navigation=disabled --disable-features=TouchpadOverscrollHistoryNavigation 'http://localhost:1880/ui'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "chromium-browser",
        "x": 1490,
        "y": 80,
        "wires": [
            [
                "9a783cd.aa426c"
            ],
            [
                "9a783cd.aa426c"
            ],
            []
        ]
    },
    {
        "id": "a6df218d.b650f",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "c982fbb8.1deb38",
        "name": "Fonts",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto\">\n<!--<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lato\">-->\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 530,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9d2f9b63.8f9228",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\n<script>\n    (function(scope) {\n        console.log('Position 1');\n        console.dir(scope);\n        console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            console.log('Position 2');\n            console.dir(data);\n            alert(data);\n        });\n    })(scope);\n</script>\n\n<script id=\"titleScript\" type=\"text/javascript\">\n\n\n$(function() {\n    if($('.md-toolbar-tools').length != 0){\n        loadClock();\n    }else setTimeout(loadClock, 500)\n});\n\nvar instr = \"\";\n\nfunction loadClock(){\n    $('#clock').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<p/ id=\"clock\">');\n    \n    \n    \n    div.append(p);\n    div[0].style.margin = '5px 5px 5px auto';\n    div[0].style.fontSize = '18px';\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n    \n    function upTime() {\n        var d = new Date();\n        p.html(d.toLocaleString() + (instr||\"\"));\n    }\n\n    if(document.clockInterval){ \n            clearInterval(document.clockInterval);\n            document.clockInterval = null;\n    }\n        \n    document.clockInterval = setInterval(upTime,1000);\n    \n    \n}\n\n\n\n\n</script>\n",
        "output": "str",
        "x": 960,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "58390734.6e09a8",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "",
        "output": "str",
        "x": 700,
        "y": 280,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "26b0c09f.0e9e2",
        "type": "link in",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "links": [
            "586160b5.d6aa"
        ],
        "x": 195,
        "y": 340,
        "wires": [
            [
                "4afbfbee.74b4d4",
                "444f8e15b3e99d1a"
            ]
        ]
    },
    {
        "id": "8e16bcc.c4a414",
        "type": "switch",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "25",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "50",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "75",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 530,
        "y": 340,
        "wires": [
            [
                "58390734.6e09a8"
            ],
            [
                "54605462.01740c"
            ],
            [
                "8ea6bdbf.b18c1"
            ],
            [
                "38a7a1a.5f0775e"
            ],
            [
                "9aaea10.1c61d6"
            ]
        ]
    },
    {
        "id": "54605462.01740c",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"15\"><rect x=\"7\" y=\"11\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 320,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "90a5a2d9.4144b",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"15\"><rect x=\"0\" y=\"0\" width=\"5\" height=\"15\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"8\" y=\"5\" width=\"5\" height=\"10\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 920,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8ea6bdbf.b18c1",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"15\"><rect x=\"7\" y=\"11\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"14\" y=\"7\" width=\"5\" height=\"8\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 360,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "38a7a1a.5f0775e",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"20\" height=\"16\"><rect x=\"0\" y=\"12\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"7\" y=\"8\" width=\"5\" height=\"8\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"14\" y=\"4\" width=\"5\" height=\"12\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 400,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "9aaea10.1c61d6",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "field": "icons",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<svg width=\"28\" height=\"16\"><rect x=\"0\" y=\"12\" width=\"5\" height=\"4\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"7\" y=\"8\" width=\"5\" height=\"8\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"14\" y=\"4\" width=\"5\" height=\"12\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /><rect x=\"21\" y=\"0\" width=\"5\" height=\"16\" style=\"fill:rgb(222,222,222);stroke-width:0;stroke:rgb(0,0,0)\" /></svg>",
        "output": "str",
        "x": 700,
        "y": 440,
        "wires": [
            [
                "6bdfe8ca.9acdc8"
            ]
        ]
    },
    {
        "id": "4afbfbee.74b4d4",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 400,
        "wires": []
    },
    {
        "id": "4a529116.59c24",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 260,
        "wires": []
    },
    {
        "id": "142dae9.49d4751",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "3d9e45e.bcd50ba",
        "name": "Dashboard stylesheet",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n.invisible {\n    display: none;\n}\n\n.dot {\n    height: 13px;\n    width: 13px;\n    background-color: rgb(52, 58, 52);\n    border-radius: 20%;\n    border: 2px;\n    border-color: rgb(5, 5, 20);\n    display: inline-block;\n}\n\n.maxsiz {\n    position: absolute;\n    top:0;\n    left:0;\n    width: 100%;\n    height: 100vh;\n}\n\n/* SCROLL BAR */\n/* width */\n::-webkit-scrollbar {\n  width: 12px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px grey; \n  border-radius: 6px;\n}\n \n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: #3037e8; \n  border-radius: 6px;\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #3037e8; \n}\n\n\n.nr-dashboard-theme .nr-dashboard-form {    \n    overflow: hidden;\n    \n}\n\n.nr-dashboard-theme .nr-dashboard-form-button {\n    \n    max-height: 40px;\n}\n\n.padd {\n    \n    padding: 10px;\n    padding-top: 10px;\n}\n\na {\n    color: #97b1eb;\n    text-decoration: none;\n    font-size: large;\n}\n    \n/*\nIt is reasnoble to declare the colors as CSS variables\nso they can be easily called by name where needed.\n\nYou can see that in many places the variables are not used. Change it!\n*/\n\n:root {\n  --color-green-primary: rgb(51, 204, 51);\n  --color-green-secondary: rgb(26, 101, 26);\n  --color-red-primary: rgb(255, 0, 0);\n  --color-red-secondary: rgba(153,0,0,1);\n  --color-gray-primary:rgba(40,40,40,1);\n  --color-gray-secondary:rgba(65,65,65,1);\n  --color-text-primary: rgb(230, 226, 209);\n  --color-widget-border: rgb(84, 78, 78);\n}\n\n/*\nAll CSS adjustments are commented out.\nTurn rules on one by one and see the changes.\nDon't use too many elements cos it wil be confusing\nStart with simple elements like text, slider or button\n\nMany of elements like buttons have states, \nthose rules must be found and adjusted also.\n*/\n\n.nr-dashboard-textinput md-input-container .md-input {\n    text-align: right;\n}\n\n\nmd-list-item {\n    min-height: 40px;\n    height: 40px;\n}\n.masonry-container {\n    position: relative;\n    width: 100%;\n    height:100%;\n    margin: 0 auto;\n    background: rgb(255,0,0);\n    background: linear-gradient(180deg,  var(--color-gray-primary) 0%, var(--color-gray-secondary) 100%);\n}\n\n.nr-dashboard-gauge-titlel {\n    padding-top: 8px;\n}\n\n.nr-dashboard-cardcontainer {\n    position: relative;\n    box-shadow: inset 0px 1px 4px 0px #000000bb;\n    border-radius: 15px;\n}\n\n\n \n.nr-dashboard-theme ui-card-panel {\n    background-color: #33333300;\n    color:var(--color-text-primary);\n    border-radius: 15px;\n    box-shadow: 0 0 8px 0px #00000080;\n}\n\n\n \nbody.nr-dashboard-theme md-content md-card {\n    background-color: #33333300;\n    color: var(--color-text-primary);\n    text-shadow: 4px 2px 4px #00000045;\n    box-shadow: 0 -1px 5px 1px #00000045;\n    border-radius: 8px;\n    border: 1px solid var(--color-widget-border);\n    padding-top: 0px;\n}\n \n\n\n\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: var(--color-text-primary);\n}\n\n\n\n\n.md-button {\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    min-height: 36px;\n    min-width: 88px;\n    line-height: 36px;\n    vertical-align: middle;\n    align-items: center;\n    text-align: center;\n    border-radius: 8px;\n    box-sizing: border-box;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    outline: none;\n    border: 0;\n    padding: 0 6px;\n    margin: 6px 8px;\n    background: transparent;\n    color:var(--color-text-primary);\n    white-space: nowrap;\n    text-transform: uppercase;\n    font-weight: 500;\n    font-size: 14px;\n    font-style: inherit;\n    font-variant: inherit;\n    font-family: inherit;\n    text-decoration: none;\n    overflow: hidden;\n    transition: box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1);\n}\n\n\n\n/*\n.nr-dashboard-theme .nr-dashboard-button .md-button {\n    background-color: #88888800;\n    color:var(--color-text-primary);\n}\n*/\n\n/*\n.nr-dashboard-theme .nr-dashboard-button .md-button:hover {\n    background-color: #88888855;\n}\n*/\n\n\n/*\nmd-slider .md-thumb {\n    z-index: 1;\n    position: absolute;\n    left: -10px;\n    top: 14px;\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    -webkit-transform: scale(.7);\n    transform: scale(.7);\n    transition: all .4s cubic-bezier(.25,.8,.25,1);\n    box-shadow: 0 0 6px #00000070;\n}\n\n*/\n\n/*\nAdvanced stuff - dynamic change of card CSS\n\nClasses here can be used to make colored stripe at the top of card\nUsage is not in here, but they are added to md-card when needed within another template\n\n.carderr {\n    background: rgb(255,0,0);\n    background: linear-gradient(180deg, var(--color-red-primary) 0px, var(--color-red-secondary) 3px, rgba(80,80,80,1) 4px, rgba(45,45,45,1) 100%);\n}\n.cardok {\n    background: rgb(39,255,0);\n    background: linear-gradient(180deg, var(--color-green-primary) 0px, var(--color-green-secondary) 3px, rgba(70,70,70,1) 4px, rgba(40,40,40,1) 100%);\n}\n*/\n\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6bdfe8ca.9acdc8",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "func": "\nif (msg.payload==-1) { msg.payload = \" \"; } \nelse { msg.payload = \" \" + msg.icons + \"<small> LTE</small> \"; }\n\n\nvar states = global.get(\"states\") || {};\nfor (var d in states) {\n    \n    msg.payload += '&nbsp;<span class=\"dot\" style=\"background-color: ' + states[d][\"colour\"] + ';\"></span>';  \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 300,
        "wires": [
            [
                "ca5e7262b706a5c5"
            ]
        ]
    },
    {
        "id": "f8e46140.ea35",
        "type": "ui_template",
        "z": "9ad9f74f.55ef58",
        "group": "e6210b42.32c588",
        "name": "Browser Template",
        "order": 0,
        "width": "12",
        "height": "7",
        "format": "<br>\n<p>To return to this screen from any opened window, drag the screen to the right.</p>\n<br>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "padd",
        "x": 910,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "1ac2bb60.571305",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "nodeId",
                "v": "node",
                "vt": "global"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "f05a78b8.3b4008"
            ]
        ]
    },
    {
        "id": "b68d58a9.a159e8",
        "type": "template",
        "z": "9ad9f74f.55ef58",
        "name": "Browser Links",
        "field": "template",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<br>\n<p>To return to this screen from any opened window, drag the screen from left to right.</p>\n<br><br>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshat1.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none\">Temperature Inputs</a>\n<br>\n<p>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatfr.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none\">Flow & Return Temperatures</a> \n&nbsp;\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatfr2.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none&bg=hip-square.png\">Values Only</a>\n&nbsp;\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatfr3.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none&bg=hip-square.png\">Colour</a>\n</p><br>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/bmshatdp.svg&show=local///dat/,local///ntc/,local///stat/&update=5&network=local&idlist={{nodeId}}&zoom=none\">Differential Pressure & Temperatures</a>\n</p><br>\n<a  href=\"http://admin:admin@localhost:8000/dashboard/view?svg=/files/svg/twinplatehiu.svg&show=local//{{hiuId}}//&update=5&network=local&idlist={{hiuId}}&zoom=none\">HIU Dashboard</a>\n</p><br>\n<a  href=\"http://localhost:3000/d/HLgkuSNVk/start?orgId=1&kiosk\">Grafana</a>",
        "output": "str",
        "x": 660,
        "y": 1100,
        "wires": [
            [
                "f8e46140.ea35",
                "c0e2230c.a95e7"
            ]
        ]
    },
    {
        "id": "f05a78b8.3b4008",
        "type": "function",
        "z": "9ad9f74f.55ef58",
        "name": "Find HIU",
        "func": "\nmsg.hiuId=global.get(\"node\");\n\nvar n = global.get(\"localNetworkId\") ;\n    \n    for (var dev in global.get(\"readings.\"+n)) {\n        \n        var dt = global.get(\"readings.\"+n+\".\"+dev+\".system.deviceType.value\") || \"\";\n        \n        if (dt.toLowerCase().indexOf(\"hiu\")>-1) { msg.hiuId = dev;  break;}\n    }\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1100,
        "wires": [
            [
                "b68d58a9.a159e8"
            ]
        ]
    },
    {
        "id": "c0e2230c.a95e7",
        "type": "debug",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1140,
        "wires": []
    },
    {
        "id": "82ce3805.6ac268",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 180,
        "wires": [
            [
                "9d2f9b63.8f9228"
            ]
        ]
    },
    {
        "id": "93890c7b.ea7f3",
        "type": "ui_ui_control",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "events": "connect",
        "x": 780,
        "y": 120,
        "wires": [
            [
                "9d2f9b63.8f9228"
            ]
        ]
    },
    {
        "id": "444f8e15b3e99d1a",
        "type": "trigger",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 350,
        "y": 340,
        "wires": [
            [
                "8e16bcc.c4a414"
            ]
        ]
    },
    {
        "id": "8885dd34240c9d6f",
        "type": "inject",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-1",
        "payloadType": "num",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "444f8e15b3e99d1a"
            ]
        ]
    },
    {
        "id": "ca5e7262b706a5c5",
        "type": "mqtt out",
        "z": "9ad9f74f.55ef58",
        "name": "",
        "topic": "html/headerIcons",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1190,
        "y": 300,
        "wires": []
    },
    {
        "id": "3e283cd4.ba17d4",
        "type": "comment",
        "z": "c376bc72122fb9a2",
        "name": "INTERNET CONNECTIN WATCHDOG",
        "info": "",
        "x": 230,
        "y": 160,
        "wires": []
    },
    {
        "id": "9abe6fd2.97b23",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "mode": "link",
        "links": [
            "24ebaea5.b9caa2"
        ],
        "x": 1025,
        "y": 560,
        "wires": []
    },
    {
        "id": "bb5d90aa9b8b8de4",
        "type": "inject",
        "z": "c376bc72122fb9a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payloadType": "date",
        "x": 230,
        "y": 680,
        "wires": [
            [
                "a1c4cbe2b8ce9045"
            ]
        ]
    },
    {
        "id": "a1c4cbe2b8ce9045",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "internet alarms",
        "func": "var lastin = flow.get(\"lastInternet\") || 0;\n\nvar timin = new Date().getTime();\n\nvar age = (timin - lastin)/1000;\n\nmsg.topic = \"alarm/internet\";\nmsg.title = \"Internet connection\";\nif (age < 60) { msg.payload = \"ok\"; }\nelse { msg.payload = \"Warning, no internet\"; }\n\n\n// var msg2 = {};\n// msg2.topic = \"alarm/modemLTE\";\n// msg2.title = \"Modem LTE 4G connection\";\n// var online = flow.get(\"online\") || false;\n// if (msg.payload !== \"ok\") { msg2.payload = \"No modem response\";  }\n// else if (online==true) { msg2.payload = \"ok\"; }\n// else { msg2.payload = \"No LTE connection\"; }\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 680,
        "wires": [
            [
                "392d126135d185ae",
                "a23b0b16b75dd81a"
            ]
        ]
    },
    {
        "id": "392d126135d185ae",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 555,
        "y": 680,
        "wires": []
    },
    {
        "id": "3b81355f577c5ed0",
        "type": "ip",
        "z": "c376bc72122fb9a2",
        "name": "ip",
        "https": false,
        "timeout": "5000",
        "internalIPv4": true,
        "internalIPv6": false,
        "publicIPv4": true,
        "publicIPv6": false,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "cdbc661df0f64861"
            ]
        ]
    },
    {
        "id": "7c78ffbdf659f35e",
        "type": "inject",
        "z": "c376bc72122fb9a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "3b81355f577c5ed0"
            ]
        ]
    },
    {
        "id": "7c19b43c9e35470c",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "www.google.com",
        "timer": "60",
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "e8a0adf8d3662d5a"
            ]
        ]
    },
    {
        "id": "2b5da55513cf3da9",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "e8a0adf8d3662d5a",
        "type": "switch",
        "z": "c376bc72122fb9a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 320,
        "wires": [
            [
                "2b5da55513cf3da9",
                "2a7c2a3a1af9fe08",
                "62db721746cacbda"
            ],
            [
                "cbdb2531bff11977"
            ]
        ]
    },
    {
        "id": "1f143b7f9354cff9",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 780,
        "wires": [
            [
                "b7e344da84a4db3a",
                "c727a7485e9d0f98"
            ]
        ]
    },
    {
        "id": "b7e344da84a4db3a",
        "type": "delay",
        "z": "c376bc72122fb9a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1060,
        "y": 760,
        "wires": [
            [
                "5e084cb5a68b6a5a"
            ]
        ]
    },
    {
        "id": "c727a7485e9d0f98",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "rebootCountNoInternet",
        "func": "msg.topic = \"set/rebootCountNoInternet\";\nmsg.title = \"No Internet Reboot Counter\";\n\nmsg.payload = global.get(\"settings.rebootCountNoInternet.value\") || 0;\n\nmsg.payload = parseInt(msg.payload) + 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 820,
        "wires": [
            [
                "f35f2c270fa6bc6f"
            ]
        ]
    },
    {
        "id": "10ee4216045b7731",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1305,
        "y": 280,
        "wires": []
    },
    {
        "id": "5e084cb5a68b6a5a",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1260,
        "y": 760,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2a7c2a3a1af9fe08",
        "type": "change",
        "z": "c376bc72122fb9a2",
        "name": "reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 380,
        "wires": [
            [
                "1f143b7f9354cff9",
                "cbdb2531bff11977",
                "ba45d07273865a3c",
                "0c4205ed9aee068c"
            ]
        ]
    },
    {
        "id": "cbdb2531bff11977",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 320,
        "wires": [
            [
                "ba45d07273865a3c",
                "c10c40ea6363c0f7",
                "9856e52b00f498ce"
            ]
        ]
    },
    {
        "id": "c10c40ea6363c0f7",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo /sbin/ifdown 'wlan0'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1120,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ba45d07273865a3c",
        "type": "delay",
        "z": "c376bc72122fb9a2",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 480,
        "wires": [
            [
                "784529a4899cd05a",
                "0c4205ed9aee068c"
            ]
        ]
    },
    {
        "id": "784529a4899cd05a",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo /sbin/ifup --force 'wlan0'",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1130,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "9856e52b00f498ce",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "resetWlanCount",
        "func": "msg.topic = \"set/resetWlanCount\";\nmsg.title = \"No Internet Reset WLAN Counter\";\n\nmsg.payload = global.get(\"settings.resetWlanCount.value\") || 0;\n\nmsg.payload = parseInt(msg.payload) + 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "10ee4216045b7731",
                "723dd3dd7f64f357"
            ]
        ]
    },
    {
        "id": "3ef4452776398bf2",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "pingInternetMs",
        "func": "msg.topic = \"system/pingInternetMs\";\nmsg.title = \"Ping Internet Time\";\nmsg.units = \"ms\";\n\nflow.set(\"lastInternet\", new Date().getTime());\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 240,
        "wires": [
            [
                "1d8ef88d8c83d435",
                "a9ab84422ff80e3e"
            ]
        ]
    },
    {
        "id": "1d8ef88d8c83d435",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8",
            "d72c7804b3a94dfe"
        ],
        "x": 935,
        "y": 240,
        "wires": []
    },
    {
        "id": "723dd3dd7f64f357",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 340,
        "wires": []
    },
    {
        "id": "4b1e289eac95eb5f",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "www.heatweb.co.uk",
        "timer": "60",
        "inputs": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "e8a0adf8d3662d5a"
            ]
        ]
    },
    {
        "id": "62db721746cacbda",
        "type": "smooth",
        "z": "c376bc72122fb9a2",
        "name": "",
        "property": "payload",
        "action": "min",
        "count": "2",
        "round": "",
        "mult": "single",
        "reduce": true,
        "x": 620,
        "y": 240,
        "wires": [
            [
                "3ef4452776398bf2"
            ]
        ]
    },
    {
        "id": "a9ab84422ff80e3e",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "3ad66318e6ac6780",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "192.168.0.1",
        "timer": "60",
        "inputs": 0,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "cc90a7588d29413d",
                "ea4c0b61d13bad65"
            ]
        ]
    },
    {
        "id": "cc90a7588d29413d",
        "type": "switch",
        "z": "c376bc72122fb9a2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "2a7c2a3a1af9fe08"
            ],
            []
        ]
    },
    {
        "id": "ea4c0b61d13bad65",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "6b0ead44e170ac28",
        "type": "ping",
        "z": "c376bc72122fb9a2",
        "protocol": "Automatic",
        "mode": "timed",
        "name": "",
        "host": "192.168.1.1",
        "timer": "60",
        "inputs": 0,
        "x": 150,
        "y": 500,
        "wires": [
            [
                "cc90a7588d29413d",
                "ea4c0b61d13bad65"
            ]
        ]
    },
    {
        "id": "fea93495307d63f3",
        "type": "comment",
        "z": "c376bc72122fb9a2",
        "name": "Loss of internet connectivity triggers countdown to reset ",
        "info": "",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "8d3f272a40031d15",
        "type": "comment",
        "z": "c376bc72122fb9a2",
        "name": "LAN Connectivity prevents reset",
        "info": "",
        "x": 210,
        "y": 400,
        "wires": []
    },
    {
        "id": "cdbc661df0f64861",
        "type": "function",
        "z": "c376bc72122fb9a2",
        "name": "",
        "func": "\n\nvar msg1 = { topic: \"system/ipLan\", payload: msg.payload.internalIPv4 || \"false\" }\n\nmsg.topic = \"system/ipWan\";\nmsg.payload = msg.payload.publicIPv4 || \"false\" ;\n\n\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 80,
        "wires": [
            [
                "ca1358f93e7b6dc8"
            ],
            [
                "ca1358f93e7b6dc8"
            ]
        ]
    },
    {
        "id": "ca1358f93e7b6dc8",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 685,
        "y": 80,
        "wires": []
    },
    {
        "id": "0c4205ed9aee068c",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "90",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "9abe6fd2.97b23",
                "d41fd4714443ef23"
            ]
        ]
    },
    {
        "id": "f35f2c270fa6bc6f",
        "type": "link out",
        "z": "c376bc72122fb9a2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1295,
        "y": 820,
        "wires": []
    },
    {
        "id": "d41fd4714443ef23",
        "type": "trigger",
        "z": "c376bc72122fb9a2",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "1f143b7f9354cff9",
                "99bb7f82081d21dd"
            ]
        ]
    },
    {
        "id": "99bb7f82081d21dd",
        "type": "exec",
        "z": "c376bc72122fb9a2",
        "command": "sudo service networking restart",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1150,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d72c7804b3a94dfe",
        "type": "link in",
        "z": "c376bc72122fb9a2",
        "name": "link in 1",
        "links": [
            "1d8ef88d8c83d435"
        ],
        "x": 265,
        "y": 620,
        "wires": [
            [
                "a1c4cbe2b8ce9045"
            ]
        ]
    },
    {
        "id": "a23b0b16b75dd81a",
        "type": "debug",
        "z": "c376bc72122fb9a2",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 760,
        "wires": []
    },
    {
        "id": "3ccf6b40.057534",
        "type": "ui_text",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "order": 1,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "LAN IP Address",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 540,
        "y": 460,
        "wires": []
    },
    {
        "id": "fbc3ab38.2e80e8",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 460,
        "wires": [
            [
                "b70b897d.314328"
            ]
        ]
    },
    {
        "id": "b70b897d.314328",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "func": "\nmsg.payload = global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_1_ip4.value\") ||  global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_2_ip4.value\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "3ccf6b40.057534"
            ]
        ]
    },
    {
        "id": "5f94911c.24a54",
        "type": "ui_text",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "order": 3,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "Identity",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 520,
        "y": 400,
        "wires": []
    },
    {
        "id": "d5c0bd4b.23571",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 400,
        "wires": [
            [
                "bc743a6c.843208"
            ]
        ]
    },
    {
        "id": "bc743a6c.843208",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "func": "\nmsg.payload = global.get(\"networkId\") + \" / \" + global.get(\"node\") ;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 400,
        "wires": [
            [
                "5f94911c.24a54"
            ]
        ]
    },
    {
        "id": "7671fe52.7dd1b",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "Rotate Screen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 160,
        "wires": [
            [
                "60eac61d.347078"
            ]
        ]
    },
    {
        "id": "60eac61d.347078",
        "type": "file in",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "filename": "/boot/config.txt",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 800,
        "y": 240,
        "wires": [
            [
                "abd68b9d.1e2288"
            ]
        ]
    },
    {
        "id": "209a5b3.ceb89a4",
        "type": "split",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 340,
        "wires": [
            [
                "4cbbf15a.e1f5f"
            ]
        ]
    },
    {
        "id": "4cbbf15a.e1f5f",
        "type": "switch",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "lcd_rotate=2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "5a570147.818fb",
                "bda08c25.bf0b9"
            ]
        ]
    },
    {
        "id": "bda08c25.bf0b9",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 380,
        "wires": []
    },
    {
        "id": "5a570147.818fb",
        "type": "switch",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "#lcd",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 480,
        "wires": [
            [
                "92b93d30.932fe"
            ],
            [
                "1835b27a.3a211e"
            ]
        ]
    },
    {
        "id": "bf20d69a.90b028",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1320,
        "y": 600,
        "wires": [
            [
                "423c266c.16d6f8"
            ]
        ]
    },
    {
        "id": "c8b0429c.3a7c5",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 1310,
        "y": 660,
        "wires": []
    },
    {
        "id": "423c266c.16d6f8",
        "type": "exec",
        "z": "d26c3be6.b5ef58",
        "command": "bash",
        "addpay": false,
        "append": "/home/pi/lcd_rotate.sh",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1450,
        "y": 600,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "abd68b9d.1e2288",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "configtxt",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 280,
        "wires": [
            [
                "209a5b3.ceb89a4"
            ]
        ]
    },
    {
        "id": "1835b27a.3a211e",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configtxt",
                "tot": "msg"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "lcd_rotate",
                "fromt": "str",
                "to": "#lcd_rotate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 500,
        "wires": [
            [
                "111b3535.defdfb"
            ]
        ]
    },
    {
        "id": "92b93d30.932fe",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "configtxt",
                "tot": "msg"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "#lcd_rotate",
                "fromt": "str",
                "to": "lcd_rotate",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 460,
        "wires": [
            [
                "111b3535.defdfb"
            ]
        ]
    },
    {
        "id": "111b3535.defdfb",
        "type": "file",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "filename": "/home/pi/config.txt",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1190,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3487cfb8.28fdf",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "System Name",
        "tooltip": "e.g. St.Trinians",
        "group": "cb203bcb.f1ec68",
        "order": 8,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "text",
        "delay": "5000",
        "topic": "set/name",
        "topicType": "str",
        "x": 520,
        "y": 640,
        "wires": [
            [
                "93e55623.1ae628"
            ]
        ]
    },
    {
        "id": "c346ae2f.2c43e",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "d": true,
        "group": "36b47e47.04f1c2",
        "name": "Virtual Keyboard",
        "order": 5,
        "width": "3",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button class=\"VK\" style=\"display:none\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "efc92398.82dbf",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Email Address",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 9,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "email",
        "delay": "5000",
        "topic": "set/email",
        "topicType": "str",
        "x": 520,
        "y": 680,
        "wires": [
            [
                "bbcdf11f.f906a"
            ]
        ]
    },
    {
        "id": "47a69ad7.0a5b94",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Alarm Temperature",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 10,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "number",
        "delay": "5000",
        "topic": "set/tAlarm",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 530,
        "y": 720,
        "wires": [
            [
                "cd030cb5.b6dcf"
            ]
        ]
    },
    {
        "id": "bf47904.d275a7",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "ee777bb4.05aa88",
                "f8a0f6f2.95b158",
                "343dbd59.0f0e52"
            ]
        ]
    },
    {
        "id": "ee777bb4.05aa88",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "tAlarm",
        "func": "msg.payload = parseFloat(global.get(\"settings.tAlarm.value\") || 55);\nmsg.topic = \"set/tAlarm\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            [
                "47a69ad7.0a5b94",
                "bc8363a8.8fcbe"
            ]
        ]
    },
    {
        "id": "cd030cb5.b6dcf",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/tAlarm",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "units",
                "pt": "msg",
                "to": "°C",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Alarm temperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 720,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16"
            ]
        ]
    },
    {
        "id": "bbcdf11f.f906a",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/email",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Email address for alarms",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 680,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16",
                "3ca1cdfc.ddcb12"
            ]
        ]
    },
    {
        "id": "93e55623.1ae628",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/title",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "System name",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 640,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16"
            ]
        ]
    },
    {
        "id": "e44a91c9.939dc",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1035,
        "y": 640,
        "wires": []
    },
    {
        "id": "f8a0f6f2.95b158",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "name",
        "func": "msg.payload = global.get(\"settings.title.value\") || global.get(\"iotnode\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "3487cfb8.28fdf"
            ]
        ]
    },
    {
        "id": "343dbd59.0f0e52",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "email",
        "func": "msg.payload = global.get(\"settings.email.value\") || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "efc92398.82dbf"
            ]
        ]
    },
    {
        "id": "cfa092d4.4a897",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "post changes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "cmd/request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "local/+/+/settings/#",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 720,
        "wires": [
            [
                "e44a91c9.939dc"
            ]
        ]
    },
    {
        "id": "10386a58.ef2e16",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 760,
        "wires": [
            [
                "cfa092d4.4a897"
            ]
        ]
    },
    {
        "id": "ea82bc01.ed0f6",
        "type": "ui_ui_control",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "events": "all",
        "x": 360,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "6aac662b.dcf9e8",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"tabs\":{\"hide\":\"Setup\"}}",
        "payloadType": "json",
        "x": 180,
        "y": 860,
        "wires": [
            [
                "ea82bc01.ed0f6"
            ]
        ]
    },
    {
        "id": "f8a1c186.e772c",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "group": "db644eb4.b9d0a",
        "name": "css etc",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<style>\n\n   .md-button {\n        text-transform: none;\n    }\n    .myB {\n        box-shadow: 2px 2px 2px grey;\n        padding: 1px 8px 0px 8px;\n        width: 100%;\n    }\n    .tdLS {\n        padding: 0px 8px 0px 0px;\n    }\n  .filled { \n      height: 100% !important;\n\n      padding: 0 !important;\n      margin: 0 !important;\n  }\n  .nr-dashboard-template {\n      padding: 0;\n      margin: 0;\n  }\n  \n  .rounded {\n  border-radius: 6px 6px 6px 6px;\n}\n \n   .bigfont {\n  font-size: 18px;\n}\n\n   .smallfont {\n  font-size: 12px;\n}\n.smB { \n    width: 100px;\n    display: inline-block;\n}\n.thinB { \n    height: 20px;\n    0px 0px 0px 0px;\n}\n.maxsiz {\n\n    width: 100%; \n    height: 100%;\n\n}\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "x": 290,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "2c37422a.c4432e",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"tabs\":{\"show\":\"Setup\"}}",
        "payloadType": "json",
        "x": 190,
        "y": 900,
        "wires": [
            [
                "ea82bc01.ed0f6"
            ]
        ]
    },
    {
        "id": "3ca1cdfc.ddcb12",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 840,
        "wires": [
            [
                "334db306.ec4e5c"
            ]
        ]
    },
    {
        "id": "334db306.ec4e5c",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "attach",
        "func": "msg.to = msg.payload;\n\nmsg.payload=\"Update from \"+global.get(\"node\");\nmsg.topic=\"Change of email on \"+global.get(\"node\");\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 900,
        "wires": [
            [
                "162d2a4d.5abdb6"
            ]
        ]
    },
    {
        "id": "162d2a4d.5abdb6",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 1175,
        "y": 900,
        "wires": []
    },
    {
        "id": "2d0e49f7.e5dea6",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "NETWORK",
        "payloadType": "env",
        "x": 760,
        "y": 60,
        "wires": [
            [
                "7764bb64.c73e14"
            ]
        ],
        "info": "https://discourse.nodered.org/t/using-environment-variable-as-password-for-mqtt-in-node/26318\nhttps://pimylifeup.com/environment-variables-linux/"
    },
    {
        "id": "7764bb64.c73e14",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 60,
        "wires": []
    },
    {
        "id": "16bba053.442da",
        "type": "ui_text",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "order": 2,
        "width": "8",
        "height": "1",
        "name": "",
        "label": "WAN IP Address",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 540,
        "y": 500,
        "wires": []
    },
    {
        "id": "c01b8f85.fe258",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "98ca4c9d.3b46"
            ]
        ]
    },
    {
        "id": "98ca4c9d.3b46",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "func": "\nmsg.payload = global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".system.ipWan.value\") || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 500,
        "wires": [
            [
                "16bba053.442da"
            ]
        ]
    },
    {
        "id": "bc8363a8.8fcbe",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 780,
        "wires": []
    },
    {
        "id": "4c0c2dc2.b27d04",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "apee4ooF",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "topic": "",
        "payload": "apee4ooF",
        "payloadType": "str",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "a21187af.21a728"
            ]
        ]
    },
    {
        "id": "a21187af.21a728",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "Nodeware",
        "func": "global.set(\"Nodeware\", \"tihat_v01.08.22\") ; \n\nmsg.payload = global.get(\"Nodeware\") ; \nmsg.topic = \"system/Nodeware\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "ae865c20.2fec3"
            ]
        ]
    },
    {
        "id": "2f4faaf.de84556",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "BACKUP SOFTWARE",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "a21187af.21a728",
                "188d04eb.5e61ab"
            ]
        ]
    },
    {
        "id": "188d04eb.5e61ab",
        "type": "trigger",
        "z": "caf59ec6.61c85",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "outputs": 1,
        "x": 500,
        "y": 100,
        "wires": [
            [
                "5d1caef7.6d7ca"
            ]
        ]
    },
    {
        "id": "5d1caef7.6d7ca",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "attach",
        "func": "msg.payload=\"Software Backup attached from \"+global.get(\"node\");\nmsg.topic=\"Node-RED Software Backup from \"+global.get(\"node\");\nvar nw = \"flows_ihiu_\" + global.get(\"Nodeware\") || \"\";\nmsg.attachments = [{   // utf-8 string as an attachment \n            filename:  nw + '.json',\n            path: '/home/pi/.node-red/flows_ihiu.json'\n        },\n        {   // utf-8 string as an attachment \n            filename: nw + '_cred.json',\n            path: '/home/pi/.node-red/flows_ihiu_cred.json'\n        },\n        {   // utf-8 string as an attachment \n            filename: 'settings.js',\n            path: '/home/pi/.node-red/settings.js'\n        }];\n\nmsg.to=\"setup@heatweb.com, nodered@heatweb.com\";\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [
                "9c5f6a01.7abfd8"
            ]
        ]
    },
    {
        "id": "9c5f6a01.7abfd8",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 795,
        "y": 100,
        "wires": []
    },
    {
        "id": "2eb67577.c3d0f2",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "pwgen -B -1",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 400,
        "wires": [
            [
                "60f2a12c.9ad8d",
                "c21e8eff.725fa"
            ],
            [],
            []
        ]
    },
    {
        "id": "2d9e199.d1e7066",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "Refresh Random",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "afe11f5a.15ac2"
            ]
        ]
    },
    {
        "id": "60f2a12c.9ad8d",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 360,
        "wires": []
    },
    {
        "id": "c21e8eff.725fa",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "newnode",
        "func": "msg.payload = msg.payload.trim();\n\nflow.set(\"newnode\", msg.payload);\nflow.set(\"newnetwork\", msg.payload + \"-\" + msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a1744584.91173",
        "type": "link in",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "9c5f6a01.7abfd8",
            "162d2a4d.5abdb6",
            "8e2f7245.7dc94",
            "330292c9.7440ae",
            "ce07b36ff1b6b4ca"
        ],
        "x": 385,
        "y": 260,
        "wires": [
            [
                "f933bdc8a3b48903"
            ]
        ]
    },
    {
        "id": "65658ff.e75c27",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 180,
        "wires": [
            [
                "6f4f1505.582314"
            ]
        ]
    },
    {
        "id": "6f4f1505.582314",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1490,
        "y": 180,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "aa3585f1.9ded8",
        "type": "file in",
        "z": "caf59ec6.61c85",
        "name": "",
        "filename": "/etc/hostname",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "f92c39c.55b0848"
            ]
        ]
    },
    {
        "id": "f92c39c.55b0848",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "hostname",
        "func": "flow.set(\"hostname\",msg.payload.trim());\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "38cc9c30.d04654",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1520,
        "y": 260,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bdad4049.b8d448",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 280,
        "wires": [
            [
                "38cc9c30.d04654"
            ]
        ]
    },
    {
        "id": "e97fbed5.80f718",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo node-red-restart",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1520,
        "y": 340,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5fcf0e85.427da8",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1300,
        "y": 340,
        "wires": [
            [
                "e97fbed5.80f718"
            ]
        ]
    },
    {
        "id": "ae865c20.2fec3",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 555,
        "y": 160,
        "wires": []
    },
    {
        "id": "5d64f9af.79a558",
        "type": "comment",
        "z": "caf59ec6.61c85",
        "name": "",
        "info": "https://itnext.io/raspberry-pi-read-only-kiosk-mode-the-complete-tutorial-for-2021-58a860474215",
        "x": 1680,
        "y": 40,
        "wires": []
    },
    {
        "id": "6b9176cd.8d5378",
        "type": "template",
        "z": "caf59ec6.61c85",
        "name": "rofs",
        "field": "payload",
        "fieldType": "msg",
        "format": "text",
        "syntax": "mustache",
        "template": "#!/bin/sh\n\n#  Read-only Root-FS for Raspian using overlayfs\n#  Version 1.1:\n#  Changed to use /proc/mounts rathern than /etc/fstab for deriving the root filesystem.\n#\n#  Version 1:\n#  Created 2017 by Pascal Suter @ DALCO AG, Switzerland to work on Raspian as custom init script\n#  (raspbian does not use an initramfs on boot)\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see\n#    <http://www.gnu.org/licenses/>.\n#\n#\n#  Tested with Raspbian mini, 2017-01-11\n#\n#  This script will mount the root filesystem read-only and overlay it with a temporary tempfs \n#  which is read-write mounted. This is done using the overlayFS which is part of the linux kernel \n#  since version 3.18. \n#  when this script is in use, all changes made to anywhere in the root filesystem mount will be lost \n#  upon reboot of the system. The SD card will only be accessed as read-only drive, which significantly\n#  helps to prolong its life and prevent filesystem coruption in environments where the system is usually\n#  not shut down properly \n#\n#  Install: \n#  copy this script to /sbin/overlayRoot.sh and add \"init=/sbin/overlayRoot.sh\" to the cmdline.txt \n#  file in the raspbian image's boot partition. \n#  I strongly recommend to disable swapping before using this. it will work with swap but that just does \n#  not make sens as the swap file will be stored in the tempfs which again resides in the ram.\n#  run these commands on the booted raspberry pi BEFORE you set the init=/sbin/overlayRoot.sh boot option:\n#  sudo dphys-swapfile swapoff\n#  sudo dphys-swapfile uninstall\n#  sudo update-rc.d dphys-swapfile remove\n#\n#  To install software, run upgrades and do other changes to the raspberry setup, simply remove the init= \n#  entry from the cmdline.txt file and reboot, make the changes, add the init= entry and reboot once more. \n \nfail(){\n\techo -e \"$1\"\n\t/bin/bash\n}\n \n# load module\nmodprobe overlay\nif [ $? -ne 0 ]; then\n    fail \"ERROR: missing overlay kernel module\"\nfi\n# mount /proc\nmount -t proc proc /proc\n\n# create a writable fs to then create our mountpoints \nmount -t tmpfs inittemp /mnt\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not create a temporary filesystem to mount the base filesystems for overlayfs\"\nfi\nmkdir /mnt/lower\nmkdir /mnt/rw\nmount -t tmpfs root-rw /mnt/rw\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not create tempfs for upper filesystem\"\nfi\nmkdir /mnt/rw/upper\nmkdir /mnt/rw/work\nmkdir /mnt/newroot\n\n# mount root filesystem readonly \nrootDev=`awk '$2 == \"/\" {print $1}' /proc/mounts`\nrootMountOpt=`awk '$2 == \"/\" {print $4}' /proc/mounts`\nrootFsType=`awk '$2 == \"/\" {print $3}' /proc/mounts`\nmount -t ${rootFsType} -o ${rootMountOpt},ro ${rootDev} /mnt/lower\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not ro-mount original root partition\"\nfi\nmount -t overlay -o lowerdir=/mnt/lower,upperdir=/mnt/rw/upper,workdir=/mnt/rw/work overlayfs-root /mnt/newroot\nif [ $? -ne 0 ]; then\n    fail \"ERROR: could not mount overlayFS\"\nfi\n# create mountpoints inside the new root filesystem-overlay\nmkdir /mnt/newroot/ro\nmkdir /mnt/newroot/rw\n# remove root mount from fstab (this is already a non-permanent modification)\ngrep -v \"$rootDev\" /mnt/lower/etc/fstab > /mnt/newroot/etc/fstab\necho \"#the original root mount has been removed by overlayRoot.sh\" >> /mnt/newroot/etc/fstab\necho \"#this is only a temporary modification, the original fstab\" >> /mnt/newroot/etc/fstab\necho \"#stored on the disk can be found in /ro/etc/fstab\" >> /mnt/newroot/etc/fstab\n# change to the new overlay root\ncd /mnt/newroot\npivot_root . mnt\nexec chroot . sh -c \"$(cat <<END\n# move ro and rw mounts to the new root\nmount --move /mnt/mnt/lower/ /ro\nif [ $? -ne 0 ]; then\n    echo \"ERROR: could not move ro-root into newroot\"\n    /bin/bash\nfi\nmount --move /mnt/mnt/rw /rw\nif [ $? -ne 0 ]; then\n    echo \"ERROR: could not move tempfs rw mount into newroot\"\n    /bin/bash\nfi\n# unmount unneeded mounts so we can unmout the old readonly root\numount /mnt/mnt\numount /mnt/proc\numount -l -f /mnt/dev\numount -l -f /mnt\n# continue with regular init\nexec /sbin/init\nEND\n)\"\n",
        "output": "str",
        "x": 1690,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "afe11f5a.15ac2",
        "type": "change",
        "z": "caf59ec6.61c85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 440,
        "wires": [
            [
                "2eb67577.c3d0f2",
                "aa3585f1.9ded8"
            ]
        ]
    },
    {
        "id": "54864e96.ab682",
        "type": "link in",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "9bd2209.563a4e"
        ],
        "x": 255,
        "y": 480,
        "wires": [
            [
                "afe11f5a.15ac2"
            ]
        ]
    },
    {
        "id": "e0e0515a.86385",
        "type": "ui_button",
        "z": "caf59ec6.61c85",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 2,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Shutdown now",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 960,
        "y": 240,
        "wires": [
            [
                "6803aeb1.a8f08"
            ]
        ]
    },
    {
        "id": "6803aeb1.a8f08",
        "type": "ui_toast",
        "z": "caf59ec6.61c85",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "3b18b185.0cc4fe"
            ]
        ]
    },
    {
        "id": "3b18b185.0cc4fe",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 240,
        "wires": [
            [
                "38cc9c30.d04654"
            ],
            []
        ]
    },
    {
        "id": "aae309cc.38b1f8",
        "type": "ui_button",
        "z": "caf59ec6.61c85",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 1,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Reboot",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "Reboot now",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 960,
        "y": 140,
        "wires": [
            [
                "bad6cbe2.1ffd48"
            ]
        ]
    },
    {
        "id": "bad6cbe2.1ffd48",
        "type": "ui_toast",
        "z": "caf59ec6.61c85",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "2b8db478.456f1c"
            ]
        ]
    },
    {
        "id": "2b8db478.456f1c",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 140,
        "wires": [
            [
                "6f4f1505.582314"
            ],
            []
        ]
    },
    {
        "id": "8bd72823.48ffa8",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "906024b7.9e3e48",
            "96558a40.5d4f48"
        ],
        "x": 1095,
        "y": 300,
        "wires": []
    },
    {
        "id": "dd75b998.3e21f8",
        "type": "ui_button",
        "z": "caf59ec6.61c85",
        "name": "",
        "group": "36b47e47.04f1c2",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Screen Off",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "cmd:screenoff",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 970,
        "y": 300,
        "wires": [
            [
                "8bd72823.48ffa8"
            ]
        ]
    },
    {
        "id": "f3e7f125f704571f",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo service --status-all",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 370,
        "y": 720,
        "wires": [
            [
                "8bf751a05ae972a3"
            ],
            [
                "8bf751a05ae972a3"
            ],
            []
        ]
    },
    {
        "id": "e0df63888c7c8d67",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 720,
        "wires": [
            [
                "f3e7f125f704571f"
            ]
        ]
    },
    {
        "id": "8bf751a05ae972a3",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 720,
        "wires": []
    },
    {
        "id": "fae86fdae8a260b0",
        "type": "inject",
        "z": "caf59ec6.61c85",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payloadType": "date",
        "x": 370,
        "y": 840,
        "wires": [
            [
                "ba70b18364f6cb97"
            ]
        ]
    },
    {
        "id": "ba70b18364f6cb97",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "newnode",
        "property": "node",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "newnode",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 840,
        "wires": [
            [
                "b71148848e2bf0c4",
                "eabe8d1364d5d4d6"
            ],
            [
                "5ebfc67f51971a9b"
            ]
        ]
    },
    {
        "id": "b71148848e2bf0c4",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "NAMES",
        "func": "\n//msg.newnode = global.get(\"node\").toLowerCase();\nmsg.newnode = \"zcc\" + flow.get(\"newnode\").toLowerCase();\nmsg.newnetwork = flow.get(\"newnode\").toLowerCase();\nmsg.newgroup = \"new\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "0c8e4f9ba98b5549",
                "17de64753eebbe39"
            ]
        ]
    },
    {
        "id": "eabe8d1364d5d4d6",
        "type": "change",
        "z": "caf59ec6.61c85",
        "name": "Renaming Host...",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Renaming Host...",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 760,
        "wires": [
            [
                "cc301e4ec404ed45"
            ]
        ]
    },
    {
        "id": "5ebfc67f51971a9b",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "ls /etc/connect/service/",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "61cd65e615237acd",
                "3d59f4f15bee38f8"
            ],
            [],
            []
        ]
    },
    {
        "id": "0c8e4f9ba98b5549",
        "type": "delay",
        "z": "caf59ec6.61c85",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "ee3de00d68af001d"
            ]
        ]
    },
    {
        "id": "17de64753eebbe39",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo rm /etc/connect/service/settings.json",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1160,
        "y": 660,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "61cd65e615237acd",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "settings.json",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 900,
        "wires": [
            [],
            [
                "8db53daeb38d71c9"
            ]
        ]
    },
    {
        "id": "3d59f4f15bee38f8",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 860,
        "wires": []
    },
    {
        "id": "ee3de00d68af001d",
        "type": "template",
        "z": "caf59ec6.61c85",
        "name": "newnode",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "\nn=\"{{newnetwork}}\"\nb=\"{{newnode}}\"\n\nc=\"/g\"\n\nh=\"newnetwork\"\na=\"s/$h/\"\nSED_ARG=\"$a$n$c\"\necho $SED_ARG\nsudo sed -i -e $SED_ARG /boot/heatweb/config.json\n\nh=\"newnode\"\na=\"s/$h/\"\nSED_ARG=\"$a$b$c\"\necho $SED_ARG\nsudo sed -i -e $SED_ARG /boot/heatweb/config.json\n\nh=$(cat /etc/hostname)\na=\"s/$h/\"\nSED_ARG=\"$a$b$c\"\necho $SED_ARG\nsudo sed -i -e $SED_ARG /etc/hostname\nsudo sed -i -e $SED_ARG /etc/hosts\n\n\n",
        "output": "str",
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "b22cdb936fef512f"
            ]
        ]
    },
    {
        "id": "8db53daeb38d71c9",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "NAMES",
        "func": "\nmsg.newnode = global.get(\"node\");\nmsg.newgroup = \"new\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 900,
        "wires": [
            [
                "ce5847766f4b0346"
            ]
        ]
    },
    {
        "id": "b22cdb936fef512f",
        "type": "switch",
        "z": "caf59ec6.61c85",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1370,
        "y": 600,
        "wires": [
            [
                "10009c749c3e694f",
                "adacce0945ee4d08",
                "09188e09a11c4047",
                "f74be062730bbc2b"
            ]
        ]
    },
    {
        "id": "ce5847766f4b0346",
        "type": "delay",
        "z": "caf59ec6.61c85",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1460,
        "y": 900,
        "wires": [
            [
                "3821ed536c0d82b2"
            ]
        ]
    },
    {
        "id": "10009c749c3e694f",
        "type": "file",
        "z": "caf59ec6.61c85",
        "name": "",
        "filename": "/home/pi/node-hiu-newname.sh",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1630,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "adacce0945ee4d08",
        "type": "trigger",
        "z": "caf59ec6.61c85",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1550,
        "y": 680,
        "wires": [
            [
                "ac51970a6b1b32e9"
            ]
        ]
    },
    {
        "id": "09188e09a11c4047",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": false,
        "console": false,
        "complete": "false",
        "x": 1630,
        "y": 520,
        "wires": []
    },
    {
        "id": "f74be062730bbc2b",
        "type": "function",
        "z": "caf59ec6.61c85",
        "name": "attach",
        "func": "\nvar ip = global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_1_ip4.value\") ||  global.get(\"readings.\" + global.get(\"localNetworkId\") + \".\" + global.get(\"node\") + \".cpu.net_2_ip4.value\")\n\nmsg.payload=\"New Node \"+msg.newnode + \" on \" + ip;\nmsg.topic=\"New Node \"+msg.newnode + \" on \" + ip;\n\n\nmsg.to=\"setup@heatweb.com\";\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 560,
        "wires": [
            [
                "ce07b36ff1b6b4ca"
            ]
        ]
    },
    {
        "id": "3821ed536c0d82b2",
        "type": "template",
        "z": "caf59ec6.61c85",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "sudo wget -O - \"https://connect.jfrog.io/v2/install_connect\" | sudo sh -s HKFpL8CSxjiG8HPrcpwBY5cUpukezbRg9A heatwebremote -n={{newnode}} -g={{newgroup}}\n",
        "output": "str",
        "x": 1620,
        "y": 900,
        "wires": [
            [
                "ea6c7419d9a5790b"
            ]
        ]
    },
    {
        "id": "ac51970a6b1b32e9",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "bash",
        "addpay": false,
        "append": "/home/pi/node-hiu-newname.sh",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1680,
        "y": 680,
        "wires": [
            [
                "2410b06e6b368222",
                "4dfe5619f04e9913",
                "ebfec58fefedf84c"
            ],
            [],
            [
                "2410b06e6b368222"
            ]
        ]
    },
    {
        "id": "ce07b36ff1b6b4ca",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 1725,
        "y": 560,
        "wires": []
    },
    {
        "id": "ea6c7419d9a5790b",
        "type": "subflow:a8d56bd2.c3c6f",
        "z": "caf59ec6.61c85",
        "name": "",
        "x": 1760,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "2410b06e6b368222",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1910,
        "y": 760,
        "wires": []
    },
    {
        "id": "4dfe5619f04e9913",
        "type": "trigger",
        "z": "caf59ec6.61c85",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1900,
        "y": 680,
        "wires": [
            [
                "f2ca3839a6320ce7",
                "09bb118a25975493"
            ]
        ]
    },
    {
        "id": "ebfec58fefedf84c",
        "type": "change",
        "z": "caf59ec6.61c85",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Rebooting...",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1910,
        "y": 580,
        "wires": [
            [
                "2b0fd762d5e46184"
            ]
        ]
    },
    {
        "id": "8d44588036dcb5d3",
        "type": "debug",
        "z": "caf59ec6.61c85",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 900,
        "wires": []
    },
    {
        "id": "f2ca3839a6320ce7",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "d": true,
        "command": "sudo reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 2140,
        "y": 680,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "09bb118a25975493",
        "type": "exec",
        "z": "caf59ec6.61c85",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 2130,
        "y": 740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2b0fd762d5e46184",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "3de9243a.1e77fc",
            "560266b59151de97",
            "96b46834c6db95b2"
        ],
        "x": 2035,
        "y": 580,
        "wires": []
    },
    {
        "id": "f933bdc8a3b48903",
        "type": "e-mail",
        "z": "caf59ec6.61c85",
        "server": "auth.smtp.1and1.co.uk",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "",
        "x": 550,
        "y": 260,
        "wires": []
    },
    {
        "id": "4bccab605582143f",
        "type": "mqtt out",
        "z": "caf59ec6.61c85",
        "name": "",
        "topic": "cmd/displayMessage",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 2000,
        "y": 460,
        "wires": []
    },
    {
        "id": "96b46834c6db95b2",
        "type": "link in",
        "z": "caf59ec6.61c85",
        "name": "link in 3",
        "links": [
            "2b0fd762d5e46184",
            "cc301e4ec404ed45"
        ],
        "x": 1835,
        "y": 460,
        "wires": [
            [
                "4bccab605582143f",
                "26a2d63b51d6b083"
            ]
        ]
    },
    {
        "id": "cc301e4ec404ed45",
        "type": "link out",
        "z": "caf59ec6.61c85",
        "name": "",
        "links": [
            "3de9243a.1e77fc",
            "560266b59151de97",
            "96b46834c6db95b2"
        ],
        "x": 1315,
        "y": 760,
        "wires": []
    },
    {
        "id": "26a2d63b51d6b083",
        "type": "ui_toast",
        "z": "caf59ec6.61c85",
        "position": "top right",
        "displayTime": "20",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1990,
        "y": 400,
        "wires": []
    },
    {
        "id": "5ecd5bf0795bd642",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "f80e2139d14010f2"
            ]
        ]
    },
    {
        "id": "3fdcb94d47bf9bff",
        "type": "link in",
        "z": "ca03066f6a7451f4",
        "name": "",
        "links": [
            "c52dea4958c2f7ea",
            "26f1ad336f82aeeb"
        ],
        "x": 835,
        "y": 100,
        "wires": [
            [
                "a9c8363a03750511",
                "49608d86828c05de"
            ]
        ]
    },
    {
        "id": "f80e2139d14010f2",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "bash /home/pi/node-hiu/sq.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sq.sh",
        "x": 390,
        "y": 680,
        "wires": [
            [
                "92d71bc19a90ebb7"
            ],
            [],
            [
                "5225132d4929334b",
                "119c833c97aaa8ef"
            ]
        ]
    },
    {
        "id": "a9c8363a03750511",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 100,
        "wires": []
    },
    {
        "id": "11c03d3cbc04923d",
        "type": "file",
        "z": "ca03066f6a7451f4",
        "name": "",
        "filename": "/home/pi/node-hiu/sq.sh",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "99f19987a9d79c31",
        "type": "function",
        "z": "ca03066f6a7451f4",
        "name": "",
        "func": "\n\nfunction uniq(a) {\n    var seen = {};\n    return a.filter(function(item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n\nif (msg.payload.indexOf(\",\")<1) { return null; }\n\nvar invar = msg.payload.split(\",\");\nvar device = (invar[0].trim());\nvar terminal = (invar[1].trim());\nvar readin = parseFloat(invar[2].trim());\nvar title = (invar[3].trim());\n    \nvar msg1={};    \nmsg1.topic = device + \"/dat/\" + terminal;\nmsg1.payload = readin;\nmsg1.points = 1000;\nmsg1.units = \"\";\nmsg1.title = title;\n\nvar msg2 = {};\nmsg2.topic = device + \"/raw/\" + terminal,\nmsg2.payload = readin;\nmsg2.title = \"RAW \" + title;\nmsg2.units = \"ohms\";  \n    \nvar msg3 = { \"payload\":\"ok\"};  // alarm\nmsg3.topic = device + \"/alarm/terminal_\" + terminal;\n\n\n\n//var ntc = JSON.parse(presult[0][\"map\"]);\nvar ntc = [[42.739, -10], [27.396, 0], [17.999, 10], [12.099, 20], [10, 25], [8.308, 30], [5.819, 40], [4.151, 50], [3.012, 60], [2.221, 70], [1.663, 80], [1.262, 90], [0.97, 100], [0.755, 110]];\nmsg1.units = \"°C\";  \n\nif (terminal == \"tRPS\") {\n\n    ntc = [[0.5, 0], [3.5, 90]];  // Temperature\n    msg2.units = \"vdc\";  \n\n    if (readin < 0.5 ) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Disconnected\"\n\n    }\n\n} else if (terminal == \"pRPS\") {\n\n    ntc = [[0.5, 0], [3.5, 6]];  //  Pressure\n    msg1.units = \"bar\";\n    msg2.units = \"vdc\";  \n\n    if (readin < 0.5) {  // sensor not connected\n\n        //msg1 = null;\n        msg3.payload = \"Sensor Disconnected\"\n\n    }\n\n}  else {\n\n    if (readin==60) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Disconnected\"\n\n    }\n\n    else if (readin == 30) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Short-circuit\"\n\n    }\n\n}\n\n    if(msg1 && ntc) {\n     \n         \n        msg1.payload = \"\";\n        \n        \n        var temp = -999;\n        for (var i = 1; i < ntc.length; i++) { \n            \n            if  (ntc[i][0]==readin) { \n                \n                temp = ntc[i][1];\n                \n                break;\n            }\n            else if  (ntc[i-1][0]==readin) { \n                \n                temp = ntc[i-1][1];\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]<=readin) && (ntc[i][0]>readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]>=readin) && (ntc[i][0]<readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            \n        }\n         \n\n        if (temp != -999) {\n            \n            msg1.payload =  temp;            \n            \n            \n        } else {\n            \n            msg1 = null;\n            msg3.payload = \"Out of range\"\n        }\n    }\n    \n    \n    \n    if (msg1) { msg1.payload = parseInt(msg1.payload * 100) / 100;  }\n    \n    return [msg1, msg2, msg3];\n      \n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 660,
        "wires": [
            [
                "2e988386940749d8",
                "da443342a3ee7581"
            ],
            [
                "497a42acf94e3206",
                "e38c98b2bbcdae42"
            ],
            [
                "40855875df672fcf"
            ]
        ]
    },
    {
        "id": "92d71bc19a90ebb7",
        "type": "split",
        "z": "ca03066f6a7451f4",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 660,
        "wires": [
            [
                "99f19987a9d79c31",
                "c77d99f6194079d7"
            ]
        ]
    },
    {
        "id": "26f1ad336f82aeeb",
        "type": "link out",
        "z": "ca03066f6a7451f4",
        "name": "",
        "mode": "link",
        "links": [
            "3fdcb94d47bf9bff",
            "72fc070f.39dd8"
        ],
        "x": 1205,
        "y": 680,
        "wires": []
    },
    {
        "id": "0b9b33794e321921",
        "type": "template",
        "z": "ca03066f6a7451f4",
        "name": "BOARD SETUP",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "megabas 0 wdtpwr 60\nmegabas 1 wdtpwr 60",
        "output": "str",
        "x": 400,
        "y": 400,
        "wires": [
            [
                "5fb83c77f77d7cdb"
            ]
        ]
    },
    {
        "id": "5fb83c77f77d7cdb",
        "type": "file",
        "z": "ca03066f6a7451f4",
        "name": "",
        "filename": "/home/pi/node-hiu/sqsetup.sh",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 400,
        "wires": [
            [
                "d76edb39ad2c4601"
            ]
        ]
    },
    {
        "id": "62339bb059d4a43b",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "bash /home/pi/node-hiu/sqsetup.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1080,
        "y": 400,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d76edb39ad2c4601",
        "type": "trigger",
        "z": "ca03066f6a7451f4",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 840,
        "y": 400,
        "wires": [
            [
                "62339bb059d4a43b"
            ]
        ]
    },
    {
        "id": "5225132d4929334b",
        "type": "link out",
        "z": "ca03066f6a7451f4",
        "name": "",
        "mode": "link",
        "links": [
            "0632f1bc7ce231b2",
            "38851676a0d913c9"
        ],
        "x": 555,
        "y": 720,
        "wires": []
    },
    {
        "id": "2e988386940749d8",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "da443342a3ee7581",
        "type": "rbe",
        "z": "ca03066f6a7451f4",
        "name": "",
        "func": "deadbandEq",
        "gap": "0.1",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 960,
        "y": 680,
        "wires": [
            [
                "11ef8c40cb8707eb"
            ]
        ]
    },
    {
        "id": "95e237adbbb4b523",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1020,
        "y": 620,
        "wires": [
            [
                "da443342a3ee7581",
                "e38c98b2bbcdae42"
            ]
        ]
    },
    {
        "id": "11ef8c40cb8707eb",
        "type": "switch",
        "z": "ca03066f6a7451f4",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1110,
        "y": 680,
        "wires": [
            [
                "26f1ad336f82aeeb"
            ]
        ]
    },
    {
        "id": "4dc151ca46e90967",
        "type": "comment",
        "z": "ca03066f6a7451f4",
        "name": "Building Automation Hat Commands",
        "info": "     -v              Display the megabas command version number\n        -h              Display the list of command options or one command option details\n        -warranty       Display the warranty\n        -list:          List all megabas boards connected\n                        return the # of boards and stack level for every board\n        board           Display the board status and firmware version number\n        trwr:           Set triacs (AC switch) On/Off\n        trrd:           Read triacs (AC switch) status\n        trtest:         Turn ON and OFF the triacs until press a key\n        contactrd:      Read dry contact status\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrd:        Read dry contact transitions count\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrst:       Reset dry contact transitions count\n        edgerd:         Read dry contact transitions type, ret 0 - disable, 1 - rising, 2 - falling, 3 -both\n        edgewr:         Write dry contact transitions type: 0 - disable, 1 - rising, 2 - falling, 3 - bot                                  h\n        dacrd:          Read DAC voltage value (0 - 10V)\n        dacwr:          Write DAC output voltage value (0..10V)\n        adcrd:          Read ADC input voltage value (0 - 10V)\n                        Warning: For this measurements to be valid place the jumper in position \"0-10V\"\n        r1krd:          Read resistor input  value (1k) in kiloOhms, Warning: You must palce the jumper in position \"1K\".\n                        Return 30kOhm for resistor out of range\n        r10krd:         Read resistor input  value (10k) in kiloOhms, Warning: You must palce the jumper in position \"10K\".\n                        Return 30kOhm for resistor out of range\n        adccal:         Calibrate one ADC channel, the calibration must be done in 2 points at min 5V apart\n        adccalrst:      Reset the calibration for one ADC channel\n        daccal:         Calibrate one DAC channel, the calibration must be done in 2 points at min 5V apart\n        daccalrst:      Reset calibration for one DAC channel\n        wdtr:           Reload the watchdog timer and enable the watchdog if is disabled\n        wdtpwr:         Set the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtprd:         Get the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtipwr:        Set the watchdog initial period in seconds,\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtiprd:        Get the watchdog initial period in seconds.\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtopwr:        Set the watchdog off period in seconds (max 48 days).\n                        This is the time that watchdog mantain Raspberry turned off\n        wdtoprd:        Get the watchdog off period in seconds (max 48 days)\n                        This is the time that watchdog mantain Raspberry turned off\n        rs485rd:        Read the RS485 communication settings\n        rs485wr:        Write the RS485 communication settings\n        rtcrd:          Get the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n        rtcwr:          Set the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "8920b47930855b75",
        "type": "comment",
        "z": "ca03066f6a7451f4",
        "name": "Building Automation Hat ",
        "info": "https://sequentmicrosystems.com/collections/industrial-automation/products/raspberry-pi-building-automation",
        "x": 500,
        "y": 60,
        "wires": []
    },
    {
        "id": "c77d99f6194079d7",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 600,
        "wires": []
    },
    {
        "id": "05f98b9c86ec5f69",
        "type": "template",
        "z": "ca03066f6a7451f4",
        "name": "SENSORS",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "# device, varkey, command, title\necho \"htg-west\", \"tRZ4\", $(megabas 0 r10krd 1), \"Zone 4 Return Temperature\"\necho \"htg-west\", \"tRZ7\", $(megabas 1 r10krd 1), \"Zone 7 Return Temperature\"\necho \"htg-west\", \"tRZ6\", $(megabas 1 r10krd 2), \"Zone 6 Return Temperature\"\necho \"htg-west\", \"tRM\", $(megabas 1 r10krd 7), \"Manifold Return Temperature\"\necho \"htg-west\", \"tFM\", $(megabas 1 r10krd 8), \"Manifold Flow Temperature\"\necho \"htg-west\", \"tRZ5\", $(megabas 2 r10krd 1), \"Zone 5 Return Temperature\"\necho \"htg-west\", \"tRZ3\", $(megabas 2 r10krd 2), \"Zone 3 Return Temperature\"\necho \"htg-west\", \"tRZ2\", $(megabas 2 r10krd 3), \"Zone 2 Return Temperature\"\necho \"htg-west\", \"tRZ1\", $(megabas 2 r10krd 4), \"Zone 1 Return Temperature\"\necho \"htg-west\", \"tRZ9\", $(megabas 4 r10krd 1), \"Zone 9 Return Temperature\"\necho \"htg-west\", \"tRZ8\", $(megabas 4 r10krd 2), \"Zone 8 Return Temperature\"",
        "output": "str",
        "x": 390,
        "y": 240,
        "wires": [
            [
                "11c03d3cbc04923d"
            ]
        ]
    },
    {
        "id": "301ee1a1ec6f3074",
        "type": "template",
        "z": "ca03066f6a7451f4",
        "name": "WATCHDOGS",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "megabas 0 wdtr\nmegabas 1 wdtr",
        "output": "str",
        "x": 400,
        "y": 320,
        "wires": [
            [
                "69e19411dbc48dd4"
            ]
        ]
    },
    {
        "id": "69e19411dbc48dd4",
        "type": "file",
        "z": "ca03066f6a7451f4",
        "name": "",
        "filename": "/home/pi/node-hiu/sq2.sh",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 690,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "73eb8679965c1672",
        "type": "trigger",
        "z": "ca03066f6a7451f4",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 820,
        "wires": [
            [
                "b5726b628ee3e61b"
            ]
        ]
    },
    {
        "id": "b5726b628ee3e61b",
        "type": "exec",
        "z": "ca03066f6a7451f4",
        "command": "bash /home/pi/node-hiu/sq2.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sq2.sh",
        "x": 390,
        "y": 820,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "119c833c97aaa8ef",
        "type": "delay",
        "z": "ca03066f6a7451f4",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 230,
        "y": 760,
        "wires": [
            [
                "73eb8679965c1672"
            ]
        ]
    },
    {
        "id": "c0239bb42b5616f9",
        "type": "inject",
        "z": "ca03066f6a7451f4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "301ee1a1ec6f3074",
                "0b9b33794e321921",
                "05f98b9c86ec5f69"
            ]
        ]
    },
    {
        "id": "497a42acf94e3206",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 560,
        "wires": []
    },
    {
        "id": "40855875df672fcf",
        "type": "debug",
        "z": "ca03066f6a7451f4",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 740,
        "wires": []
    },
    {
        "id": "e38c98b2bbcdae42",
        "type": "rbe",
        "z": "ca03066f6a7451f4",
        "d": true,
        "name": "",
        "func": "deadbandEq",
        "gap": "10",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 960,
        "y": 720,
        "wires": [
            [
                "11ef8c40cb8707eb"
            ]
        ]
    },
    {
        "id": "10ffa87d11be0bce",
        "type": "mqtt out",
        "z": "ca03066f6a7451f4",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1090,
        "y": 180,
        "wires": []
    },
    {
        "id": "49608d86828c05de",
        "type": "function",
        "z": "ca03066f6a7451f4",
        "name": "_/",
        "func": "msg.topic = \"_/\" + msg.topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 180,
        "wires": [
            [
                "10ffa87d11be0bce"
            ]
        ]
    },
    {
        "id": "a1cf86eaafab5503",
        "type": "inject",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "120",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "02f26f5abea06a1e"
            ]
        ]
    },
    {
        "id": "02f26f5abea06a1e",
        "type": "function",
        "z": "6e5b1fa667db3a1d",
        "name": "function 1",
        "func": "\nvar readsnow = global.get(\"readings.local.htg-west.dat\");\nvar reads = flow.get(\"tR\");\n\nvar setV = flow.get(\"setV\") || {};\n\n\nfor (let i = 1; i < 10; i++) {\n\n    // as standard use temperature after last 2 minute pulse.\n    var tR = reads[\"tRZ\"+i];\n\n    var msg1 = {};\n    msg1.topic = \"chZ\" + i + \"/dat/setVV\"\n    msg1.zone = i;\n    \n    var setVme = setV[\"chZ\" + i] || 0\n\n    // if there is flow then use current temperature\n    if (setVme > 1.5) { tR = readsnow[\"tRZ\" + i].value; }\n\n    var errT = 30 - tR;\n    var prop = 0.01;\n    if (errT > 0 && errT < 3) { prop = 0.0005}\n\n    setVme = setVme + (errT * prop);\n\n    if (errT < -2) { setVme = 0 }\n\n    // if (tR > 30) { setVme = setVme - 1; }\n    // else if (tR < 25) { setVme = setVme + 1; }\n\n    if (setVme < 1) { setVme = 1; }\n    if (setVme > 10) { setVme = 10; }\n\n    setV[\"chZ\" + i] = 1 * setVme;\n\n    //setVme = parseInt(setVme*10)/10;\n    \n\n    \n\n    msg1.payload = setVme;\n    node.send(msg1);\n\n}\n\nflow.set(\"setV\", setV);\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "1c1640ba68b7c59c",
                "7c4d56e80d84d763"
            ]
        ]
    },
    {
        "id": "1c1640ba68b7c59c",
        "type": "debug",
        "z": "6e5b1fa667db3a1d",
        "name": "debug 56",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 140,
        "wires": []
    },
    {
        "id": "81049051f162fa66",
        "type": "function",
        "z": "6e5b1fa667db3a1d",
        "name": "function 2",
        "func": "//0 dacwr 4\n\nvar zone = msg.zone;\n\nif (zone == 1) { msg.payload = \"2 dacwr 1 \" + msg.payload; }\nelse if (zone == 2) { msg.payload = \"2 dacwr 2 \" + msg.payload; }\nelse if (zone == 3) { msg.payload = \"2 dacwr 3 \" + msg.payload; }\nelse if (zone == 4) { msg.payload = \"0 dacwr 4 \" + msg.payload; }\nelse if (zone == 5) { msg.payload = \"1 dacwr 2 \" + msg.payload; }\nelse if (zone == 6) { msg.payload = \"2 dacwr 4 \" + msg.payload; }\nelse if (zone == 7) { msg.payload = \"1 dacwr 4 \" + msg.payload; }\nelse if (zone == 8) { msg.payload = \"4 dacwr 2 \" + msg.payload; }\nelse if (zone == 9) { msg.payload = \"4 dacwr 4 \" + msg.payload; }\nelse {return null};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "577c46a4f252fcfa",
                "4de077834116fac8"
            ]
        ]
    },
    {
        "id": "b232577bad65fc41",
        "type": "exec",
        "z": "6e5b1fa667db3a1d",
        "command": "megabas",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1140,
        "y": 280,
        "wires": [
            [
                "208e6516b66ec266"
            ],
            [
                "208e6516b66ec266"
            ],
            []
        ]
    },
    {
        "id": "208e6516b66ec266",
        "type": "debug",
        "z": "6e5b1fa667db3a1d",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 280,
        "wires": []
    },
    {
        "id": "577c46a4f252fcfa",
        "type": "debug",
        "z": "6e5b1fa667db3a1d",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 320,
        "wires": []
    },
    {
        "id": "7c4d56e80d84d763",
        "type": "delay",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "5706432644c32b58"
            ]
        ]
    },
    {
        "id": "5706432644c32b58",
        "type": "function",
        "z": "6e5b1fa667db3a1d",
        "name": "VALVE CONTROL",
        "func": "\n  //var avgV = flow.get(\"avgV\"+msg.zone) || msg.payload;\n      \n  var setV = 1 * msg.payload;\n  \n  msg.payload = parseInt(msg.payload * 10) / 10;\n    \n  var previousV = flow.get(\"previousV\" + msg.zone) || [];\n    \n  var tot = 0;\n  for (var pr in previousV) {\n      tot = tot + previousV[pr];\n  }\n  var avg = tot / previousV.length;\n \n  if (avg<setV) { msg.payload = msg.payload  + 0.1; }\n\n    msg.payload = parseInt(msg.payload * 10) / 10;\n\n  previousV.push(msg.payload);\n  if (previousV.length > 10) { previousV.shift(); }\nflow.set(\"previousV\" + msg.zone,previousV);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "7a4daa845734f62a",
                "81049051f162fa66",
                "2590b43944f5da1e"
            ]
        ]
    },
    {
        "id": "7a4daa845734f62a",
        "type": "debug",
        "z": "6e5b1fa667db3a1d",
        "name": "debug 59",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "4de077834116fac8",
        "type": "rbe",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 970,
        "y": 280,
        "wires": [
            [
                "b232577bad65fc41"
            ]
        ]
    },
    {
        "id": "003cada99d4be34c",
        "type": "inject",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 480,
        "wires": [
            [
                "293cf7e19c848126"
            ]
        ]
    },
    {
        "id": "10dea4c1dc7b6905",
        "type": "exec",
        "z": "6e5b1fa667db3a1d",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 870,
        "y": 480,
        "wires": [
            [
                "1bd0e53036215bea"
            ],
            [
                "1bd0e53036215bea"
            ],
            []
        ]
    },
    {
        "id": "293cf7e19c848126",
        "type": "function",
        "z": "6e5b1fa667db3a1d",
        "name": "function 3",
        "func": "//0 dacwr 4\n\nvar runcmd = \"\";\n\nruncmd += \"megabas 2 dacwr 1 3\";\nruncmd += \" && megabas 2 dacwr 2 3\";\nruncmd += \" && megabas 2 dacwr 3 3\";\nruncmd += \" && megabas 0 dacwr 4 3\";\nruncmd += \" && megabas 1 dacwr 2 3\";\nruncmd += \" && megabas 2 dacwr 4 3\";\nruncmd += \" && megabas 1 dacwr 4 3\";\nruncmd += \" && megabas 4 dacwr 2 3\";\nruncmd += \" && megabas 4 dacwr 4 3\";\n\nmsg.payload = runcmd;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 480,
        "wires": [
            [
                "10dea4c1dc7b6905",
                "72f3d9c962ab75df"
            ]
        ]
    },
    {
        "id": "72f3d9c962ab75df",
        "type": "trigger",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 580,
        "wires": [
            [
                "3df2915dfb9991ee"
            ]
        ]
    },
    {
        "id": "3df2915dfb9991ee",
        "type": "function",
        "z": "6e5b1fa667db3a1d",
        "name": "function 4",
        "func": "//0 dacwr 4\n\nvar runcmd = \"\";\n\nruncmd += \"megabas 2 dacwr 1 \" + flow.get(\"previousV1\")[0];\nruncmd += \" && megabas 2 dacwr 2 \" + flow.get(\"previousV2\")[0];\nruncmd += \" && megabas 2 dacwr 3 \" + flow.get(\"previousV3\")[0];\nruncmd += \" && megabas 0 dacwr 4 \" + flow.get(\"previousV4\")[0];\nruncmd += \" && megabas 1 dacwr 2 \" + flow.get(\"previousV5\")[0];\nruncmd += \" && megabas 2 dacwr 4 \" + flow.get(\"previousV6\")[0];\nruncmd += \" && megabas 1 dacwr 4 \" + flow.get(\"previousV7\")[0];\nruncmd += \" && megabas 4 dacwr 2 \" + flow.get(\"previousV8\")[0];\nruncmd += \" && megabas 4 dacwr 4 \" + flow.get(\"previousV9\")[0];\n\nmsg.payload = runcmd;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 580,
        "wires": [
            [
                "10dea4c1dc7b6905",
                "d485483bd60a4f86"
            ]
        ]
    },
    {
        "id": "1bd0e53036215bea",
        "type": "debug",
        "z": "6e5b1fa667db3a1d",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 480,
        "wires": []
    },
    {
        "id": "8ba892de82b9c853",
        "type": "link out",
        "z": "6e5b1fa667db3a1d",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 925,
        "y": 200,
        "wires": []
    },
    {
        "id": "2590b43944f5da1e",
        "type": "rbe",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 200,
        "wires": [
            [
                "8ba892de82b9c853"
            ]
        ]
    },
    {
        "id": "8bbdc0281cc1ed32",
        "type": "inject",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "abc6ec1f340176e3",
        "type": "function",
        "z": "6e5b1fa667db3a1d",
        "name": "set 2 minute pulse temperatures",
        "func": "\nvar reads = global.get(\"readings.local.htg-west.dat\");\n\nfor (let i = 1; i < 10; i++) {\n\n    var tR = reads[\"tRZ\"+i].value;\n\n    flow.set(\"tR.tRZ\" + i, tR);\n\n}\n\n\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d485483bd60a4f86",
        "type": "trigger",
        "z": "6e5b1fa667db3a1d",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 690,
        "y": 700,
        "wires": [
            [
                "abc6ec1f340176e3"
            ]
        ]
    },
    {
        "id": "18afff5e549373d7",
        "type": "exec",
        "z": "f7fb808af6ec3dfd",
        "command": "sudo dhclient -v usb0",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 160,
        "wires": [
            [
                "f18faedff4608452"
            ],
            [
                "f18faedff4608452"
            ],
            []
        ]
    },
    {
        "id": "72e5a4e6d3081397",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "18afff5e549373d7"
            ]
        ]
    },
    {
        "id": "f18faedff4608452",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 160,
        "wires": []
    },
    {
        "id": "457f51b98fc5e740",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "d580f1742a4d2839"
            ]
        ]
    },
    {
        "id": "d580f1742a4d2839",
        "type": "exec",
        "z": "f7fb808af6ec3dfd",
        "command": "ifconfig",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 380,
        "y": 280,
        "wires": [
            [
                "cd3abe1c29f4fdc5"
            ],
            [
                "eb1452782441974d"
            ],
            []
        ]
    },
    {
        "id": "eb1452782441974d",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 280,
        "wires": []
    },
    {
        "id": "cd3abe1c29f4fdc5",
        "type": "split",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "splt": "\\n\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 260,
        "wires": [
            [
                "eb1452782441974d",
                "9663cf0dd586e7e6"
            ]
        ]
    },
    {
        "id": "db41a969834b404f",
        "type": "serial in",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "serial": "07c35ea8fb94a2fc",
        "x": 290,
        "y": 440,
        "wires": [
            [
                "2abbac7c95ae1f92",
                "7aed6888abbbe51c",
                "4b018fbdb0482ffd"
            ]
        ]
    },
    {
        "id": "fb14f7649c773f6b",
        "type": "serial out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "serial": "07c35ea8fb94a2fc",
        "x": 1070,
        "y": 620,
        "wires": []
    },
    {
        "id": "2abbac7c95ae1f92",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 500,
        "wires": []
    },
    {
        "id": "d8dfcfe85623cd74",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AT",
        "payloadType": "str",
        "x": 270,
        "y": 560,
        "wires": [
            [
                "ac4ff2763c6da88e"
            ]
        ]
    },
    {
        "id": "ac4ff2763c6da88e",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CSQ",
        "func": "msg.payload = \"AT+CSQ\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 560,
        "wires": [
            [
                "188d6e8d1db59bdd"
            ]
        ]
    },
    {
        "id": "c6ccf88dca3fc137",
        "type": "ui_text_input",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "b77843a6.57d18",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": true,
        "mode": "text",
        "delay": "500",
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 880,
        "y": 820,
        "wires": [
            [
                "3213253672ba4bc6"
            ]
        ]
    },
    {
        "id": "e6df19c15d1eab7f",
        "type": "ui_template",
        "z": "f7fb808af6ec3dfd",
        "group": "b77843a6.57d18",
        "name": "Virtual Keyboard",
        "order": 2,
        "width": "6",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button style=\"display:none\" class=\"VK\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 300,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "3247b2239d28a34f",
        "type": "ui_text",
        "z": "f7fb808af6ec3dfd",
        "group": "b77843a6.57d18",
        "order": 6,
        "width": "12",
        "height": "1",
        "name": "",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-right",
        "className": "",
        "x": 650,
        "y": 360,
        "wires": []
    },
    {
        "id": "98a6816266f7a422",
        "type": "ui_button",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "group": "b77843a6.57d18",
        "order": 5,
        "width": "3",
        "height": "1",
        "passthru": false,
        "label": "Send",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "atcmd",
        "payloadType": "flow",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "ba8bc239a8664a4b"
            ]
        ]
    },
    {
        "id": "3213253672ba4bc6",
        "type": "change",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "atcmd",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "5a93fc1784d90de1",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "r n",
        "func": "msg.payload = msg.payload + \"\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 760,
        "wires": [
            [
                "188d6e8d1db59bdd"
            ]
        ]
    },
    {
        "id": "ae71c117dece5339",
        "type": "ui_dropdown",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "b77843a6.57d18",
        "order": 3,
        "width": "3",
        "height": "1",
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Hello",
                "value": "AT",
                "type": "str"
            },
            {
                "label": "OK?",
                "value": "AT+CPSI?",
                "type": "str"
            },
            {
                "label": "Activate Modem",
                "value": "AT+CUSBPIDSWITCH=9011,1,1",
                "type": "str"
            },
            {
                "label": "Modem Setup",
                "value": "INSTALL",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 780,
        "y": 880,
        "wires": [
            [
                "c6ccf88dca3fc137"
            ]
        ]
    },
    {
        "id": "7aed6888abbbe51c",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "3247b2239d28a34f"
            ]
        ]
    },
    {
        "id": "9663cf0dd586e7e6",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "func": "\nvar iface = msg.payload.split(\":\")[0]\n\nif (iface !== \"usb0\") { return null; }\n\nvar lines = msg.payload.split(\"\\n\");\n\nvar direc,ltype;\n\nvar oot = [];\n\nvar megabytesTotal = 0\n\n\n\nfor (var l in lines) {\n    \n    direct=\"\";\n    ltype=\"\";\n    var ootl = {};\n     \n    lines[l]=lines[l].trim(); \n     \n    if (lines[l].indexOf(\"RX\")>-1) { direc = \"RX\"; }\n    else if (lines[l].indexOf(\"TX\")>-1) { direc = \"TX\"; }\n    \n    if (direc==\"\") { continue; }\n    \n    if (lines[l].indexOf(\"bytes\")>-1) { \n        \n        ltype = \"megabytes\"; \n        ootl.payload = parseFloat(lines[l].split(\"bytes \")[1].split(\" \")[0]) / 1000000;\n        megabytesTotal = megabytesTotal + ootl.payload;\n        \n    }\n    else if (lines[l].indexOf(\"errors\")>-1) { \n        \n        ltype = \"errors\"; \n        ootl.payload = parseFloat(lines[l].split(\"errors \")[1].split(\" \")[0]);\n    }\n    \n    if (ltype==\"\") { continue; }\n    \n   \n    ootl.topic = \"modem/\" + ltype + direc;\n    oot.push(ootl);\n    \n    \n}\n\noot.push({\"topic\":\"modem/megabytesTotal\", \"payload\":megabytesTotal});\n\nvar megabytesPM = parseInt(1000000 * (megabytesTotal - (flow.get(\"mblast\") || megabytesTotal))) / 1000000;\nflow.set(\"mblast\",megabytesTotal);\noot.push({\"topic\":\"modem/megabytesPM\", \"payload\":megabytesPM});\noot.push({\"topic\":\"modem/kbps\", \"payload\":parseInt(1000000 * megabytesPM / 60)/1000});\n\nmsg.payload = oot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "6e1c8b2c9ba19b80"
            ]
        ]
    },
    {
        "id": "0363247e5746ad9e",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 360,
        "wires": []
    },
    {
        "id": "6e1c8b2c9ba19b80",
        "type": "split",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 920,
        "y": 320,
        "wires": [
            [
                "57fd0078ccdc1fd3"
            ]
        ]
    },
    {
        "id": "57fd0078ccdc1fd3",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "func": "msg = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 320,
        "wires": [
            [
                "0363247e5746ad9e",
                "a3897f36b4cb5d73",
                "2ac6a4531a46aa0b"
            ]
        ]
    },
    {
        "id": "a3897f36b4cb5d73",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1195,
        "y": 300,
        "wires": []
    },
    {
        "id": "4b018fbdb0482ffd",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "func": "\nflow.set(\"lastUSBin\", new Date().getTime());\n\nvar oot = [];\n\nif (msg.payload.indexOf(\"AT+CIMI\")>-1) {\n    \n    //msg.topic = \"modem/simIMSI\";\n    //msg.payload = msg.payload.split(\"AT+CIMI\")[1].split(\"\\n\")[1].trim();\n    oot.push({\"topic\":\"modem/simIMSI\", \"payload\":msg.payload.split(\"AT+CIMI\")[1].split(\"\\n\")[1].trim()});\n}\n\nelse if (msg.payload.indexOf(\"+CPSI:\")>-1) {\n    \n    //<System Mode>,<Operation Mode>,<MCC>-<MNC>,<TAC>,\n    //<SCellID>,<PCellID>,<Frequency Band>,<earfcn>,<dlbw>,\n    //<ulbw>,<RSRQ>,<RSRP>,<RSSI>,<RSSNR>\n    \n    if (msg.payload.indexOf(\"LTE\")>-1) {\n        \n        flow.set(\"online\",\"1\");\n        \n        var flds = msg.payload.split(\"CPSI:\")[1].trim().split(\",\");\n        \n        oot.push({\"topic\":\"modem/sysMode\", \"payload\":flds[0]});\n        oot.push({\"topic\":\"modem/opMode\", \"payload\":flds[1]});\n        oot.push({\"topic\":\"modem/MCC-MNC\", \"payload\":flds[2]});\n        oot.push({\"topic\":\"modem/TAC\", \"payload\":flds[3]});\n        oot.push({\"topic\":\"modem/SCellID\", \"payload\":flds[4]});\n        oot.push({\"topic\":\"modem/PCellID\", \"payload\":flds[5]});\n        oot.push({\"topic\":\"modem/frqBand\", \"payload\":flds[6]});\n        oot.push({\"topic\":\"modem/earfcn\", \"payload\":flds[7]});\n        oot.push({\"topic\":\"modem/dlbw\", \"payload\":flds[8]});\n        oot.push({\"topic\":\"modem/ulbw\", \"payload\":flds[9]});\n        oot.push({\"topic\":\"modem/RSRQ\", \"payload\":flds[10]});\n        oot.push({\"topic\":\"modem/RSRP\", \"payload\":parseInt(flds[11])/10});\n        oot.push({\"topic\":\"modem/RSSI\", \"payload\":flds[12]});\n        oot.push({\"topic\":\"modem/RSSNR\", \"payload\":flds[13].split(\"\\r\")[0]});\n        \n        var xpSignal = parseInt(140 + (parseInt(flds[11])/10));\n        \n        oot.push({\"topic\":\"system/signalGSM\", \"payload\":xpSignal});\n        \n        \n    }\n    else { flow.set(\"online\",\"0\"); }\n}\n\nif (oot.length<1) { return null; }\n\nmsg.payload = oot;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 440,
        "wires": [
            [
                "2d8163af1857c77e",
                "6e1c8b2c9ba19b80"
            ]
        ]
    },
    {
        "id": "2d8163af1857c77e",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 440,
        "wires": []
    },
    {
        "id": "34fb14bd301b745d",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "23",
        "topic": "",
        "payload": "AT",
        "payloadType": "str",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "8af54b7140236bc2"
            ]
        ]
    },
    {
        "id": "8af54b7140236bc2",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CIMI",
        "func": "msg.payload = \"AT+CIMI\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 620,
        "wires": [
            [
                "188d6e8d1db59bdd"
            ]
        ]
    },
    {
        "id": "81310b0590f43aba",
        "type": "link in",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "af6ed0a2.3108e",
            "57951fb3.4ee4",
            "9abe6fd2.97b23"
        ],
        "x": 315,
        "y": 840,
        "wires": [
            [
                "2fa6d24c4903419c",
                "838d0e604cd5ab48"
            ]
        ]
    },
    {
        "id": "2fa6d24c4903419c",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CRESET",
        "func": "msg.payload = \"AT+CRESET\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 840,
        "wires": [
            [
                "188d6e8d1db59bdd"
            ]
        ]
    },
    {
        "id": "a614ec350015cd32",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "56",
        "topic": "",
        "payload": "AT",
        "payloadType": "str",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "f125196c63163f4f"
            ]
        ]
    },
    {
        "id": "f125196c63163f4f",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CPSI?",
        "func": "msg.payload = \"AT+CPSI?\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 680,
        "wires": [
            [
                "f3a0269ef0732973"
            ]
        ]
    },
    {
        "id": "188d6e8d1db59bdd",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 840,
        "y": 620,
        "wires": [
            [
                "fb14f7649c773f6b",
                "88be147928dadefc"
            ]
        ]
    },
    {
        "id": "2ac6a4531a46aa0b",
        "type": "switch",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "signalGSM",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "kbps",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 180,
        "wires": [
            [
                "1a74481e0e8eb2ec",
                "684b90ba8f894320"
            ],
            [
                "684b90ba8f894320"
            ]
        ]
    },
    {
        "id": "1a74481e0e8eb2ec",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "9189a361.6d051",
            "26b0c09f.0e9e2"
        ],
        "x": 1215,
        "y": 160,
        "wires": []
    },
    {
        "id": "684b90ba8f894320",
        "type": "ui_chart",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "group": "b77843a6.57d18",
        "order": 7,
        "width": "12",
        "height": "4",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#e91c1c",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1230,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "c242700942ee7b03",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CUSBPIDSWITCH=9011,1,1",
        "func": "flow.set(\"pleasewait\",\"0\");\nmsg.payload = \"AT+CUSBPIDSWITCH=9011,1,1\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1420,
        "wires": [
            [
                "dbafd52736b456cc"
            ]
        ]
    },
    {
        "id": "4c27d6612a4a09f2",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1500,
        "wires": [
            [
                "fa43a426e06f2ca5"
            ]
        ]
    },
    {
        "id": "dbafd52736b456cc",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "mode": "link",
        "links": [
            "7235b73df778d84e",
            "39f3596dbd265d3c",
            "0419869663aa8793"
        ],
        "x": 1115,
        "y": 1260,
        "wires": []
    },
    {
        "id": "144342ae23a3d155",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "5c4cda7ae49ae54f"
            ]
        ]
    },
    {
        "id": "bc41bef38fb2a72f",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1200,
        "wires": [
            [
                "580fb085d472796e",
                "9060c4ad4c1e6ac0"
            ]
        ]
    },
    {
        "id": "580fb085d472796e",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CGDCONT=1,\"IPV4V6\",\"wsim\"",
        "func": "flow.set(\"pleasewait\",\"1\");\nmsg.payload = 'AT+CGDCONT=1,\"IPV4V6\",\"wsim\"\\r\\n'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1200,
        "wires": [
            [
                "dbafd52736b456cc"
            ]
        ]
    },
    {
        "id": "e9d99b70e6bb5698",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CGDCONT=6,\"IPV4V6\",\"wsim\"",
        "func": "msg.payload = 'AT+CGDCONT=6,\"IPV4V6\",\"wsim\"\\r\\n'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1240,
        "wires": [
            [
                "dbafd52736b456cc"
            ]
        ]
    },
    {
        "id": "de82cc59492ec473",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CFUN=0",
        "func": "msg.payload = 'AT+CFUN=0\\r\\n'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "dbafd52736b456cc"
            ]
        ]
    },
    {
        "id": "61104f2b9ed6b4c4",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CGAUTH=1,1,”user”,”pass”",
        "func": "msg.payload = 'AT+CGAUTH=1,1,”user”,”pass”\\r\\n'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1280,
        "wires": [
            [
                "dbafd52736b456cc"
            ]
        ]
    },
    {
        "id": "81dd18ba1661c8a9",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CFUN=1",
        "func": "msg.payload = 'AT+CFUN=1\\r\\n'\n\nflow.set(\"pleasewait\",\"0\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1360,
        "wires": [
            [
                "dbafd52736b456cc"
            ]
        ]
    },
    {
        "id": "9060c4ad4c1e6ac0",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1240,
        "wires": [
            [
                "e9d99b70e6bb5698",
                "d0252a16d4faaea8"
            ]
        ]
    },
    {
        "id": "b5058f7be1f8f6e8",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1320,
        "wires": [
            [
                "de82cc59492ec473",
                "8dd101b3f61972b2"
            ]
        ]
    },
    {
        "id": "d0252a16d4faaea8",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1280,
        "wires": [
            [
                "61104f2b9ed6b4c4",
                "b5058f7be1f8f6e8"
            ]
        ]
    },
    {
        "id": "8dd101b3f61972b2",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1360,
        "wires": [
            [
                "81dd18ba1661c8a9",
                "3324dbe196b282c8"
            ]
        ]
    },
    {
        "id": "0419869663aa8793",
        "type": "link in",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "dbafd52736b456cc",
            "440b8c6c5f6627a5",
            "7de6aedc7e614b36",
            "1b13ac257ae8ed21"
        ],
        "x": 595,
        "y": 820,
        "wires": [
            [
                "188d6e8d1db59bdd",
                "c6ccf88dca3fc137"
            ]
        ]
    },
    {
        "id": "ba8bc239a8664a4b",
        "type": "switch",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "INSTALL",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 740,
        "wires": [
            [
                "30228a2a3de580f6"
            ],
            [
                "5a93fc1784d90de1",
                "76bc0939e523627d"
            ]
        ]
    },
    {
        "id": "c678207f5a109d11",
        "type": "link in",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "30228a2a3de580f6"
        ],
        "x": 215,
        "y": 1080,
        "wires": [
            [
                "666ee63d4103dbef"
            ]
        ]
    },
    {
        "id": "30228a2a3de580f6",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "mode": "link",
        "links": [
            "c678207f5a109d11"
        ],
        "x": 395,
        "y": 720,
        "wires": []
    },
    {
        "id": "44f9b990821792ad",
        "type": "ui_toast",
        "z": "f7fb808af6ec3dfd",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 530,
        "y": 1080,
        "wires": [
            [
                "2345d226a89ae3c7"
            ]
        ]
    },
    {
        "id": "666ee63d4103dbef",
        "type": "change",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Run Modem Setup Script ?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 1080,
        "wires": [
            [
                "44f9b990821792ad"
            ]
        ]
    },
    {
        "id": "2345d226a89ae3c7",
        "type": "switch",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OK",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 680,
        "y": 1080,
        "wires": [
            [
                "5c4cda7ae49ae54f"
            ]
        ]
    },
    {
        "id": "a56e9d1ee4d1a6c3",
        "type": "change",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pleasewait",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "76bc0939e523627d",
        "type": "trigger",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 960,
        "wires": [
            [
                "a56e9d1ee4d1a6c3"
            ]
        ]
    },
    {
        "id": "f3a0269ef0732973",
        "type": "switch",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "property": "pleasewait",
        "propertyType": "flow",
        "rules": [
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 680,
        "wires": [
            [
                "188d6e8d1db59bdd"
            ]
        ]
    },
    {
        "id": "3324dbe196b282c8",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 1420,
        "wires": [
            [
                "c242700942ee7b03",
                "4c27d6612a4a09f2"
            ]
        ]
    },
    {
        "id": "fa43a426e06f2ca5",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "mode": "link",
        "links": [
            "beb83274c8bcddc0",
            "b5da176f6a494805"
        ],
        "x": 655,
        "y": 1500,
        "wires": []
    },
    {
        "id": "b5da176f6a494805",
        "type": "link in",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "fa43a426e06f2ca5"
        ],
        "x": 255,
        "y": 100,
        "wires": [
            [
                "18afff5e549373d7"
            ]
        ]
    },
    {
        "id": "a8775db8164ae2ab",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "AT+CUSBPIDSWITCH=9011,1,1",
        "func": "flow.set(\"pleasewait\",\"1\");\nmsg.payload = \"AT+CUSBPIDSWITCH=9011,1,1\\r\\n\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 80,
        "wires": [
            [
                "1b13ac257ae8ed21"
            ]
        ]
    },
    {
        "id": "1b13ac257ae8ed21",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "mode": "link",
        "links": [
            "7235b73df778d84e",
            "39f3596dbd265d3c",
            "0419869663aa8793"
        ],
        "x": 1215,
        "y": 80,
        "wires": []
    },
    {
        "id": "82962db8cbbfdfb3",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "Check we have data connection",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": "70",
        "topic": "",
        "payloadType": "date",
        "x": 520,
        "y": 80,
        "wires": [
            [
                "5f3a83a6c9d20788"
            ]
        ]
    },
    {
        "id": "5f3a83a6c9d20788",
        "type": "switch",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "property": "mblast",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 770,
        "y": 80,
        "wires": [
            [
                "a8775db8164ae2ab"
            ]
        ]
    },
    {
        "id": "2f78df4d7b4c71f1",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 800,
        "wires": [
            [
                "2fa6d24c4903419c"
            ]
        ]
    },
    {
        "id": "f8c3f49e15657a5a",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "WATCHDOG",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "180",
        "crontab": "",
        "once": true,
        "onceDelay": "120",
        "topic": "",
        "payloadType": "date",
        "x": 180,
        "y": 1260,
        "wires": [
            [
                "2991d393b14c7b2d"
            ]
        ]
    },
    {
        "id": "2991d393b14c7b2d",
        "type": "switch",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "property": "online",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 220,
        "y": 1320,
        "wires": [
            [
                "63b29f0113dfa8b2"
            ]
        ]
    },
    {
        "id": "63b29f0113dfa8b2",
        "type": "trigger",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "30",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 1380,
        "wires": [
            [
                "bc41bef38fb2a72f"
            ]
        ]
    },
    {
        "id": "5c4cda7ae49ae54f",
        "type": "change",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "pleasewait",
                "pt": "flow",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 1160,
        "wires": [
            [
                "bc41bef38fb2a72f"
            ]
        ]
    },
    {
        "id": "a7d0367a98a2e312",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "60",
        "topic": "",
        "payloadType": "date",
        "x": 950,
        "y": 500,
        "wires": [
            [
                "845e7ef3f4bed77e"
            ]
        ]
    },
    {
        "id": "db32607d56940241",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1315,
        "y": 500,
        "wires": []
    },
    {
        "id": "bee89ed3410ddd1f",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 420,
        "wires": []
    },
    {
        "id": "845e7ef3f4bed77e",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "alarms",
        "func": "var lastUSBin = flow.get(\"lastUSBin\") || 0;\n\nvar timin = new Date().getTime();\n\n\n\n\nvar age = (timin - lastUSBin)/1000;\n\nmsg.topic = \"alarm/modemUSB\";\nmsg.title = \"Modem USB serial connection\";\nif (age < 90) { msg.payload = \"ok\"; }\nelse { msg.payload = \"No modem response\"; }\n\n\nvar msg2 = {};\nmsg2.topic = \"alarm/modemLTE\";\nmsg2.title = \"Modem LTE 4G connection\";\n\nif (msg.payload !== \"ok\") { \n    \n    msg2.payload = \"No modem response\";  \n    \n    var sysage = (timin - flow.get(\"starttime\"))/1000;\n    if (sysage < 900) {\n        return [msg,msg2,null];\n        \n    } else {\n        msg2.topic = \"alarm/modemLTE\";\n        msg2.payload = \"Rebooting System\";\n        return [msg,msg2,msg2];\n    } \n}\n\nelse if (flow.get(\"online\")==\"0\") { msg2.payload = \"No LTE connection\"; }\n\nelse { msg2.payload = \"ok\"; global.set(\"rebooting\",null); }\n    \nreturn [msg,msg2,null];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 500,
        "wires": [
            [
                "db32607d56940241",
                "bee89ed3410ddd1f"
            ],
            [
                "db32607d56940241",
                "bee89ed3410ddd1f"
            ],
            [
                "bee89ed3410ddd1f",
                "1bda836d9f35d5d1"
            ]
        ]
    },
    {
        "id": "04bc705ed6065b7a",
        "type": "inject",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 900,
        "y": 560,
        "wires": [
            [
                "5249ed4114a7dfa0"
            ]
        ]
    },
    {
        "id": "5249ed4114a7dfa0",
        "type": "change",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "starttime",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "9e0bfe87aedfa861",
        "type": "exec",
        "z": "f7fb808af6ec3dfd",
        "command": "sudo shutdown now",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1520,
        "y": 560,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "1bda836d9f35d5d1",
        "type": "delay",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1340,
        "y": 560,
        "wires": [
            [
                "9e0bfe87aedfa861"
            ]
        ]
    },
    {
        "id": "88be147928dadefc",
        "type": "debug",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 720,
        "wires": []
    },
    {
        "id": "838d0e604cd5ab48",
        "type": "function",
        "z": "f7fb808af6ec3dfd",
        "name": "resetModemCount",
        "func": "msg.topic = \"set/resetModemCount\";\nmsg.title = \"No Internet Reset Modem Counter\";\n\nmsg.payload = global.get(\"settings.resetModemCount.value\") || 0;\n\nmsg.payload = parseInt(msg.payload) + 1;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 900,
        "wires": [
            [
                "b49c3f37c8f9bebd"
            ]
        ]
    },
    {
        "id": "b49c3f37c8f9bebd",
        "type": "link out",
        "z": "f7fb808af6ec3dfd",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 615,
        "y": 900,
        "wires": []
    },
    {
        "id": "61ada898.7707e8",
        "type": "ui_template",
        "z": "f7fb808af6ec3dfd",
        "group": "b77843a6.57d18",
        "name": "header icons",
        "order": 1,
        "width": "6",
        "height": "1",
        "format": "<script>\n    (function(scope) {\n        //console.log('Position 1');\n        //console.dir(scope);\n        //console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            //console.log('Position 2');\n            //console.dir(data);\n            //alert(data);\n            instr = data;\n        });\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 270,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "1773a9ee27c1bdc3",
        "type": "link in",
        "z": "f7fb808af6ec3dfd",
        "name": "link in 2",
        "links": [
            "a42d6f8e421e668f"
        ],
        "x": 145,
        "y": 40,
        "wires": [
            [
                "61ada898.7707e8"
            ]
        ]
    },
    {
        "id": "b65959c28fe567ec",
        "type": "function",
        "z": "6d332316b4ce7165",
        "name": "InfluxDB",
        "func": "\nvar oot = {};\nvar tags = {};\nvar tops = msg.topic.split(\"/\");\n\n\n\n\nif (!tops[4]) { return null; }\n\nvar net = global.get(\"networkId\") || \"local\";\nnet = (tops[0] == \"local\" ? net : tops[0])\n\ntags.node = tops[1];\ntags.device = tops[2];\ntags.network = net;\ntags.vargroup = tops[3];\ntags.varkey = tops[4];\n\n//tags.title = flow.get(\"title.\" + tops[2]) || tops[2];\n\ntry { tags.title = global.get(\"readings.local.\" + tops[2] + \".\" + tops[3] + \".\" + tops[4] + \".title\"); }\ncatch {}\n\nvar msg1={};\nmsg1.topic = \"\"+msg.topic;\n\ntry {\n\n    \n\n    if (isNaN(msg.payload)) { msg1.payload = '' + msg.payload  }\n    else { msg1.payload = parseFloat(msg.payload); }\n    \n\n    oot[tops[3] + '_' + tops[4]] = msg1.payload;\n\n    msg1.measurement = net + '_' + tops[1] + '_' + tops[2];\n    msg1.payload = [oot, tags];\n\n    return msg1;\n\n\n\n\n} catch { return null; }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 320,
        "wires": [
            [
                "9e55c9df4eb3ee29",
                "4ef3c2e86ff925e4"
            ]
        ]
    },
    {
        "id": "60bb6550351ce1d2",
        "type": "subflow:344fa160119932f8",
        "z": "6d332316b4ce7165",
        "name": "",
        "x": 540,
        "y": 340,
        "wires": [
            [
                "b65959c28fe567ec",
                "5fbbdb33f1ed7372"
            ]
        ]
    },
    {
        "id": "73d07a2516badbf4",
        "type": "link in",
        "z": "6d332316b4ce7165",
        "name": "Influx",
        "links": [
            "adae7e8a.85a74"
        ],
        "x": 235,
        "y": 340,
        "wires": [
            [
                "5f1578c962eb06e8",
                "915871ad6c63edd8"
            ]
        ]
    },
    {
        "id": "5f1578c962eb06e8",
        "type": "switch",
        "z": "6d332316b4ce7165",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/raw/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "local/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/dat/t",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "weather",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/dat/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/stat/",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 370,
        "y": 340,
        "wires": [
            [],
            [],
            [
                "400856598aa18520"
            ],
            [
                "60bb6550351ce1d2"
            ],
            [
                "60bb6550351ce1d2"
            ],
            [
                "60bb6550351ce1d2"
            ],
            [
                "aa078b6a7e4c1379"
            ]
        ]
    },
    {
        "id": "9e55c9df4eb3ee29",
        "type": "influxdb out",
        "z": "6d332316b4ce7165",
        "d": true,
        "influxdb": "93ab2985bf8ca250",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "heatweb",
        "bucket": "swanseashed",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "aa078b6a7e4c1379",
        "type": "subflow:3bcc1796d56e0e4a",
        "z": "6d332316b4ce7165",
        "name": "",
        "x": 540,
        "y": 380,
        "wires": [
            [
                "b65959c28fe567ec",
                "5fbbdb33f1ed7372"
            ]
        ]
    },
    {
        "id": "db394f7f29c771d2",
        "type": "catch",
        "z": "6d332316b4ce7165",
        "name": "",
        "scope": [
            "9e55c9df4eb3ee29"
        ],
        "uncaught": false,
        "x": 930,
        "y": 500,
        "wires": [
            [
                "fdd02c835aedad87",
                "56d31802b24d2b58"
            ]
        ]
    },
    {
        "id": "d421471bf9d397f2",
        "type": "trigger",
        "z": "6d332316b4ce7165",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "topic",
        "topic": "topic",
        "outputs": 1,
        "x": 770,
        "y": 440,
        "wires": [
            [
                "9e55c9df4eb3ee29"
            ]
        ]
    },
    {
        "id": "56d31802b24d2b58",
        "type": "switch",
        "z": "6d332316b4ce7165",
        "name": "",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "d421471bf9d397f2"
            ]
        ]
    },
    {
        "id": "b13f8c49f23f97d7",
        "type": "comment",
        "z": "6d332316b4ce7165",
        "name": "Try resending dropped messages",
        "info": "",
        "x": 690,
        "y": 500,
        "wires": []
    },
    {
        "id": "fdd02c835aedad87",
        "type": "debug",
        "z": "6d332316b4ce7165",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 520,
        "wires": []
    },
    {
        "id": "400856598aa18520",
        "type": "rbe",
        "z": "6d332316b4ce7165",
        "name": "",
        "func": "rbe",
        "gap": "0.02",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 550,
        "y": 240,
        "wires": [
            [
                "f2358e5a2ac77fa7"
            ]
        ]
    },
    {
        "id": "5805ef8a5b6e0b71",
        "type": "inject",
        "z": "6d332316b4ce7165",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "400856598aa18520"
            ]
        ]
    },
    {
        "id": "f2358e5a2ac77fa7",
        "type": "switch",
        "z": "6d332316b4ce7165",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 710,
        "y": 240,
        "wires": [
            [
                "b65959c28fe567ec",
                "c1e9834df04469c1"
            ]
        ]
    },
    {
        "id": "4ef3c2e86ff925e4",
        "type": "debug",
        "z": "6d332316b4ce7165",
        "name": "debug 33",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 260,
        "wires": []
    },
    {
        "id": "915871ad6c63edd8",
        "type": "debug",
        "z": "6d332316b4ce7165",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 460,
        "wires": []
    },
    {
        "id": "c1e9834df04469c1",
        "type": "mqtt out",
        "z": "6d332316b4ce7165",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ed2df76d3b6a6aa",
        "x": 930,
        "y": 380,
        "wires": []
    },
    {
        "id": "5fbbdb33f1ed7372",
        "type": "function",
        "z": "6d332316b4ce7165",
        "name": "userProperties",
        "func": "try { \n    \n    var tops = msg.topic.split(\"/\");\n\n    var title = global.get(\"readings.local.\" + tops[2] + \".\" + tops[3] + \".\" + tops[4] + \".title\"); \n    \n    if (title) {\n        \n        msg.userProperties = {\"title\": title};\n        // userProperties\n    }\n}\ncatch { }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 380,
        "wires": [
            [
                "c1e9834df04469c1"
            ]
        ]
    },
    {
        "id": "30470aa5af24b743",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128)\n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}\n\n//var msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\nvar msg2 = { \"payload\": msg.payload };\n\nmsg.address = flow.get(\"curraddr\"); //msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nvar minfo = flow.get(\"registers.r\" + msg.register) || null;\nvar dinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nflow.set(\"modbusIn\",\"xxx\");\n\n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n\n        if (minfo[\"values\"]) {\n            \n            if (minfo[\"values\"][15-bc]) {\n                if (minfo[\"values\"][15-bc][\"\" + item.payload]) { item.payload = minfo[\"values\"][15-bc][\"\" + item.payload]; }\n            }\n        }\n\n\n        \n        oot[item.topic] = item;\n        \n        bc=bc-1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} \n\nelse if (minfo.datatype == \"IEEE754\") {\n\n    msg.payload = String.fromCharCode(msg.payload[3]) + String.fromCharCode(msg.payload[4]) + String.fromCharCode(msg.payload[5]) + String.fromCharCode(msg.payload[6]);\n    msg.payload = Buffer.from(msg.payload, 'ascii');\n\n    \n    let intValue;\n    // if (typeof msg.payload === \"number\") {\n    //     intValue = msg.payload;\n    // } else if (typeof msg.payload === \"string\") {\n    //     intValue = Number(msg.payload);\n    // } else if (msg.payload.length == 4) {\n        // four byte array or buffer\n        intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n    // } else {\n    //     node.warn(\"Unrecognised payload type or length\");\n    // }\n\n    msg.payload = Int2Float32(intValue);\n        \n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\", \"/\");\n\n\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n\n\n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else { msg.title = (minfo[\"reading\"].split(\".\")[1] ? minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg, null];\n\n}\n\nelse {\n    \n   \n    msg.payload = msg.payload[0];       \n\n    //msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n\n    if (minfo[\"values\"]) {\n        \n        if (minfo[\"values\"]==\"alarmCodes\") { \n            \n            var ac = flow.get(\"alarmCodes\");\n            if (ac[\"\" + msg.payload]) { msg.payload = ac[\"\" + msg.payload]; }\n        }\n        \n        else if (minfo[\"values\"][\"\" + msg.payload]) { msg.payload = minfo[\"values\"][\"\" + msg.payload]; }\n    }\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n    \n    \n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 760,
        "wires": [
            [
                "811c7c8034d9a2d1",
                "1a6d2c5daaac621b",
                "79f5602f3ee8e211"
            ],
            [
                "623634dc866420b8",
                "417e56f311226c03",
                "1a6d2c5daaac621b"
            ]
        ]
    },
    {
        "id": "811c7c8034d9a2d1",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1070,
        "y": 620,
        "wires": []
    },
    {
        "id": "18c3240ed6122413",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "Modbus",
        "func": "// http://www.simplymodbus.ca/FC03.htm\n//11 03 006B 0003 7687\n// 11 03 06 AE41 5652 4340 49AD\n\n// uses address 17 as default.\n\n//var offs = 0;\n//if  (msg.payload[0] === 0) { offs = 1; }\nif (!msg.payload) { msg.payload={}; }\n\nvar address = msg.payload.address || msg.address ||8;\nvar fc = msg.payload.fc || msg.fc ;\nvar register = msg.payload.register || msg.register || 1;\nflow.set(\"curreg\", register);\nflow.set(\"curraddr\", address);\nflow.set(\"fc\", fc);\n\n//register = register - 1;\n\nvar rlength = msg.payload.rlength || msg.rlength || 1;\n\nvar r1 = Math.floor(register / 256);\nvar r2 = register % 256;\n\n\n\n\nvar targetv = msg.targetv; //999;\n\n\nif (fc != 3 && fc != 6) { return null; }\n\nflow.set(\"modbusIn\",\"\");\n\n//targetv = global.get(\"modbus.\"+register+\".value\") || 0;\n\n//targetv = parseInt(global.get(\"modbus.\"+register+\".multiply\") || 1) * targetv;\n\n\nfunction crc16(buffer) {\n    var crc = 0xFFFF;\n    var odd;\n\n    for (var i = 0; i < buffer.length; i++) {\n        crc = crc ^ buffer[i];\n\n        for (var j = 0; j < 8; j++) {\n            odd = crc & 0x0001;\n            crc = crc >> 1;\n            if (odd) {\n                crc = crc ^ 0xA001;\n            }\n        }\n    }\n\n    crc  = \"0000\" + crc.toString(16);\n    crc = crc.substr(-4);\n\n    return crc;\n}\n\nvar tosend = \"\";\nvar crcString =\"\";\nvar msg2={};\n \nif (fc == 3) {   // read\n\n    \n    tosend = String.fromCharCode(address) + String.fromCharCode(3);\n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    tosend += String.fromCharCode(0) + String.fromCharCode(rlength);\n    \n    crcString = crc16(Buffer.from(tosend, 'ascii'));\n    tosend += String.fromCharCode(parseInt(crcString.substr(2,2),16)) + String.fromCharCode(parseInt(crcString.substr(0,2),16)) ;\n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    tosend = \"-\" + tosend;\n    \n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} else if (fc == 6 ) {    // write\n\n\n    tosend = String.fromCharCode(address) + String.fromCharCode(6);\n    \n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    \n    targetv = parseInt(targetv) ;\n    var hexStringValue  = \"0000\" + targetv.toString(16);\n    hexStringValue = hexStringValue.substr(-4);\n    \n    \n    tosend += String.fromCharCode(parseInt(hexStringValue.substr(0,2),16)) + String.fromCharCode(parseInt(hexStringValue.substr(2,2),16)) ;\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    crcString = crc16(msg.payload);\n   \n    tosend += String.fromCharCode(parseInt(crcString.substr(2,2),16)) + String.fromCharCode(parseInt(crcString.substr(0,2),16)) ;\n   \n       \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    tosend = \"-\" + tosend;\n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} \n\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 380,
        "wires": [
            [
                "79a11a822b7718de",
                "179275cfd76892d9",
                "78330a55af145ab6"
            ],
            []
        ]
    },
    {
        "id": "50c0f292d874d639",
        "type": "serial in",
        "z": "ad903b095342f1e3",
        "d": true,
        "name": "",
        "serial": "02cf675553394d1d",
        "x": 650,
        "y": 760,
        "wires": [
            [
                "30470aa5af24b743"
            ]
        ]
    },
    {
        "id": "c25746fb0e12f6a4",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 830,
        "y": 700,
        "wires": []
    },
    {
        "id": "179275cfd76892d9",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1350,
        "y": 340,
        "wires": []
    },
    {
        "id": "0d50368af937803d",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "payload": "registers",
        "payloadType": "flow",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "e1b481c3fa92add6"
            ]
        ]
    },
    {
        "id": "e1b481c3fa92add6",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "",
        "func": "\nvar oot = [];\n\nfor (var r in flow.get(\"registers\")) {\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = flow.get(\"registers.\"+r+\".register\");\n        item.rlength = 1;\n\n        oot.push(item);\n        \n    }\n    \n}\n\nmsg.payload = oot;\n\nflow.set(\"msglist\",[]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "db3944ca68ac509d"
            ]
        ]
    },
    {
        "id": "77d5ae6046d334eb",
        "type": "split",
        "z": "ad903b095342f1e3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "bc4bf3214c0a7eac"
            ]
        ]
    },
    {
        "id": "1f9bc5033a4b9763",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "e53bc655ccc539b5",
        "type": "link out",
        "z": "ad903b095342f1e3",
        "name": "",
        "mode": "link",
        "links": [
            "702c0abe6b56b679",
            "72fc070f.39dd8"
        ],
        "x": 1575,
        "y": 720,
        "wires": []
    },
    {
        "id": "623634dc866420b8",
        "type": "split",
        "z": "ad903b095342f1e3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1030,
        "y": 920,
        "wires": [
            [
                "8262807f19738387"
            ]
        ]
    },
    {
        "id": "417e56f311226c03",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1050,
        "y": 880,
        "wires": []
    },
    {
        "id": "60af67351daa508e",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "34 - set PIR delay to 60s",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 34;\nmsg.rlength = 1;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 60;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "da92b9efccdb59c8"
            ]
        ]
    },
    {
        "id": "bd9da24c7c6bf43d",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "60af67351daa508e"
            ]
        ]
    },
    {
        "id": "9b6a08f9df95edbf",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "Read Key Registers",
        "func": "\n\nvar oot = [];\n\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 11;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n        \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 12;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n   \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 8;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n    }\n    \n\n\nmsg.payload = oot;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "77d5ae6046d334eb"
            ]
        ]
    },
    {
        "id": "b9251d901e26a072",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "9b6a08f9df95edbf"
            ]
        ]
    },
    {
        "id": "bc4bf3214c0a7eac",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "SHIFT",
        "func": "\nvar msglist=flow.get(\"msglist\") || [];\n\n//if (msglist.length> 100) { msglist = []; }\n    \nif (msg.payload == \"next\") { \n    \n    if (!msglist[0]) { return null; }\n    \n    if (flow.get(\"modbusIn\")===\"\") { return null; }\n    \n    msg = msglist[0];\n    msglist.shift();\n    flow.set(\"msglist\",msglist);\n    return msg;\n}\n\nelse {   \n    \n    msglist.push(msg); \n    flow.set(\"msglist\",msglist);\n    return null;\n    \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "18c3240ed6122413",
                "8ef0a11a88325ef4",
                "e0f2ffb9c384929e"
            ]
        ]
    },
    {
        "id": "69094993a561a9d0",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "next",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "next",
        "payloadType": "str",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "bc4bf3214c0a7eac"
            ]
        ]
    },
    {
        "id": "1a6d2c5daaac621b",
        "type": "link out",
        "z": "ad903b095342f1e3",
        "name": "",
        "links": [
            "c4e46a82.1c9e7",
            "2d6b6010fdf5ed4a"
        ],
        "x": 1015,
        "y": 800,
        "wires": []
    },
    {
        "id": "79a11a822b7718de",
        "type": "trigger",
        "z": "ad903b095342f1e3",
        "name": "",
        "op1": "reading",
        "op2": "done",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 1340,
        "y": 460,
        "wires": [
            [
                "2a87366365f10ebe"
            ]
        ]
    },
    {
        "id": "2a87366365f10ebe",
        "type": "change",
        "z": "ad903b095342f1e3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "modbusIn",
                "pt": "flow",
                "to": "xxx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "2d6b6010fdf5ed4a",
        "type": "link in",
        "z": "ad903b095342f1e3",
        "name": "",
        "links": [
            "1a6d2c5daaac621b"
        ],
        "x": 415,
        "y": 440,
        "wires": [
            [
                "baa28a5f2fbc812f"
            ]
        ]
    },
    {
        "id": "987905178f0d7c8a",
        "type": "change",
        "z": "ad903b095342f1e3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 440,
        "wires": [
            [
                "bc4bf3214c0a7eac"
            ]
        ]
    },
    {
        "id": "36b665507593fb42",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1150,
        "y": 460,
        "wires": [
            [
                "79a11a822b7718de"
            ]
        ]
    },
    {
        "id": "616a42664f34ada9",
        "type": "link in",
        "z": "ad903b095342f1e3",
        "name": "",
        "links": [
            "836155a216f1a737",
            "2db0089.690c2f8",
            "be5ca099.80857",
            "5dbf074d.dd7078",
            "315cd92.2bca026"
        ],
        "x": 635,
        "y": 360,
        "wires": [
            [
                "bc4bf3214c0a7eac"
            ]
        ]
    },
    {
        "id": "836155a216f1a737",
        "type": "link out",
        "z": "ad903b095342f1e3",
        "name": "",
        "links": [
            "616a42664f34ada9",
            "479e65f4.abc6cc"
        ],
        "x": 815,
        "y": 560,
        "wires": []
    },
    {
        "id": "8262807f19738387",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "",
        "func": "msg= msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 920,
        "wires": [
            [
                "e53bc655ccc539b5"
            ]
        ]
    },
    {
        "id": "da92b9efccdb59c8",
        "type": "change",
        "z": "ad903b095342f1e3",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "msglist",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 560,
        "wires": [
            [
                "836155a216f1a737"
            ]
        ]
    },
    {
        "id": "8ea37683bb9ad311",
        "type": "delay",
        "z": "ad903b095342f1e3",
        "d": true,
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "bc4bf3214c0a7eac"
            ]
        ]
    },
    {
        "id": "db3944ca68ac509d",
        "type": "split",
        "z": "ad903b095342f1e3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "8ea37683bb9ad311",
                "1f9bc5033a4b9763",
                "bc4bf3214c0a7eac"
            ]
        ]
    },
    {
        "id": "074f7772a3d65878",
        "type": "change",
        "z": "ad903b095342f1e3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "points",
                "pt": "msg",
                "to": "5000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 660,
        "wires": [
            [
                "e53bc655ccc539b5"
            ]
        ]
    },
    {
        "id": "79f5602f3ee8e211",
        "type": "switch",
        "z": "ad903b095342f1e3",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "AlarmCode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "WarningCode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Position",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "temperature",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "co2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "372dd29b355d4cb8",
                "e53bc655ccc539b5"
            ],
            [
                "e53bc655ccc539b5"
            ],
            [
                "074f7772a3d65878"
            ],
            [
                "05ddc15f9d3dcef5"
            ],
            [
                "bedc4bb9dc4c4ab5"
            ],
            [
                "e53bc655ccc539b5"
            ]
        ]
    },
    {
        "id": "7fb67cd61fa9efbf",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "[{\"register\":\"8\",\"reading\":\"dat.co2\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"ppm\"},{\"register\":\"11\",\"reading\":\"dat.humidity\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"12\",\"reading\":\"dat.temperature\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"°C\"},{\"register\":\"28\",\"reading\":\"dat.setpoint\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"units\":\"%\"}]",
        "payloadType": "json",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "349d8edf75941570"
            ]
        ]
    },
    {
        "id": "5b87b87c1d88ed3a",
        "type": "split",
        "z": "ad903b095342f1e3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 140,
        "wires": [
            [
                "938f829681aebebd"
            ]
        ]
    },
    {
        "id": "938f829681aebebd",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "Store Registers",
        "func": "\nvar rin = msg.payload;\nif (rin.register<1) { return null; } \n\n\nvar v = global.get(\"readings.\" + rin.reading + \".value\") || 0\nrin[\"value\"] = v;\n\n\n\nflow.set(\"registers.r\" + rin.register, rin);\n\nmsg.payload = flow.get(\"registers\") ;\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "0b0cb9726be814b3",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "DEVICES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"address\":\"10\",\"device\":\"sontay110\"},{\"address\":\"11\",\"device\":\"sontay111\"},{\"address\":\"12\",\"device\":\"sontay112\"},{\"address\":\"13\",\"device\":\"sontay112bb\"},{\"address\":\"14\",\"device\":\"sontay113\"},{\"address\":\"15\",\"device\":\"sontay114\"},{\"address\":\"16\",\"device\":\"sontay114bb\"},{\"address\":\"17\",\"device\":\"sontay115\"},{\"address\":\"18\",\"device\":\"sontay116\"},{\"address\":\"19\",\"device\":\"sontay117\"},{\"address\":\"20\",\"device\":\"sontay118\"}]",
        "payloadType": "json",
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "e9f9f839e883dc0b"
            ]
        ]
    },
    {
        "id": "e9f9f839e883dc0b",
        "type": "split",
        "z": "ad903b095342f1e3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "745223bbd9ce6f32"
            ]
        ]
    },
    {
        "id": "745223bbd9ce6f32",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "Store Devices",
        "func": "\nvar rin = msg.payload;\nif (rin.address<1) { return null; } \n\n\nflow.set(\"devices.\" + rin.address, rin);\n\n\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d13bbadac49ffece",
        "type": "link in",
        "z": "ad903b095342f1e3",
        "name": "",
        "links": [
            "1f335ee0.7b9a41",
            "b09805d5.754898"
        ],
        "x": 195,
        "y": 500,
        "wires": [
            [
                "861654d70eb673dc"
            ]
        ]
    },
    {
        "id": "372dd29b355d4cb8",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "",
        "func": "msg.topic = msg.topic.replace(\"/stat/\",\"/alarm/\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 620,
        "wires": [
            [
                "e53bc655ccc539b5"
            ]
        ]
    },
    {
        "id": "861654d70eb673dc",
        "type": "delay",
        "z": "ad903b095342f1e3",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 500,
        "wires": [
            [
                "da92b9efccdb59c8"
            ]
        ]
    },
    {
        "id": "d90b836d151e7f91",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"register\":\"1\",\"reading\":\"dat.setpoint\",\"multiplier\":\"100\",\"datatype\":\"int16\"},{\"register\":\"2\",\"reading\":\"dat.overrideControl\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"none\",\"1\":\"open\",\"2\":\"close\",\"3\":\"min\",\"4\":\"mid\",\"5\":\"max\"}},{\"register\":\"3\",\"reading\":\"dat.command\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"4\",\"reading\":\"dat.actuatorType\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"Actuator Not Connected\",\"1\":\"Air / Water\",\"2\":\"VAV / EPIV\",\"3\":\"Fire\",\"4\":\"Energy Valve\",\"5\":\"6way EPIV\"}},{\"register\":\"5\",\"reading\":\"dat.relativePosition\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"6\",\"reading\":\"dat.absolutePosition\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"mm\"},{\"register\":\"6\",\"reading\":\"dat.sensorValue1\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"13\",\"reading\":\"dat.setpointAnalogue\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"100\",\"reading\":\"settings.busTermination\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"inactive\",\"1\":\"active\"}},{\"register\":\"101\",\"reading\":\"stat.seriesNumberPart1\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"102\",\"reading\":\"stat.seriesNumberPart2\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"103\",\"reading\":\"stat.seriesNumberPart3\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"104\",\"reading\":\"stat.firmwareVirsion\",\"multiplier\":\"1\",\"datatype\":\"int16\"},{\"register\":\"106\",\"reading\":\"settings.min\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"107\",\"reading\":\"settings.max\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"108\",\"reading\":\"settings.sensorType1\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"None\",\"1\":\"Active / Hybrid\",\"2\":\"Passive_1K\",\"3\":\"Passive_20K\",\"4\":\"Switch\",\"5\":\"PT1000_C\",\"6\":\"NI1000_C\",\"7\":\"NTC10K_C\",\"8\":\"PT1000_F\",\"9\":\"NI1000_F\",\"10\":\"NTC10K_F\"}},{\"register\":\"109\",\"reading\":\"settings.busFailPosition\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"0\":\"None / Last setpoint\",\"1\":\"Fast close\",\"2\":\"Fast open\",\"3\":\"Mid position\"}},{\"register\":\"110\",\"reading\":\"settings.watchdogTimeout\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"s\"}]",
        "payloadType": "json",
        "x": 1090,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "349d8edf75941570",
        "type": "change",
        "z": "ad903b095342f1e3",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "registers",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 140,
        "wires": [
            [
                "5b87b87c1d88ed3a"
            ]
        ]
    },
    {
        "id": "1cdfb602bc4bd78a",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "e2903d497daf712c"
            ]
        ]
    },
    {
        "id": "e2903d497daf712c",
        "type": "http request",
        "z": "ad903b095342f1e3",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/heatweb/plumbing-controller/main/json/modbus/sontay.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "cfcadba3793926b9",
                "4fb558b452ab65c0"
            ]
        ]
    },
    {
        "id": "fbd0909368689af6",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "cfcadba3793926b9",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "sontay1",
        "func": "\nfunction checkMatch(device) {\n  return device.id == \"sontay1\";\n}\n\nmsg.payload = msg.payload.filter(checkMatch);\n\nif (msg.payload[0]) { msg.payload = msg.payload[0].registers }\n\nelse { return null; }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "fbd0909368689af6",
                "349d8edf75941570"
            ]
        ]
    },
    {
        "id": "4fb558b452ab65c0",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "baa28a5f2fbc812f",
        "type": "delay",
        "z": "ad903b095342f1e3",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "987905178f0d7c8a"
            ]
        ]
    },
    {
        "id": "3fec2b6d9c9fe4fe",
        "type": "mqtt out",
        "z": "ad903b095342f1e3",
        "d": true,
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1710,
        "y": 620,
        "wires": []
    },
    {
        "id": "ec3de4de97900969",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "_/",
        "func": "msg.topic = \"_/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 620,
        "wires": [
            [
                "3fec2b6d9c9fe4fe"
            ]
        ]
    },
    {
        "id": "702c0abe6b56b679",
        "type": "link in",
        "z": "ad903b095342f1e3",
        "name": "link in 2",
        "links": [
            "e53bc655ccc539b5"
        ],
        "x": 1495,
        "y": 620,
        "wires": [
            [
                "ec3de4de97900969"
            ]
        ]
    },
    {
        "id": "c10a9658c372e852",
        "type": "comment",
        "z": "ad903b095342f1e3",
        "name": "",
        "info": "https://www.binaryconvert.com/convert_signed_int.html?hexadecimal=000019FD",
        "x": 160,
        "y": 680,
        "wires": []
    },
    {
        "id": "f22356fef6b4369a",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "251f89b33522de0f"
            ]
        ]
    },
    {
        "id": "990d4275be863ca2",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "debug 54",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 920,
        "wires": []
    },
    {
        "id": "251f89b33522de0f",
        "type": "exec",
        "z": "ad903b095342f1e3",
        "command": "megabas 1 rs485wr 0 9600 1 0 1",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 440,
        "y": 920,
        "wires": [
            [
                "990d4275be863ca2"
            ],
            [],
            []
        ]
    },
    {
        "id": "bbb38fadad54ccf6",
        "type": "inject",
        "z": "ad903b095342f1e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1140,
        "y": 340,
        "wires": [
            [
                "78330a55af145ab6"
            ]
        ]
    },
    {
        "id": "78330a55af145ab6",
        "type": "serial out",
        "z": "ad903b095342f1e3",
        "d": true,
        "name": "",
        "serial": "02cf675553394d1d",
        "x": 1350,
        "y": 380,
        "wires": []
    },
    {
        "id": "dd3aa4697d2a81a6",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1040,
        "wires": []
    },
    {
        "id": "03a68b5b9b7a0af9",
        "type": "serial in",
        "z": "ad903b095342f1e3",
        "name": "",
        "serial": "80abe4eb2166ba41",
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "ee562e06613191b3"
            ]
        ]
    },
    {
        "id": "ee562e06613191b3",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1040,
        "wires": []
    },
    {
        "id": "8ef0a11a88325ef4",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "function 7",
        "func": "//msg.payload = { 'fc': 3, 'unitid': 10, 'address': 8, 'quantity': 1 }\n\n\nmsg.payload.unitid = parseInt(msg.payload.address);\nmsg.payload.quantity = 1;\nmsg.payload.address = parseInt(msg.payload.register);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 240,
        "wires": [
            [
                "aa846c8ab560d2ac",
                "52dab22d34e0218c"
            ]
        ]
    },
    {
        "id": "aa846c8ab560d2ac",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 180,
        "wires": []
    },
    {
        "id": "e0f2ffb9c384929e",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "debug 70",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 280,
        "wires": []
    },
    {
        "id": "9d454a70b0c9b4fd",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "debug 71",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 240,
        "wires": []
    },
    {
        "id": "f711eaba0568eacb",
        "type": "modbus-flex-getter",
        "z": "ad903b095342f1e3",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "d71e6162d7e087b2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1510,
        "y": 240,
        "wires": [
            [
                "9d454a70b0c9b4fd",
                "ef15fe7e78531f38"
            ],
            []
        ]
    },
    {
        "id": "52dab22d34e0218c",
        "type": "change",
        "z": "ad903b095342f1e3",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payloadin",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 240,
        "wires": [
            [
                "f711eaba0568eacb"
            ]
        ]
    },
    {
        "id": "ef15fe7e78531f38",
        "type": "link out",
        "z": "ad903b095342f1e3",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "6e08fe43df37c23d"
        ],
        "x": 1655,
        "y": 180,
        "wires": []
    },
    {
        "id": "6e08fe43df37c23d",
        "type": "link in",
        "z": "ad903b095342f1e3",
        "name": "link in 4",
        "links": [
            "ef15fe7e78531f38"
        ],
        "x": 715,
        "y": 820,
        "wires": [
            [
                "30470aa5af24b743",
                "c25746fb0e12f6a4"
            ]
        ]
    },
    {
        "id": "281f56f63c113dfb",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128)\n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}\n\nvar msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\n\nmsg.address = flow.get(\"curraddr\"); //msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nvar minfo = flow.get(\"registers.r\" + msg.register) || null;\nvar dinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nflow.set(\"modbusIn\",\"xxx\");\n\n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n\n        if (minfo[\"values\"]) {\n            \n            if (minfo[\"values\"][15-bc]) {\n                if (minfo[\"values\"][15-bc][\"\" + item.payload]) { item.payload = minfo[\"values\"][15-bc][\"\" + item.payload]; }\n            }\n        }\n\n\n        \n        oot[item.topic] = item;\n        \n        bc=bc-1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} \n\nelse if (minfo.datatype == \"IEEE754\") {\n\n    msg.payload = String.fromCharCode(msg.payload[3]) + String.fromCharCode(msg.payload[4]) + String.fromCharCode(msg.payload[5]) + String.fromCharCode(msg.payload[6]);\n    msg.payload = Buffer.from(msg.payload, 'ascii');\n\n    \n    let intValue;\n    // if (typeof msg.payload === \"number\") {\n    //     intValue = msg.payload;\n    // } else if (typeof msg.payload === \"string\") {\n    //     intValue = Number(msg.payload);\n    // } else if (msg.payload.length == 4) {\n        // four byte array or buffer\n        intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n    // } else {\n    //     node.warn(\"Unrecognised payload type or length\");\n    // }\n\n    msg.payload = Int2Float32(intValue);\n        \n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\", \"/\");\n\n\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n\n\n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else { msg.title = (minfo[\"reading\"].split(\".\")[1] ? minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg, null];\n\n}\n\nelse {\n    \n   \n           \n    msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n\n    if (minfo[\"values\"]) {\n        \n        if (minfo[\"values\"]==\"alarmCodes\") { \n            \n            var ac = flow.get(\"alarmCodes\");\n            if (ac[\"\" + msg.payload]) { msg.payload = ac[\"\" + msg.payload]; }\n        }\n        \n        else if (minfo[\"values\"][\"\" + msg.payload]) { msg.payload = minfo[\"values\"][\"\" + msg.payload]; }\n    }\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n    \n    \n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 840,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "dc2d193427f9ec0d",
        "type": "catch",
        "z": "ad903b095342f1e3",
        "name": "",
        "scope": [
            "f711eaba0568eacb"
        ],
        "uncaught": false,
        "x": 1610,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6b2b4694fd24ae62",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1590,
        "y": 780,
        "wires": []
    },
    {
        "id": "dc383a5954d8a47d",
        "type": "debug",
        "z": "ad903b095342f1e3",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1570,
        "y": 840,
        "wires": []
    },
    {
        "id": "bedc4bb9dc4c4ab5",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "CO2 CALLIBRATION",
        "func": "\n\nvar offset = 400;\nvar room = msg.topic.split(\"/\")[0];\n\nif (room==\"sontay110\") {  offset = 416; }\nelse if (room == \"sontay111\") { offset = 417; }\nelse if (room == \"sontay112\") { offset = 462; }\nelse if (room == \"sontay113\") { offset = 453; }\nelse if (room == \"sontay114\") { offset = 416; }\nelse if (room == \"sontay115\") { offset = 491; }\nelse if (room == \"sontay116\") { offset = 435; }\nelse if (room == \"sontay117\") { offset = 416; }\nelse if (room == \"sontay118\") { offset = 415; }\nelse if (msg.payload == 65535) { return null; }\n\n\n\nvar msg1 = {};\nmsg1.topic = room + \"/dat/co2Rise\";\nmsg1.payload = msg.payload - offset;\nnode.send(msg1);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 820,
        "wires": [
            [
                "dc383a5954d8a47d",
                "e53bc655ccc539b5"
            ]
        ]
    },
    {
        "id": "05ddc15f9d3dcef5",
        "type": "function",
        "z": "ad903b095342f1e3",
        "name": "function 10",
        "func": "var dev = msg.topic.split(\"/\")[0];\n\nvar hist = context.get(\"hist.\" + dev) || [msg.payload, msg.payload, msg.payload];\n\nhist.push(msg.payload);\nif (hist.length>3) { hist.shift(); }\n\nif (hist.length > 3) { hist.shift(); }\n\ncontext.set(\"hist.\" + dev, hist);\n\nvar numbersCopy = [];\n\nfor (var i = 0; i < hist.length; i++) {\n    numbersCopy[i] = hist[i];\n}\nnumbersCopy.sort(function (a, b) { return b - a });\n\n\n\n//if (msg.payload == hist[2]) { return msg; }\n//if (msg.payload == hist[1]) { return msg; }\n//else if  (Math.min(hist) == Math.max(hist)) { return msg; }\nif (msg.payload == Math.max(hist)) { msg.payload = hist[hist.length - 2]; }\nelse if (msg.payload == Math.min(hist)) { msg.payload = hist[hist.length - 2]; }\n\nmsg.payload = numbersCopy[1];\n\nvar histSmooth = context.get(\"histSmooth.\" + dev) || [1.0 * msg.payload, 1.0 * msg.payload, 1.0 * msg.payload, 1.0 * msg.payload];\nhistSmooth.push(1.0 *msg.payload);\nif (histSmooth.length > 4) { histSmooth.shift(); }\ncontext.set(\"histSmooth.\" + dev, histSmooth);\n\nvar msg1 = {}\nmsg1.topic = msg.topic + \"Smooth\"\nmsg1.payload = parseInt(1000 * histSmooth.reduce((a, b) => a + b, 0) / histSmooth.length) / (1000);\nnode.send(msg1);\n\nmsg1.topic = msg.topic + \"Diff\"\nmsg1.payload = 1.0 * (histSmooth[2] - histSmooth[0]) / 3  ;\nnode.send(msg1);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 760,
        "wires": [
            [
                "6b2b4694fd24ae62",
                "e53bc655ccc539b5"
            ]
        ]
    },
    {
        "id": "0d96fbfa7b3a51c8",
        "type": "modbus-getter",
        "z": "42ed18ca.652838",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "10",
        "dataType": "HoldingRegister",
        "adr": "8",
        "quantity": "1",
        "server": "d71e6162d7e087b2",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 400,
        "y": 120,
        "wires": [
            [
                "e392160fc9402b8c"
            ],
            [
                "34a36831eb06a740"
            ]
        ]
    },
    {
        "id": "c5aa899a8a4fd784",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "0d96fbfa7b3a51c8"
            ]
        ]
    },
    {
        "id": "e392160fc9402b8c",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 100,
        "wires": []
    },
    {
        "id": "34a36831eb06a740",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "f30d946728eea775",
        "type": "inject",
        "z": "42ed18ca.652838",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "d35b1a73477a3b8b"
            ]
        ]
    },
    {
        "id": "d35b1a73477a3b8b",
        "type": "function",
        "z": "42ed18ca.652838",
        "name": "FC1",
        "func": "msg.payload = { 'fc': 3, 'unitid': 10, 'address': 8 , 'quantity': 1 }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "da6f4694fbc32b2c",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 280,
        "wires": []
    },
    {
        "id": "1faa50e37ec1c547",
        "type": "modbus-response",
        "z": "42ed18ca.652838",
        "name": "",
        "registerShowMax": 20,
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "d7d9f1c1c60d8229",
        "type": "link in",
        "z": "42ed18ca.652838",
        "name": "Modbus TCP Read",
        "links": [],
        "x": 215,
        "y": 220,
        "wires": [
            [
                "04c82e49980b15df"
            ]
        ]
    },
    {
        "id": "19f017eac6bff839",
        "type": "link out",
        "z": "42ed18ca.652838",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 565,
        "y": 220,
        "wires": []
    },
    {
        "id": "04c82e49980b15df",
        "type": "debug",
        "z": "42ed18ca.652838",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 220,
        "wires": []
    },
    {
        "id": "b1d4177d527a0afa",
        "type": "inject",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "e168762e3dd7a879"
            ]
        ]
    },
    {
        "id": "dc28e795b1131230",
        "type": "http request",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "264ae35560f4c675"
            ]
        ]
    },
    {
        "id": "de6ea03f54bfc186",
        "type": "debug",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 340,
        "wires": []
    },
    {
        "id": "38077ab59b70f822",
        "type": "change",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "weather",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 340,
        "wires": [
            [
                "de6ea03f54bfc186",
                "155cd1e60b5a86ae"
            ]
        ]
    },
    {
        "id": "264ae35560f4c675",
        "type": "json",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 490,
        "y": 340,
        "wires": [
            [
                "38077ab59b70f822"
            ]
        ]
    },
    {
        "id": "f8063c434a28a965",
        "type": "comment",
        "z": "332e55aa4dadf1e2",
        "name": "https://www.weatherapi.com/api-explorer.aspx",
        "info": "",
        "x": 280,
        "y": 100,
        "wires": []
    },
    {
        "id": "580a013d98680bac",
        "type": "function",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "func": "if (msg.key==\"condition\") { msg.payload = msg.payload.text; }\n\nmsg.topic = msg.group + \"/\" + msg.key;\n\nmsg.topic = msg.topic.replace(\"current/\",\"weather/\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "378970993e7c8c8d",
                "776e329235ad88fd"
            ]
        ]
    },
    {
        "id": "155cd1e60b5a86ae",
        "type": "split",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "group",
        "x": 440,
        "y": 500,
        "wires": [
            [
                "96b7373b4ca7c0d4"
            ]
        ]
    },
    {
        "id": "96b7373b4ca7c0d4",
        "type": "split",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "key",
        "x": 570,
        "y": 500,
        "wires": [
            [
                "580a013d98680bac"
            ]
        ]
    },
    {
        "id": "378970993e7c8c8d",
        "type": "debug",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 807,
        "y": 579,
        "wires": []
    },
    {
        "id": "776e329235ad88fd",
        "type": "link out",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 915,
        "y": 500,
        "wires": []
    },
    {
        "id": "c6b0d63d94c9ba56",
        "type": "comment",
        "z": "332e55aa4dadf1e2",
        "name": "Needs settings.postCode set",
        "info": "",
        "x": 500,
        "y": 200,
        "wires": []
    },
    {
        "id": "e168762e3dd7a879",
        "type": "function",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "func": "\nvar postcode = global.get(\"settings.postCode.value\");\n\nif (!postcode) { return null; }\n\nmsg.url = \"http://api.weatherapi.com/v1/current.json?key=2853c9a1a6664114a28160251211912&q=\" + postcode + \"&aqi=no\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "dc28e795b1131230"
            ]
        ]
    },
    {
        "id": "b2e6ddba44952429",
        "type": "inject",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 760,
        "wires": [
            [
                "24711807d48554e1"
            ]
        ]
    },
    {
        "id": "24711807d48554e1",
        "type": "function",
        "z": "332e55aa4dadf1e2",
        "name": "tAlarm",
        "func": "msg.payload = parseFloat(global.get(\"settings.postCode.value\") || \"\");\nmsg.topic = \"set/postCode\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 760,
        "wires": [
            [
                "538c40d5eb4158e9"
            ]
        ]
    },
    {
        "id": "538c40d5eb4158e9",
        "type": "ui_text_input",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "label": "Post Code",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 10,
        "width": "8",
        "height": "1",
        "passthru": false,
        "mode": "text",
        "delay": "5000",
        "topic": "set/postCode",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 530,
        "y": 760,
        "wires": [
            [
                "72e7066fe9bfa56d"
            ]
        ]
    },
    {
        "id": "72e7066fe9bfa56d",
        "type": "change",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "set/postCode",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Post Code",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 760,
        "wires": [
            [
                "948513be7da72df9",
                "b21c7e8733a8d8d3"
            ]
        ]
    },
    {
        "id": "948513be7da72df9",
        "type": "link out",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1055,
        "y": 760,
        "wires": []
    },
    {
        "id": "b21c7e8733a8d8d3",
        "type": "trigger",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "ccb477b5d030d72e"
            ]
        ]
    },
    {
        "id": "ccb477b5d030d72e",
        "type": "change",
        "z": "332e55aa4dadf1e2",
        "name": "post changes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "cmd/request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "local/+/+/settings/#",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 840,
        "wires": [
            [
                "948513be7da72df9"
            ]
        ]
    },
    {
        "id": "ad2a6ef374d0857b",
        "type": "inject",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "set/postCode",
        "payload": "SA13 2BZ",
        "payloadType": "str",
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "c1ae9744bf19e44d"
            ]
        ]
    },
    {
        "id": "c1ae9744bf19e44d",
        "type": "link out",
        "z": "332e55aa4dadf1e2",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1175,
        "y": 180,
        "wires": []
    }
]